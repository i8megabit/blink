"""
üöÄ –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –±—É—Ç—Å—Ç—Ä–∞–ø–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
"""

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from contextlib import asynccontextmanager
from typing import Optional, Dict, Any
import structlog

from .config import get_settings
from .logging import setup_logging
from .monitoring import get_service_monitor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = structlog.get_logger()

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    logger.info("Starting application", service=app.title)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    monitor = get_service_monitor()
    logger.info("Monitoring initialized")
    
    yield
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    logger.info("Shutting down application", service=app.title)

def create_app(
    title: str,
    description: str,
    version: str = "1.0.0",
    debug: Optional[bool] = None,
    **kwargs
) -> FastAPI:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –±—É—Ç—Å—Ç—Ä–∞–ø–æ–º
    
    Args:
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        description: –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        version: –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        debug: –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    """
    
    settings = get_settings()
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏
    if debug is None:
        debug = settings.DEBUG
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = FastAPI(
        title=title,
        description=description,
        version=version,
        debug=debug,
        lifespan=lifespan,
        **kwargs
    )
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ CORS middleware
    cors_origins = settings.CORS_ORIGINS.split(",")
    app.add_middleware(
        CORSMiddleware,
        allow_origins=cors_origins,
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ TrustedHost middleware
    app.add_middleware(
        TrustedHostMiddleware,
        allowed_hosts=["*"]  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å
    )
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ health check endpoint
    @app.get("/health")
    async def health_check():
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        return {
            "status": "healthy",
            "service": title,
            "version": version,
            "description": description
        }
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ metrics endpoint
    if settings.METRICS_ENABLED:
        from prometheus_client import generate_latest, CONTENT_TYPE_LATEST
        from fastapi.responses import Response
        
        @app.get("/metrics")
        async def metrics():
            """–ú–µ—Ç—Ä–∏–∫–∏ Prometheus"""
            return Response(
                content=generate_latest(),
                media_type=CONTENT_TYPE_LATEST
            )
    
    logger.info(
        "Application created",
        title=title,
        version=version,
        debug=debug
    )
    
    return app

def add_service_routes(app: FastAPI, router, prefix: str = "/api/v1"):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ—É—Ç–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    
    Args:
        app: FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        router: –†–æ—É—Ç–µ—Ä —Å–µ—Ä–≤–∏—Å–∞
        prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Ä–æ—É—Ç–æ–≤
    """
    app.include_router(router, prefix=prefix)
    logger.info("Service routes added", prefix=prefix) 