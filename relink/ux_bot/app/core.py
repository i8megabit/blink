"""
üß† –Ø–¥—Ä–æ UX –±–æ—Ç–∞-–∏–º–∏—Ç–∞—Ç–æ—Ä–∞ (–§–∞–Ω—Ç–æ–º–∞—Å–∞)

–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞ –ª—é–±–æ–≥–æ UI —á–µ—Ä–µ–∑ LLM —Ä–æ—É—Ç–µ—Ä.
–†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –ø—Ä–∏–Ω–∏–º–∞—è –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.
"""

import asyncio
import json
import logging
import random
import time
from typing import Dict, List, Optional, Any, Union
from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
import hashlib
import uuid

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import TimeoutException, NoSuchElementException

from .config import settings
from .api_client import APIClient
from .models import UIAnalysis, UserAction, TestReport, HumanProfile, BrowserConfig, APIConfig, PageAnalysis, Issue, IssueSeverity, UserProfile, ScenarioContext, TestResult, TestStatus
from .services.browser_service import BrowserService
from .services.scenario_service import ScenarioService

logger = logging.getLogger(__name__)

class ActionType(Enum):
    """–¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    CLICK = "click"
    TYPE = "type"
    SCROLL = "scroll"
    HOVER = "hover"
    WAIT = "wait"
    NAVIGATE = "navigate"
    EXTRACT = "extract"
    ANALYZE = "analyze"
    CUSTOM_JS = "custom_js"

class UIAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä UI –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    def __init__(self, driver: webdriver.Remote):
        self.driver = driver
        self.analysis_data = {}
    
    async def analyze_page_structure(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ DOM —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            dom_elements = self.driver.find_elements(By.XPATH, "//*")
            
            # –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º
            forms = self.driver.find_elements(By.TAG_NAME, "form")
            form_data = []
            for form in forms:
                inputs = form.find_elements(By.TAG_NAME, "input")
                form_data.append({
                    "action": form.get_attribute("action"),
                    "method": form.get_attribute("method"),
                    "inputs": [{"type": inp.get_attribute("type"), "name": inp.get_attribute("name")} for inp in inputs]
                })
            
            # –ê–Ω–∞–ª–∏–∑ —Å—Å—ã–ª–æ–∫
            links = self.driver.find_elements(By.TAG_NAME, "a")
            link_data = [{"href": link.get_attribute("href"), "text": link.text} for link in links]
            
            # –ê–Ω–∞–ª–∏–∑ –∫–Ω–æ–ø–æ–∫
            buttons = self.driver.find_elements(By.TAG_NAME, "button")
            button_data = [{"text": btn.text, "type": btn.get_attribute("type")} for btn in buttons]
            
            # JavaScript –∞–Ω–∞–ª–∏–∑
            js_data = self._analyze_javascript()
            
            # CSS –∞–Ω–∞–ª–∏–∑
            css_data = self._analyze_css()
            
            return {
                "timestamp": datetime.now().isoformat(),
                "url": self.driver.current_url,
                "title": self.driver.title,
                "forms": form_data,
                "links": link_data,
                "buttons": button_data,
                "javascript": js_data,
                "css": css_data,
                "meta_tags": self._extract_meta_tags(),
                "accessibility": self._analyze_accessibility()
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return {"error": str(e)}
    
    def _analyze_javascript(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ JavaScript –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö script —Ç–µ–≥–æ–≤
            scripts = self.driver.find_elements(By.TAG_NAME, "script")
            js_data = {
                "external_scripts": [],
                "inline_scripts": [],
                "event_listeners": []
            }
            
            for script in scripts:
                src = script.get_attribute("src")
                if src:
                    js_data["external_scripts"].append(src)
                else:
                    content = script.get_attribute("innerHTML")
                    if content:
                        js_data["inline_scripts"].append(content[:200] + "..." if len(content) > 200 else content)
            
            # –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ JavaScript
            js_analysis = self.driver.execute_script("""
                return {
                    window_events: Object.keys(window),
                    document_events: Object.keys(document),
                    localStorage: Object.keys(localStorage),
                    sessionStorage: Object.keys(sessionStorage),
                    cookies: document.cookie
                }
            """)
            
            js_data.update(js_analysis)
            return js_data
        except Exception as e:
            return {"error": str(e)}
    
    def _analyze_css(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ CSS —Å—Ç–∏–ª–µ–π"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö link —Ç–µ–≥–æ–≤ —Å CSS
            css_links = self.driver.find_elements(By.CSS_SELECTOR, "link[rel='stylesheet']")
            css_data = {
                "external_stylesheets": [link.get_attribute("href") for link in css_links],
                "inline_styles": []
            }
            
            # –ê–Ω–∞–ª–∏–∑ inline —Å—Ç–∏–ª–µ–π
            elements_with_style = self.driver.find_elements(By.CSS_SELECTOR, "[style]")
            for element in elements_with_style[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                css_data["inline_styles"].append({
                    "tag": element.tag_name,
                    "style": element.get_attribute("style")
                })
            
            return css_data
        except Exception as e:
            return {"error": str(e)}
    
    def _extract_meta_tags(self) -> List[Dict[str, str]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞-—Ç–µ–≥–æ–≤"""
        try:
            meta_tags = self.driver.find_elements(By.TAG_NAME, "meta")
            return [
                {
                    "name": tag.get_attribute("name"),
                    "content": tag.get_attribute("content"),
                    "property": tag.get_attribute("property")
                }
                for tag in meta_tags
            ]
        except Exception as e:
            return []
    
    def _analyze_accessibility(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ ARIA –∞—Ç—Ä–∏–±—É—Ç–æ–≤
            aria_elements = self.driver.find_elements(By.CSS_SELECTOR, "[aria-*]")
            aria_data = []
            for element in aria_elements:
                aria_attrs = {}
                for attr in ["aria-label", "aria-describedby", "aria-hidden", "aria-expanded"]:
                    value = element.get_attribute(attr)
                    if value:
                        aria_attrs[attr] = value
                if aria_attrs:
                    aria_data.append({
                        "tag": element.tag_name,
                        "attributes": aria_attrs
                    })
            
            return {
                "aria_elements": aria_data,
                "alt_images": len(self.driver.find_elements(By.CSS_SELECTOR, "img[alt]")),
                "total_images": len(self.driver.find_elements(By.TAG_NAME, "img"))
            }
        except Exception as e:
            return {"error": str(e)}

class HumanProfileGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        self.profiles = []
        self._load_profiles()
    
    def _load_profiles(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        self.profiles = [
            {
                "name": "–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤",
                "age": 28,
                "occupation": "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
                "tech_level": "expert",
                "browsing_speed": "fast",
                "patience": "low",
                "exploration_style": "systematic"
            },
            {
                "name": "–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞",
                "age": 35,
                "occupation": "–º–µ–Ω–µ–¥–∂–µ—Ä",
                "tech_level": "intermediate",
                "browsing_speed": "medium",
                "patience": "medium",
                "exploration_style": "curious"
            },
            {
                "name": "–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤",
                "age": 42,
                "occupation": "–¥–∏–∑–∞–π–Ω–µ—Ä",
                "tech_level": "advanced",
                "browsing_speed": "slow",
                "patience": "high",
                "exploration_style": "detailed"
            },
            {
                "name": "–ê–Ω–Ω–∞ –í–æ–ª–∫–æ–≤–∞",
                "age": 24,
                "occupation": "—Å—Ç—É–¥–µ–Ω—Ç",
                "tech_level": "basic",
                "browsing_speed": "fast",
                "patience": "low",
                "exploration_style": "random"
            }
        ]
    
    def generate_profile(self) -> HumanProfile:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        base_profile = random.choice(self.profiles)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–π
        profile = HumanProfile(
            id=str(uuid.uuid4()),
            name=base_profile["name"],
            age=base_profile["age"] + random.randint(-5, 5),
            occupation=base_profile["occupation"],
            tech_level=base_profile["tech_level"],
            browsing_speed=base_profile["browsing_speed"],
            patience=base_profile["patience"],
            exploration_style=base_profile["exploration_style"],
            user_agent=self._generate_user_agent(base_profile["tech_level"]),
            screen_resolution=self._generate_screen_resolution(),
            timezone="Europe/Moscow",
            language="ru-RU",
            created_at=datetime.now()
        )
        
        return profile
    
    def _generate_user_agent(self, tech_level: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è User-Agent –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
        user_agents = {
            "expert": [
                "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
            ],
            "advanced": [
                "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Safari/605.1.15",
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:121.0) Gecko/20100101 Firefox/121.0"
            ],
            "intermediate": [
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
                "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
            ],
            "basic": [
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36",
                "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36"
            ]
        }
        
        return random.choice(user_agents.get(tech_level, user_agents["intermediate"]))
    
    def _generate_screen_resolution(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞"""
        resolutions = [
            "1920x1080", "2560x1440", "1366x768", "1440x900", 
            "1536x864", "1280x720", "3840x2160", "1600x900"
        ]
        return random.choice(resolutions)

class UXImpersonator:
    """
    üé≠ UX –ò–º–∏—Ç–∞—Ç–æ—Ä (–§–∞–Ω—Ç–æ–º–∞—Å)
    
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –ª—é–±–æ–º UI.
    –†–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ LLM —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.
    """
    
    def __init__(self, api_client: APIClient):
        self.api_client = api_client
        self.driver: Optional[webdriver.Remote] = None
        self.profile_generator = HumanProfileGenerator()
        self.current_profile: Optional[HumanProfile] = None
        self.ui_analyzer: Optional[UIAnalyzer] = None
        self.session_id = str(uuid.uuid4())
        self.actions_history: List[UserAction] = []
        self.analysis_data: Dict[str, Any] = {}
        
    async def start_session(self, target_url: str, profile: Optional[HumanProfile] = None) -> bool:
        """–ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
            if not profile:
                self.current_profile = self.profile_generator.generate_profile()
            else:
                self.current_profile = profile
            
            logger.info(f"–ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º: {self.current_profile.name}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
            await self._setup_browser()
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ü–µ–ª–µ–≤–æ–π URL
            await self._navigate_to_url(target_url)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ UI
            self.ui_analyzer = UIAnalyzer(self.driver)
            
            # –ü–µ—Ä–≤–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            initial_analysis = await self.ui_analyzer.analyze_page_structure()
            self.analysis_data["initial"] = initial_analysis
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ RAG —á–µ—Ä–µ–∑ API
            await self._send_analysis_to_rag(initial_analysis)
            
            logger.info(f"–°–µ—Å—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. URL: {target_url}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏: {e}")
            return False
    
    async def _setup_browser(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏"""
        options = webdriver.ChromeOptions()
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ User-Agent
        options.add_argument(f"--user-agent={self.current_profile.user_agent}")
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
        width, height = self.current_profile.screen_resolution.split('x')
        options.add_argument(f"--window-size={width},{height}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)
        
        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if self.current_profile.browsing_speed == "fast":
            prefs = {"profile.managed_default_content_settings.images": 2}
            options.add_experimental_option("prefs", prefs)
        
        self.driver = webdriver.Chrome(options=options)
        
        # –°–∫—Ä—ã—Ç–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
        self.driver.implicitly_wait(10)
        self.driver.set_page_load_timeout(30)
    
    async def _navigate_to_url(self, url: str):
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ URL —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏"""
        logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ URL: {url}")
        
        # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
        await asyncio.sleep(random.uniform(1, 3))
        
        self.driver.get(url)
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        WebDriverWait(self.driver, 20).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )
        
        # –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        await asyncio.sleep(random.uniform(2, 5))
    
    async def _send_analysis_to_rag(self, analysis_data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞ –≤ RAG —á–µ—Ä–µ–∑ API"""
        try:
            await self.api_client.send_ui_analysis({
                "session_id": self.session_id,
                "profile_id": self.current_profile.id,
                "url": self.driver.current_url,
                "analysis": analysis_data,
                "timestamp": datetime.now().isoformat()
            })
            logger.info("–î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ RAG")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ RAG: {e}")
    
    async def get_llm_guidance(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –æ—Ç LLM —á–µ—Ä–µ–∑ —Ä–æ—É—Ç–µ—Ä"""
        try:
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è LLM
            prompt = self._build_llm_prompt(context)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ API –∫ LLM —Ä–æ—É—Ç–µ—Ä—É
            response = await self.api_client.get_llm_guidance({
                "session_id": self.session_id,
                "profile": self.current_profile.dict(),
                "current_context": context,
                "prompt": prompt,
                "action_history": [action.dict() for action in self.actions_history[-5:]]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–µ–π—Å—Ç–≤–∏–π
            })
            
            return response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –æ—Ç LLM: {e}")
            return {"action": "wait", "reason": "–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å LLM"}
    
    def _build_llm_prompt(self, context: Dict[str, Any]) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è LLM"""
        profile = self.current_profile
        
        prompt = f"""
–¢—ã - UX —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–π –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ—Ñ–∏–ª–µ–º:
–ò–º—è: {profile.name}
–í–æ–∑—Ä–∞—Å—Ç: {profile.age}
–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profile.occupation}
–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å: {profile.tech_level}
–°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {profile.browsing_speed}
–¢–µ—Ä–ø–µ–Ω–∏–µ: {profile.patience}
–°—Ç–∏–ª—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {profile.exploration_style}

–¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:
URL: {context.get('url', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {context.get('available_elements', [])}
–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: {context.get('recent_actions', [])}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∏—Ç—É–∞—Ü–∏—é –∏ –¥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.
–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å JSON:
{{
    "action": "—Ç–∏–ø_–¥–µ–π—Å—Ç–≤–∏—è",
    "target": "—Å–µ–ª–µ–∫—Ç–æ—Ä_–∏–ª–∏_–æ–ø–∏—Å–∞–Ω–∏–µ",
    "reason": "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ_–¥–µ–π—Å—Ç–≤–∏—è",
    "expected_outcome": "–æ–∂–∏–¥–∞–µ–º—ã–π_—Ä–µ–∑—É–ª—å—Ç–∞—Ç",
    "confidence": 0.0-1.0
}}

–¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π: click, type, scroll, hover, wait, navigate, extract, analyze, custom_js
"""
        
        return prompt
    
    async def execute_action(self, action_guidance: Dict[str, Any]) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É LLM"""
        try:
            action_type = action_guidance.get("action")
            target = action_guidance.get("target")
            reason = action_guidance.get("reason", "")
            
            logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: {action_type} -> {target} ({reason})")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏—è
            action = UserAction(
                id=str(uuid.uuid4()),
                session_id=self.session_id,
                action_type=ActionType(action_type),
                target=target,
                reason=reason,
                timestamp=datetime.now(),
                success=False
            )
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
            success = await self._perform_action(action_type, target)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            action.success = success
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.actions_history.append(action)
            
            # –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
            await asyncio.sleep(random.uniform(0.5, 2.0))
            
            return success
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è: {e}")
            return False
    
    async def _perform_action(self, action_type: str, target: str) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        try:
            if action_type == "click":
                return await self._click_element(target)
            elif action_type == "type":
                return await self._type_text(target)
            elif action_type == "scroll":
                return await self._scroll_page(target)
            elif action_type == "hover":
                return await self._hover_element(target)
            elif action_type == "wait":
                return await self._wait_action(target)
            elif action_type == "navigate":
                return await self._navigate_action(target)
            elif action_type == "extract":
                return await self._extract_data(target)
            elif action_type == "analyze":
                return await self._analyze_page(target)
            elif action_type == "custom_js":
                return await self._execute_custom_js(target)
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: {action_type}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è {action_type}: {e}")
            return False
    
    async def _click_element(self, target: str) -> bool:
        """–ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É"""
        try:
            element = self._find_element(target)
            if element:
                element.click()
                return True
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞: {e}")
            return False
    
    async def _type_text(self, target: str) -> bool:
        """–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞"""
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ target: "selector:text"
            if ":" in target:
                selector, text = target.split(":", 1)
            else:
                selector, text = target, "test text"
            
            element = self._find_element(selector)
            if element:
                element.clear()
                # –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –≤–≤–æ–¥ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
                for char in text:
                    element.send_keys(char)
                    await asyncio.sleep(random.uniform(0.05, 0.15))
                return True
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞: {e}")
            return False
    
    async def _scroll_page(self, target: str) -> bool:
        """–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            if target == "down":
                self.driver.execute_script("window.scrollBy(0, 300);")
            elif target == "up":
                self.driver.execute_script("window.scrollBy(0, -300);")
            elif target == "top":
                self.driver.execute_script("window.scrollTo(0, 0);")
            elif target == "bottom":
                self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            else:
                # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —ç–ª–µ–º–µ–Ω—Ç—É
                element = self._find_element(target)
                if element:
                    self.driver.execute_script("arguments[0].scrollIntoView();", element)
            
            await asyncio.sleep(random.uniform(0.5, 1.5))
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏: {e}")
            return False
    
    async def _hover_element(self, target: str) -> bool:
        """–ù–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç"""
        try:
            element = self._find_element(target)
            if element:
                ActionChains(self.driver).move_to_element(element).perform()
                await asyncio.sleep(random.uniform(0.5, 1.0))
                return True
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–≤–µ–¥–µ–Ω–∏—è: {e}")
            return False
    
    async def _wait_action(self, target: str) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ"""
        try:
            if target.isdigit():
                seconds = int(target)
            else:
                seconds = random.uniform(1, 3)
            
            await asyncio.sleep(seconds)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è: {e}")
            return False
    
    async def _navigate_action(self, target: str) -> bool:
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è"""
        try:
            if target.startswith("http"):
                self.driver.get(target)
            else:
                # –ü–æ–∏—Å–∫ —Å—Å—ã–ª–∫–∏
                link = self._find_element(f"a[href*='{target}']")
                if link:
                    link.click()
                else:
                    return False
            
            await asyncio.sleep(random.uniform(2, 4))
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
            return False
    
    async def _extract_data(self, target: str) -> bool:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if target == "all_forms":
                forms = self.driver.find_elements(By.TAG_NAME, "form")
                data = []
                for form in forms:
                    data.append({
                        "action": form.get_attribute("action"),
                        "method": form.get_attribute("method"),
                        "inputs": [inp.get_attribute("name") for inp in form.find_elements(By.TAG_NAME, "input")]
                    })
            elif target == "all_links":
                links = self.driver.find_elements(By.TAG_NAME, "a")
                data = [{"href": link.get_attribute("href"), "text": link.text} for link in links]
            else:
                element = self._find_element(target)
                data = element.text if element else None
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self.analysis_data["extracted_data"] = data
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    async def _analyze_page(self, target: str) -> bool:
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            if self.ui_analyzer:
                analysis = await self.ui_analyzer.analyze_page_structure()
                self.analysis_data["current_analysis"] = analysis
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ RAG
                await self._send_analysis_to_rag(analysis)
                return True
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return False
    
    async def _execute_custom_js(self, target: str) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ JavaScript"""
        try:
            result = self.driver.execute_script(target)
            self.analysis_data["js_result"] = result
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è JS: {e}")
            return False
    
    def _find_element(self, selector: str):
        """–ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–æ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—É
            if selector.startswith("."):
                return self.driver.find_element(By.CLASS_NAME, selector[1:])
            elif selector.startswith("#"):
                return self.driver.find_element(By.ID, selector[1:])
            elif selector.startswith("//"):
                return self.driver.find_element(By.XPATH, selector)
            elif selector.startswith("text="):
                text = selector[5:]
                return self.driver.find_element(By.XPATH, f"//*[contains(text(), '{text}')]")
            else:
                # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
                selectors = [
                    (By.CSS_SELECTOR, selector),
                    (By.XPATH, f"//*[contains(text(), '{selector}')]"),
                    (By.XPATH, f"//*[@placeholder='{selector}']"),
                    (By.XPATH, f"//*[@title='{selector}']")
                ]
                
                for by, sel in selectors:
                    try:
                        return self.driver.find_element(by, sel)
                    except NoSuchElementException:
                        continue
                
                return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ {selector}: {e}")
            return None
    
    async def run_test_session(self, max_actions: int = 20) -> TestReport:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info(f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Å—Å–∏–∏. –ú–∞–∫—Å–∏–º—É–º –¥–µ–π—Å—Ç–≤–∏–π: {max_actions}")
        
        actions_count = 0
        start_time = datetime.now()
        
        try:
            while actions_count < max_actions:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                context = await self._get_current_context()
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –æ—Ç LLM
                guidance = await self.get_llm_guidance(context)
                
                if not guidance or guidance.get("action") == "stop":
                    logger.info("LLM —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é")
                    break
                
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
                success = await self.execute_action(guidance)
                
                actions_count += 1
                
                if not success:
                    logger.warning(f"–î–µ–π—Å—Ç–≤–∏–µ {actions_count} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã
                if await self._check_for_errors():
                    logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                    break
                
                # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                await asyncio.sleep(random.uniform(1, 3))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Å—Å–∏–∏: {e}")
        
        finally:
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report = await self._generate_test_report(start_time, actions_count)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
            await self.api_client.send_test_report(report.dict())
            
            return report
    
    async def _get_current_context(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            # –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            available_elements = []
            
            # –ö–Ω–æ–ø–∫–∏
            buttons = self.driver.find_elements(By.TAG_NAME, "button")
            for btn in buttons[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                available_elements.append({
                    "type": "button",
                    "text": btn.text,
                    "selector": f"button:contains('{btn.text}')"
                })
            
            # –°—Å—ã–ª–∫–∏
            links = self.driver.find_elements(By.TAG_NAME, "a")
            for link in links[:5]:
                available_elements.append({
                    "type": "link",
                    "text": link.text,
                    "href": link.get_attribute("href")
                })
            
            # –§–æ—Ä–º—ã
            forms = self.driver.find_elements(By.TAG_NAME, "form")
            for form in forms[:3]:
                available_elements.append({
                    "type": "form",
                    "action": form.get_attribute("action")
                })
            
            return {
                "url": self.driver.current_url,
                "title": self.driver.title,
                "available_elements": available_elements,
                "recent_actions": [action.action_type.value for action in self.actions_history[-3:]],
                "session_duration": (datetime.now() - self.session_start_time).total_seconds()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return {"error": str(e)}
    
    async def _check_for_errors(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ JavaScript –æ—à–∏–±–∫–∏
            js_errors = self.driver.execute_script("return window.errors || [];")
            if js_errors:
                return True
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ HTTP –æ—à–∏–±–∫–∏
            if "404" in self.driver.title or "500" in self.driver.title:
                return True
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –æ—à–∏–±–æ–∫
            error_elements = self.driver.find_elements(By.CSS_SELECTOR, ".error, .alert, .warning")
            if error_elements:
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—à–∏–±–æ–∫: {e}")
            return False
    
    async def _generate_test_report(self, start_time: datetime, actions_count: int) -> TestReport:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        successful_actions = len([a for a in self.actions_history if a.success])
        failed_actions = len([a for a in self.actions_history if not a.success])
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
        issues = []
        if failed_actions > 0:
            issues.append(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: {failed_actions}")
        
        if duration < 30:
            issues.append("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è —Å–µ—Å—Å–∏—è")
        
        if actions_count < 5:
            issues.append("–ú–∞–ª–æ –¥–µ–π—Å—Ç–≤–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        
        return TestReport(
            id=str(uuid.uuid4()),
            session_id=self.session_id,
            profile_id=self.current_profile.id,
            target_url=self.driver.current_url if self.driver else "",
            start_time=start_time,
            end_time=end_time,
            duration=duration,
            total_actions=actions_count,
            successful_actions=successful_actions,
            failed_actions=failed_actions,
            issues=issues,
            analysis_data=self.analysis_data,
            actions_history=self.actions_history,
            created_at=datetime.now()
        )
    
    async def stop_session(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏"""
        try:
            if self.driver:
                self.driver.quit()
                self.driver = None
            
            logger.info("–°–µ—Å—Å–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.driver:
            try:
                self.driver.quit()
            except:
                pass 

class UXBotCore:
    """–Ø–¥—Ä–æ UX-–±–æ—Ç–∞ - –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã"""
    
    def __init__(self):
        self.session_id: Optional[str] = None
        self.browser_service: Optional[BrowserService] = None
        self.api_client: Optional[APIClient] = None
        self.scenario_service: Optional[ScenarioService] = None
        self.current_user_profile: Optional[UserProfile] = None
        self.is_running = False
        self.action_history: List[Dict[str, Any]] = []
        self.issues_found: List[Issue] = []
        
    async def initialize(self, user_profile_id: Optional[str] = None) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UX-–±–æ—Ç–∞"""
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UX-–±–æ—Ç–∞")
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —Å–µ—Å—Å–∏–∏
            self.session_id = str(uuid.uuid4())
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_profile_id:
                self.scenario_service = ScenarioService()
                self.current_user_profile = self.scenario_service.get_user_profile(user_profile_id)
                if not self.current_user_profile:
                    logger.warning(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {user_profile_id}")
                    self.current_user_profile = self.scenario_service.get_user_profile("beginner")
            else:
                self.scenario_service = ScenarioService()
                self.current_user_profile = self.scenario_service.get_user_profile("beginner")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
            browser_config = BrowserConfig(
                headless=settings.browser_headless,
                user_agent=settings.user_profiles[0]["name"] if settings.user_profiles else "UX Bot",
                wait_timeout=settings.browser_timeout,
                implicit_wait=settings.browser_implicit_wait
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            self.browser_service = BrowserService(browser_config)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
            api_config = APIConfig(
                base_url=settings.backend_url,
                timeout=30,
                retry_count=3
            )
            self.api_client = APIClient(api_config)
            
            logger.info(f"UX-–±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –°–µ—Å—Å–∏—è: {self.session_id}")
            logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {self.current_user_profile.name}")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UX-–±–æ—Ç–∞: {e}")
            return False
    
    async def start_session(self) -> bool:
        """–ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ UX-–±–æ—Ç–∞"""
        try:
            if not self.browser_service or not self.api_client:
                raise RuntimeError("UX-–±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
            browser_started = await self.browser_service.start_session(self.session_id)
            if not browser_started:
                raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä")
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
            await self.api_client.connect()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
            api_healthy = await self.api_client.health_check()
            if not api_healthy:
                logger.warning("API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É")
            
            self.is_running = True
            logger.info(f"–°–µ—Å—Å–∏—è UX-–±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞: {self.session_id}")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏ UX-–±–æ—Ç–∞: {e}")
            return False
    
    async def stop_session(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏ UX-–±–æ—Ç–∞"""
        try:
            self.is_running = False
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
            if self.browser_service:
                await self.browser_service.close_session()
            
            # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç API
            if self.api_client:
                await self.api_client.disconnect()
            
            logger.info(f"–°–µ—Å—Å–∏—è UX-–±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {self.session_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Å—Å–∏–∏ UX-–±–æ—Ç–∞: {e}")
    
    async def run_scenario(self, scenario_id: str) -> TestReport:
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        try:
            if not self.is_running:
                raise RuntimeError("UX-–±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            
            logger.info(f"–ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è: {scenario_id}")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
            context = self.scenario_service.create_scenario_context(
                scenario_id=scenario_id,
                session_id=self.session_id,
                user_profile=self.current_user_profile
            )
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
            results = await self.scenario_service.execute_scenario(
                context=context,
                browser_service=self.browser_service,
                api_client=self.api_client
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report = await self._create_test_report(scenario_id, results)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ –±—ç–∫–µ–Ω–¥
            if self.api_client:
                await self.api_client.send_test_report(report)
            
            logger.info(f"–°—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} –∑–∞–≤–µ—Ä—à–µ–Ω. –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {report.success_rate:.1f}%")
            
            return report
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario_id}: {e}")
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ
            error_result = TestResult(
                test_id=f"{scenario_id}_error",
                scenario_id=scenario_id,
                status=TestStatus.FAILED,
                start_time=datetime.now(),
                end_time=datetime.now(),
                success=False,
                error_message=str(e)
            )
            return await self._create_test_report(scenario_id, [error_result])
    
    async def analyze_page(self, url: str) -> PageAnalysis:
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            logger.info(f"–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {url}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if not await self.browser_service.navigate_to(url):
                raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            title = await self.browser_service.get_page_title()
            current_url = await self.browser_service.get_current_url()
            
            # –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            elements = []
            common_selectors = [
                "button", "input", "a", "form", "img", "h1", "h2", "h3", 
                ".btn", ".form-control", ".nav-link", ".card"
            ]
            
            for selector in common_selectors:
                found_elements = await self.browser_service.find_elements(selector)
                for i, element in enumerate(found_elements):
                    try:
                        element_info = await self.browser_service.get_element_info(f"{selector}:nth-child({i+1})")
                        if element_info:
                            elements.append(element_info)
                    except:
                        continue
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
            screenshot_path = await self.browser_service.take_screenshot(
                f"analysis_{url.replace('://', '_').replace('/', '_')}.png"
            )
            
            # –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            accessibility_issues = await self._analyze_accessibility()
            
            # –ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏
            responsiveness_issues = await self._analyze_responsiveness()
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            performance_metrics = await self._get_performance_metrics()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            analysis = PageAnalysis(
                url=current_url,
                title=title,
                elements=elements,
                accessibility_issues=accessibility_issues,
                responsiveness_issues=responsiveness_issues,
                performance_metrics=performance_metrics,
                screenshot_path=screenshot_path
            )
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤ –±—ç–∫–µ–Ω–¥
            if self.api_client:
                await self.api_client.send_page_analysis(analysis)
            
            logger.info(f"–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(elements)}")
            
            return analysis
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {url}: {e}")
            raise
    
    async def get_llm_instruction(self, current_context: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç LLM-—Ä–æ—É—Ç–µ—Ä–∞"""
        try:
            if not self.api_client:
                return {"error": "API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ LLM-—Ä–æ—É—Ç–µ—Ä
            context_data = {
                "session_id": self.session_id,
                "user_profile": {
                    "name": self.current_user_profile.name,
                    "behavior": self.current_user_profile.behavior,
                    "speed": self.current_user_profile.speed
                } if self.current_user_profile else None,
                "current_context": current_context,
                "action_history": self.action_history[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–µ–π—Å—Ç–≤–∏–π
            }
            
            instruction = await self.api_client.get_llm_instruction(
                session_id=self.session_id,
                current_context=context_data
            )
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ—Ç LLM: {instruction.get('action', 'unknown')}")
            
            return instruction
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç LLM: {e}")
            return {"error": str(e)}
    
    async def execute_llm_instruction(self, instruction: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç LLM"""
        try:
            action = instruction.get("action")
            target = instruction.get("target")
            
            if not action:
                return {"error": "–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"}
            
            logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: {action} -> {target}")
            
            result = {"success": False, "action": action, "target": target}
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
            if action == "click":
                result["success"] = await self.browser_service.click_element(target)
                
            elif action == "type":
                if ":" in target:
                    selector, text = target.split(":", 1)
                    result["success"] = await self.browser_service.type_text(selector, text)
                else:
                    result["error"] = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞"
                    
            elif action == "scroll":
                if target in ["up", "down", "top", "bottom"]:
                    script = f"window.scrollTo(0, {'0' if target in ['top', 'up'] else 'document.body.scrollHeight'})"
                    await self.browser_service.execute_script(script)
                    result["success"] = True
                else:
                    result["success"] = await self.browser_service.scroll_to_element(target)
                    
            elif action == "wait":
                try:
                    wait_time = float(target)
                    await asyncio.sleep(wait_time)
                    result["success"] = True
                except ValueError:
                    result["error"] = "–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"
                    
            elif action == "navigate":
                result["success"] = await self.browser_service.navigate_to(target)
                
            elif action == "analyze":
                analysis = await self.analyze_page(target)
                result["success"] = True
                result["analysis"] = analysis
                
            elif action == "stop":
                await self.stop_session()
                result["success"] = True
                
            else:
                result["error"] = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.action_history.append({
                "action": action,
                "target": target,
                "success": result["success"],
                "timestamp": datetime.now().isoformat(),
                "error": result.get("error")
            })
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ LLM-—Ä–æ—É—Ç–µ—Ä
            if self.api_client:
                await self.api_client.send_action_result(
                    session_id=self.session_id,
                    action=action,
                    result=result
                )
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {e}")
            return {"error": str(e), "action": instruction.get("action")}
    
    async def run_interactive_session(self, start_url: str, max_actions: int = 50) -> TestReport:
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Å LLM"""
        try:
            logger.info(f"–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏. –ù–∞—á–∞–ª—å–Ω—ã–π URL: {start_url}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if not await self.browser_service.navigate_to(start_url):
                raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ {start_url}")
            
            actions_performed = 0
            results = []
            
            while self.is_running and actions_performed < max_actions:
                try:
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    current_url = await self.browser_service.get_current_url()
                    page_title = await self.browser_service.get_page_title()
                    
                    current_context = {
                        "url": current_url,
                        "title": page_title,
                        "session_id": self.session_id,
                        "actions_performed": actions_performed
                    }
                    
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç LLM
                    instruction = await self.get_llm_instruction(current_context)
                    
                    if "error" in instruction:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {instruction['error']}")
                        break
                    
                    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                    result = await self.execute_llm_instruction(instruction)
                    
                    if not result.get("success"):
                        logger.warning(f"–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {result.get('error')}")
                    
                    actions_performed += 1
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                    await asyncio.sleep(1)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏: {e}")
                    break
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report = await self._create_interactive_report(actions_performed)
            
            logger.info(f"–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π: {actions_performed}")
            
            return report
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏: {e}")
            raise
    
    async def _create_test_report(self, scenario_id: str, results: List[TestResult]) -> TestReport:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        total_tests = len(results)
        successful_tests = len([r for r in results if r.success])
        failed_tests = len([r for r in results if not r.success])
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
        issues = []
        for result in results:
            if not result.success and result.error_message:
                issue = Issue(
                    issue_id=f"issue_{scenario_id}_{result.step_id or 'unknown'}",
                    type="functionality",
                    severity=IssueSeverity.HIGH if "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è" in result.error_message.lower() else IssueSeverity.MEDIUM,
                    description=result.error_message,
                    location=result.data.get("url", "unknown"),
                    screenshot_path=result.screenshot_path
                )
                issues.append(issue)
        
        report = TestReport(
            report_id=f"report_{self.session_id}_{scenario_id}",
            session_id=self.session_id,
            start_time=datetime.now(),
            end_time=datetime.now(),
            total_tests=total_tests,
            successful_tests=successful_tests,
            failed_tests=failed_tests,
            skipped_tests=0,
            issues=issues,
            user_profile=self.current_user_profile,
            test_environment={
                "browser": "Chrome",
                "headless": settings.browser_headless,
                "viewport": f"{settings.browser_viewport_width}x{settings.browser_viewport_height}"
            }
        )
        
        return report
    
    async def _create_interactive_report(self, actions_performed: int) -> TestReport:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ–± –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        report = TestReport(
            report_id=f"interactive_report_{self.session_id}",
            session_id=self.session_id,
            start_time=datetime.now(),
            end_time=datetime.now(),
            total_tests=actions_performed,
            successful_tests=len([a for a in self.action_history if a.get("success")]),
            failed_tests=len([a for a in self.action_history if not a.get("success")]),
            skipped_tests=0,
            issues=self.issues_found,
            user_profile=self.current_user_profile,
            test_environment={
                "browser": "Chrome",
                "headless": settings.browser_headless,
                "mode": "interactive"
            },
            notes=f"–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —Å {actions_performed} –¥–µ–π—Å—Ç–≤–∏—è–º–∏"
        )
        
        return report
    
    async def _analyze_accessibility(self) -> List[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        issues = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ alt-–∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            images = await self.browser_service.find_elements("img")
            for img in images:
                alt = img.get_attribute("alt")
                if not alt:
                    issues.append({
                        "type": "accessibility",
                        "severity": "medium",
                        "description": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ alt-–∞—Ç—Ä–∏–±—É—Ç–∞",
                        "element": "img"
                    })
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ ARIA-–∞—Ç—Ä–∏–±—É—Ç–æ–≤
            elements_without_aria = await self.browser_service.find_elements("[role]")
            for elem in elements_without_aria:
                aria_label = elem.get_attribute("aria-label")
                if not aria_label:
                    issues.append({
                        "type": "accessibility",
                        "severity": "low",
                        "description": "–≠–ª–µ–º–µ–Ω—Ç —Å role –±–µ–∑ aria-label",
                        "element": elem.tag_name
                    })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {e}")
        
        return issues
    
    async def _analyze_responsiveness(self) -> List[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        issues = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ viewport
            viewport_meta = await self.browser_service.find_element("meta[name='viewport']")
            if not viewport_meta:
                issues.append({
                    "type": "responsiveness",
                    "severity": "high",
                    "description": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç meta viewport",
                    "element": "meta"
                })
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å–æ–≤ (–±–∞–∑–æ–≤–∞—è)
            css_files = await self.browser_service.find_elements("link[rel='stylesheet']")
            if len(css_files) == 0:
                issues.append({
                    "type": "responsiveness",
                    "severity": "medium",
                    "description": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç CSS —Ñ–∞–π–ª—ã",
                    "element": "link"
                })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏: {e}")
        
        return issues
    
    async def _get_performance_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        metrics = {}
        
        try:
            # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —á–µ—Ä–µ–∑ JavaScript
            performance_script = """
            () => {
                const perfData = performance.getEntriesByType('navigation')[0];
                return {
                    loadTime: perfData.loadEventEnd - perfData.loadEventStart,
                    domContentLoaded: perfData.domContentLoadedEventEnd - perfData.domContentLoadedEventStart,
                    firstPaint: performance.getEntriesByName('first-paint')[0]?.startTime || 0,
                    firstContentfulPaint: performance.getEntriesByName('first-contentful-paint')[0]?.startTime || 0
                };
            }
            """
            
            perf_data = await self.browser_service.execute_script(performance_script)
            if perf_data:
                metrics.update(perf_data)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        
        return metrics
    
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã UX-–±–æ—Ç–∞"""
        return {
            "session_id": self.session_id,
            "is_running": self.is_running,
            "user_profile": self.current_user_profile.name if self.current_user_profile else None,
            "actions_performed": len(self.action_history),
            "issues_found": len(self.issues_found),
            "scenarios_available": len(self.scenario_service.scenarios) if self.scenario_service else 0
        } 