#!/bin/bash

# üöÄ –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ reLink
# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ä–µ—Å—Ç–∞—Ä—Ç—É—é—â–∏–º–∏—Å—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_debug() {
    echo -e "${CYAN}üîç $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Docker –∑–∞–ø—É—â–µ–Ω
check_docker() {
    if ! docker info >/dev/null 2>&1; then
        log_error "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        exit 1
    fi
    log_success "Docker –¥–æ—Å—Ç—É–ø–µ–Ω"
}

# –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ reLink
get_container_status() {
    log_info "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ reLink..."
    
    echo ""
    echo "üìä –°–¢–ê–¢–£–° –ö–û–ù–¢–ï–ô–ù–ï–†–û–í"
    echo "===================="
    
    docker ps -a --filter "name=relink" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}\t{{.Size}}" | head -1
    docker ps -a --filter "name=relink" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}\t{{.Size}}" | tail -n +2 | sort
    
    echo ""
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
check_problematic_containers() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    local problematic_containers=$(docker ps -a --filter "name=relink" --filter "status=exited" --format "{{.Names}}")
    
    if [ -n "$problematic_containers" ]; then
        log_warning "–ù–∞–π–¥–µ–Ω—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
        echo "$problematic_containers" | while read container; do
            echo "  - $container"
        done
        echo ""
    else
        log_success "–í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç"
    fi
}

# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
analyze_container_logs() {
    local container_name=$1
    local lines=${2:-50}
    
    log_info "–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: $container_name (–ø–æ—Å–ª–µ–¥–Ω–∏–µ $lines —Å—Ç—Ä–æ–∫)"
    
    if docker ps -q -f name="$container_name" | grep -q .; then
        echo ""
        echo "üìã –õ–û–ì–ò $container_name"
        echo "=================="
        docker logs --tail $lines "$container_name" 2>&1 | head -20
        echo ""
    else
        log_warning "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $container_name –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    fi
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å—ã —Å–∏—Å—Ç–µ–º—ã
check_system_resources() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤..."
    
    echo ""
    echo "üíª –°–ò–°–¢–ï–ú–ù–´–ï –†–ï–°–£–†–°–´"
    echo "==================="
    
    # CPU
    local cpu_usage=$(top -l 1 | grep "CPU usage" | awk '{print $3}' | sed 's/%//')
    echo "CPU: ${cpu_usage}%"
    
    # –ü–∞–º—è—Ç—å
    local memory_info=$(vm_stat | grep "Pages free" | awk '{print $3}' | sed 's/\.//')
    local total_memory=$(sysctl hw.memsize | awk '{print $2}')
    local free_memory=$((memory_info * 4096))
    local used_memory=$((total_memory - free_memory))
    local memory_percent=$((used_memory * 100 / total_memory))
    echo "–ü–∞–º—è—Ç—å: ${memory_percent}% (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è $((used_memory / 1024 / 1024))MB –∏–∑ $((total_memory / 1024 / 1024))MB)"
    
    # –î–∏—Å–∫
    local disk_usage=$(df -h / | tail -1 | awk '{print $5}' | sed 's/%//')
    echo "–î–∏—Å–∫: ${disk_usage}%"
    
    echo ""
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
check_network_connections() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π..."
    
    echo ""
    echo "üåê –°–ï–¢–ï–í–´–ï –°–û–ï–î–ò–ù–ï–ù–ò–Ø"
    echo "==================="
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã reLink
    local ports=("3000" "8001" "8002" "8003" "8004" "8005" "8006" "9090" "11434" "6379")
    
    for port in "${ports[@]}"; do
        if lsof -i :$port >/dev/null 2>&1; then
            local process=$(lsof -i :$port | head -2 | tail -1 | awk '{print $1}')
            log_success "–ü–æ—Ä—Ç $port: –∑–∞–Ω—è—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º $process"
        else
            log_warning "–ü–æ—Ä—Ç $port: —Å–≤–æ–±–æ–¥–µ–Ω"
        fi
    done
    
    echo ""
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º health checks
check_health_endpoints() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoints..."
    
    echo ""
    echo "üè• HEALTH CHECKS"
    echo "==============="
    
    local endpoints=(
        "http://localhost:8001/health:Router"
        "http://localhost:8002/health:Benchmark"
        "http://localhost:8003/health:Relink"
        "http://localhost:8004/health:Backend"
        "http://localhost:8005/health:LLM Tuning"
        "http://localhost:9090/-/healthy:Monitoring"
    )
    
    for endpoint in "${endpoints[@]}"; do
        local url=$(echo $endpoint | cut -d: -f1)
        local name=$(echo $endpoint | cut -d: -f2)
        
        if curl -s -f "$url" >/dev/null 2>&1; then
            log_success "$name: OK"
        else
            log_error "$name: FAILED"
        fi
    done
    
    echo ""
}

# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Docker Compose
analyze_docker_compose() {
    log_info "–ê–Ω–∞–ª–∏–∑ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    echo ""
    echo "üê≥ DOCKER COMPOSE –ê–ù–ê–õ–ò–ó"
    echo "======================="
    
    if [ -f "docker-compose.yml" ]; then
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤
        local service_count=$(grep -c "^  [a-zA-Z]" docker-compose.yml || echo "0")
        log_info "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤: $service_count"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º health checks
        local health_check_count=$(grep -c "healthcheck:" docker-compose.yml || echo "0")
        log_info "Health checks –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: $health_check_count"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º restart policies
        local restart_policies=$(grep -A1 "restart:" docker-compose.yml | grep -v "restart:" | grep -v "^--$" | wc -l)
        log_info "Restart policies –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: $restart_policies"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        local resource_limits=$(grep -c "resources:" docker-compose.yml || echo "0")
        log_info "–†–µ—Å—É—Ä—Å–Ω—ã–µ –ª–∏–º–∏—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: $resource_limits"
        
    else
        log_error "–§–∞–π–ª docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    echo ""
}

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
provide_recommendations() {
    log_info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π..."
    
    echo ""
    echo "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò"
    echo "=============="
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    local exited_containers=$(docker ps -a --filter "name=relink" --filter "status=exited" --format "{{.Names}}")
    if [ -n "$exited_containers" ]; then
        echo "1. üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
        echo "   docker-compose up -d"
        echo ""
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
    local cpu_usage=$(top -l 1 | grep "CPU usage" | awk '{print $3}' | sed 's/%//')
    if [ "$cpu_usage" -gt 80 ]; then
        echo "2. ‚ö° –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU ($cpu_usage%). –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ:"
        echo "   - –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        echo "   - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∫–æ–¥–∞"
        echo "   - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"
        echo ""
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å
    local memory_info=$(vm_stat | grep "Pages free" | awk '{print $3}' | sed 's/\.//')
    local total_memory=$(sysctl hw.memsize | awk '{print $2}')
    local free_memory=$((memory_info * 4096))
    local used_memory=$((total_memory - free_memory))
    local memory_percent=$((used_memory * 100 / total_memory))
    
    if [ "$memory_percent" -gt 85 ]; then
        echo "3. üß† –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ ($memory_percent%). –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
        echo "   - –£–≤–µ–ª–∏—á—å—Ç–µ –ª–∏–º–∏—Ç—ã –ø–∞–º—è—Ç–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        echo "   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏"
        echo "   - –î–æ–±–∞–≤—å—Ç–µ swap —Ñ–∞–π–ª"
        echo ""
    fi
    
    echo "4. üìä –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:"
    echo "   - –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:9090 (Prometheus)"
    echo "   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs -f [service_name]"
    echo "   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: docker stats"
    echo ""
    
    echo "5. üîß –î–ª—è –æ—Ç–ª–∞–¥–∫–∏:"
    echo "   - –í–∫–ª—é—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ .env"
    echo "   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ health checks: docker-compose ps"
    echo "   - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ª–æ–≥–∏: docker-compose logs --tail=100"
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üöÄ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ö–û–ù–¢–ï–ô–ù–ï–†–û–í RELINK"
    echo "================================"
    echo ""
    
    check_docker
    get_container_status
    check_problematic_containers
    check_system_resources
    check_network_connections
    check_health_endpoints
    analyze_docker_compose
    provide_recommendations
    
    log_success "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-}" in
    "logs")
        if [ -n "$2" ]; then
            analyze_container_logs "$2" "${3:-50}"
        else
            log_error "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: $0 logs <container_name> [lines]"
        fi
        ;;
    "health")
        check_health_endpoints
        ;;
    "resources")
        check_system_resources
        ;;
    "network")
        check_network_connections
        ;;
    "recommendations")
        provide_recommendations
        ;;
    "help"|"-h"|"--help")
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]"
        echo ""
        echo "–ö–æ–º–∞–Ω–¥—ã:"
        echo "  logs <container> [lines]  - –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
        echo "  health                    - –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoints"
        echo "  resources                 - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"
        echo "  network                   - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"
        echo "  recommendations           - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
        echo "  help                      - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        echo ""
        echo "–ü—Ä–∏–º–µ—Ä—ã:"
        echo "  $0                        - –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
        echo "  $0 logs relink-backend    - –õ–æ–≥–∏ –±—ç–∫–µ–Ω–¥–∞"
        echo "  $0 logs relink-frontend 50 - –õ–æ–≥–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (50 —Å—Ç—Ä–æ–∫)"
        ;;
    *)
        main
        ;;
esac 