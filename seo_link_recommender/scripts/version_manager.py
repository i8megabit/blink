#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–µ—Ä—Å–∏–π –¥–ª—è SEO Link Recommender
–ü–∞—Ä—Å–∏—Ç –≤–µ—Ä—Å–∏—é –∏–∑ README.md –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç Git —Ç–µ–≥–∞–º–∏
"""

import re
import subprocess
import sys
from pathlib import Path
from datetime import datetime
from typing import Optional, Tuple


class VersionManager:
    def __init__(self, project_root: str = "."):
        self.project_root = Path(project_root)
        self.readme_path = self.project_root / "README.md"
        
    def extract_version_from_readme(self) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ README.md"""
        try:
            with open(self.readme_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # –ò—â–µ–º –≤–µ—Ä—Å–∏—é –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
            header_match = re.search(r'# üöÄ SEO Link Recommender v(\d+\.\d+\.\d+)', content)
            if header_match:
                return header_match.group(1)
                
            # –ò—â–µ–º –≤–µ—Ä—Å–∏—é –≤ –ø–æ–ª–µ –≤–µ—Ä—Å–∏–∏
            version_match = re.search(r'\*\*–í–µ—Ä—Å–∏—è:\*\*\s*(\d+\.\d+\.\d+)', content)
            if version_match:
                return version_match.group(1)
                
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è README: {e}")
            return None
    
    def update_version_in_readme(self, new_version: str) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é –≤ README.md"""
        try:
            with open(self.readme_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            content = re.sub(
                r'# üöÄ SEO Link Recommender v\d+\.\d+\.\d+',
                f'# üöÄ SEO Link Recommender v{new_version}',
                content
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤–µ—Ä—Å–∏–∏
            content = re.sub(
                r'\*\*–í–µ—Ä—Å–∏—è:\*\*\s*\d+\.\d+\.\d+',
                f'**–í–µ—Ä—Å–∏—è:** {new_version}',
                content
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É —Ä–µ–ª–∏–∑–∞
            current_date = datetime.now().strftime('%Y-%m-%d')
            content = re.sub(
                r'\*\*–î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞:\*\*\s*\d{4}-\d{2}-\d{2}',
                f'**–î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞:** {current_date}',
                content
            )
            
            with open(self.readme_path, 'w', encoding='utf-8') as f:
                f.write(content)
                
            print(f"‚úÖ –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ README: {new_version}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è README: {e}")
            return False
    
    def create_version_file(self, version: str) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —Å –≤–µ—Ä—Å–∏–µ–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
        try:
            version_file = self.project_root / "VERSION"
            with open(version_file, 'w', encoding='utf-8') as f:
                f.write(version)
            print(f"‚úÖ –§–∞–π–ª VERSION —Å–æ–∑–¥–∞–Ω: {version}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VERSION: {e}")
            return False
    
    def create_git_tag(self, version: str, message: Optional[str] = None) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç Git —Ç–µ–≥ –¥–ª—è –≤–µ—Ä—Å–∏–∏"""
        try:
            if not message:
                message = f"Release v{version}"
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥
            subprocess.run([
                'git', 'tag', '-a', f'v{version}', '-m', message
            ], cwd=self.project_root, check=True)
            
            print(f"‚úÖ Git —Ç–µ–≥ —Å–æ–∑–¥–∞–Ω: v{version}")
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Git —Ç–µ–≥–∞: {e}")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Git: {e}")
            return False
    
    def push_git_tag(self, version: str) -> bool:
        """–ü—É—à–∏—Ç Git —Ç–µ–≥ –≤ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"""
        try:
            subprocess.run([
                'git', 'push', 'origin', f'v{version}'
            ], cwd=self.project_root, check=True)
            
            print(f"‚úÖ Git —Ç–µ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: v{version}")
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Git —Ç–µ–≥–∞: {e}")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Git push: {e}")
            return False
    
    def get_version_info(self) -> Tuple[str, str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ –∏ –¥–∞—Ç–µ"""
        version = self.extract_version_from_readme()
        if not version:
            return "unknown", "unknown"
        
        try:
            with open(self.readme_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            date_match = re.search(r'\*\*–î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞:\*\*\s*(\d{4}-\d{2}-\d{2})', content)
            release_date = date_match.group(1) if date_match else "unknown"
            
            return version, release_date
        except Exception:
            return version, "unknown"
    
    def update_frontend_version(self, version: str) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é –≤ frontend package.json"""
        try:
            package_json_path = self.project_root / "frontend" / "package.json"
            if not package_json_path.exists():
                print("‚ö†Ô∏è package.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            with open(package_json_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ package.json
            content = re.sub(
                r'"version":\s*"[^"]*"',
                f'"version": "{version}"',
                content
            )
            
            with open(package_json_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"‚úÖ –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ package.json: {version}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è package.json: {e}")
            return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    if len(sys.argv) < 2:
        print("""
üöÄ SEO Link Recommender - Version Manager

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  python version_manager.py <–∫–æ–º–∞–Ω–¥–∞> [–∞—Ä–≥—É–º–µ–Ω—Ç—ã]

–ö–æ–º–∞–Ω–¥—ã:
  get                    - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
  set <version>         - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
  tag [message]         - –°–æ–∑–¥–∞—Ç—å Git —Ç–µ–≥
  push                  - –û—Ç–ø—Ä–∞–≤–∏—Ç—å Git —Ç–µ–≥
  release <version>     - –ü–æ–ª–Ω—ã–π —Ä–µ–ª–∏–∑ (set + tag + push)
  
–ü—Ä–∏–º–µ—Ä—ã:
  python version_manager.py get
  python version_manager.py set 3.0.18
  python version_manager.py tag "Bug fixes and improvements"
  python version_manager.py release 3.0.18
        """)
        return
    
    manager = VersionManager()
    command = sys.argv[1]
    
    if command == "get":
        version, date = manager.get_version_info()
        print(f"üì¶ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {version}")
        print(f"üìÖ –î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞: {date}")
        
    elif command == "set":
        if len(sys.argv) < 3:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä—Å–∏—é: python version_manager.py set <version>")
            return
        
        new_version = sys.argv[2]
        if not re.match(r'^\d+\.\d+\.\d+$', new_version):
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: X.Y.Z")
            return
        
        success = (
            manager.update_version_in_readme(new_version) and
            manager.create_version_file(new_version) and
            manager.update_frontend_version(new_version)
        )
        
        if success:
            print(f"üéâ –í–µ—Ä—Å–∏—è {new_version} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ—Ä—Å–∏–∏")
            
    elif command == "tag":
        version = manager.extract_version_from_readme()
        if not version:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é")
            return
        
        message = sys.argv[2] if len(sys.argv) > 2 else f"Release v{version}"
        success = manager.create_git_tag(version, message)
        
        if success:
            print(f"üè∑Ô∏è –¢–µ–≥ v{version} —Å–æ–∑–¥–∞–Ω —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º: {message}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–∞")
            
    elif command == "push":
        version = manager.extract_version_from_readme()
        if not version:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é")
            return
        
        success = manager.push_git_tag(version)
        if success:
            print(f"üöÄ –¢–µ–≥ v{version} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–≥–∞")
            
    elif command == "release":
        if len(sys.argv) < 3:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä—Å–∏—é: python version_manager.py release <version>")
            return
        
        new_version = sys.argv[2]
        if not re.match(r'^\d+\.\d+\.\d+$', new_version):
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: X.Y.Z")
            return
        
        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–ª–∏–∑ –≤–µ—Ä—Å–∏–∏ {new_version}...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é
        if not manager.update_version_in_readme(new_version):
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è README")
            return
            
        if not manager.create_version_file(new_version):
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VERSION")
            return
            
        if not manager.update_frontend_version(new_version):
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è package.json")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥
        if not manager.create_git_tag(new_version, f"Release v{new_version}"):
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–∞")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–≥
        if not manager.push_git_tag(new_version):
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–≥–∞")
            return
        
        print(f"üéâ –†–µ–ª–∏–∑ –≤–µ—Ä—Å–∏–∏ {new_version} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: get, set, tag, push, release")


if __name__ == "__main__":
    main() 