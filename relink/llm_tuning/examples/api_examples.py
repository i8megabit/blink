#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ LLM Tuning Microservice

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤:
- A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
- –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
- –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
"""

import asyncio
import aiohttp
import json
from typing import Dict, Any, List
from datetime import datetime, timedelta


class LLMTuningAPIExamples:
    """–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API LLM Tuning Microservice"""
    
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.session = None
    
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def _make_request(self, method: str, endpoint: str, data: Dict = None) -> Dict:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞"""
        url = f"{self.base_url}{endpoint}"
        
        if method.upper() == "GET":
            async with self.session.get(url) as response:
                return await response.json()
        elif method.upper() == "POST":
            async with self.session.post(url, json=data) as response:
                return await response.json()
        elif method.upper() == "PUT":
            async with self.session.put(url, json=data) as response:
                return await response.json()
        elif method.upper() == "DELETE":
            async with self.session.delete(url) as response:
                return await response.json()
    
    # A/B –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    async def create_ab_test_example(self):
        """–ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è A/B —Ç–µ—Å—Ç–∞"""
        print("üß™ –°–æ–∑–¥–∞–Ω–∏–µ A/B —Ç–µ—Å—Ç–∞...")
        
        test_data = {
            "name": "SEO Content Quality Test",
            "description": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ SEO –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏",
            "model_id": 1,
            "variant_a": "llama2:7b",
            "variant_b": "llama2:13b",
            "traffic_split": 0.5,
            "test_duration_days": 7,
            "success_metrics": ["response_time", "quality_score", "user_satisfaction"],
            "minimum_sample_size": 1000
        }
        
        result = await self._make_request("POST", "/api/v1/ab-tests", test_data)
        print(f"‚úÖ A/B —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω: {result}")
        return result
    
    async def list_ab_tests_example(self):
        """–ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ A/B —Ç–µ—Å—Ç–æ–≤"""
        print("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ A/B —Ç–µ—Å—Ç–æ–≤...")
        
        result = await self._make_request("GET", "/api/v1/ab-tests")
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ A/B —Ç–µ—Å—Ç–æ–≤: {len(result)}")
        for test in result:
            print(f"  - {test['name']} (—Å—Ç–∞—Ç—É—Å: {test['status']})")
        return result
    
    async def select_model_for_ab_test_example(self, test_id: int):
        """–ü—Ä–∏–º–µ—Ä –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è A/B —Ç–µ—Å—Ç–∞"""
        print(f"üéØ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è A/B —Ç–µ—Å—Ç–∞ {test_id}...")
        
        data = {
            "request_type": "seo_content_generation",
            "user_id": "user_123"
        }
        
        result = await self._make_request("POST", f"/api/v1/ab-tests/{test_id}/select-model", data)
        print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {result['model_name']} (–≤–∞—Ä–∏–∞–Ω—Ç: {result['variant']})")
        return result
    
    async def record_ab_test_result_example(self, test_id: int):
        """–ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ A/B —Ç–µ—Å—Ç–∞"""
        print(f"üìä –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ A/B —Ç–µ—Å—Ç–∞ {test_id}...")
        
        metrics = {
            "response_time": 2.5,
            "quality_score": 8.5,
            "user_satisfaction": 4.2,
            "tokens_generated": 150,
            "tokens_processed": 50,
            "success": True
        }
        
        data = {
            "model_variant": "llama2:13b",
            "metrics": metrics
        }
        
        result = await self._make_request("POST", f"/api/v1/ab-tests/{test_id}/record-result", data)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã: {result}")
        return result
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    async def optimize_model_example(self):
        """–ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        print("‚ö° –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
        
        optimization_data = {
            "model_id": 1,
            "optimization_type": "performance",
            "target_metrics": {
                "response_time": 1.5,
                "quality_score": 8.0,
                "error_rate": 0.01
            },
            "optimization_strategies": [
                "quantization",
                "pruning",
                "hyperparameter_tuning"
            ]
        }
        
        result = await self._make_request("POST", "/api/v1/optimization", optimization_data)
        print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞: {result}")
        return result
    
    async def get_optimization_status_example(self, optimization_id: int):
        """–ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        print(f"üìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ {optimization_id}...")
        
        result = await self._make_request("GET", f"/api/v1/optimization/{optimization_id}")
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {result['status']}")
        print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {result['progress']}%")
        print(f"   –£–ª—É—á—à–µ–Ω–∏—è: {result['improvements']}")
        return result
    
    # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    async def assess_quality_example(self):
        """–ü—Ä–∏–º–µ—Ä –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞"""
        print("üéØ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞...")
        
        assessment_data = {
            "model_id": 1,
            "request_text": "–°–æ–∑–¥–∞–π SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç—å—é –æ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏",
            "response_text": "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ - —ç—Ç–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞...",
            "context_documents": [
                "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö...",
                "–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã ML: supervised, unsupervised, reinforcement learning..."
            ],
            "assessment_criteria": [
                "relevance",
                "accuracy",
                "completeness",
                "seo_optimization"
            ]
        }
        
        result = await self._make_request("POST", "/api/v1/quality/assess", assessment_data)
        print(f"‚úÖ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {result['overall_score']}/10")
        print(f"   –î–µ—Ç–∞–ª–∏: {result['detailed_scores']}")
        return result
    
    async def get_quality_stats_example(self, model_id: int):
        """–ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏ {model_id}...")
        
        result = await self._make_request("GET", f"/api/v1/quality/stats/{model_id}?days=30")
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞:")
        print(f"   –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {result['avg_score']}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: {result['total_assessments']}")
        print(f"   –¢—Ä–µ–Ω–¥: {result['trend']}")
        return result
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
    async def get_system_health_example(self):
        """–ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        print("üè• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...")
        
        result = await self._make_request("GET", "/api/v1/health/system")
        print(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è:")
        print(f"   CPU: {result['cpu_usage']}%")
        print(f"   –ü–∞–º—è—Ç—å: {result['memory_usage']}%")
        print(f"   –î–∏—Å–∫: {result['disk_usage']}%")
        print(f"   Ollama: {result['ollama_status']}")
        print(f"   RAG: {result['rag_status']}")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {result['response_time_avg']}—Å")
        print(f"   –û—à–∏–±–∫–∏: {result['error_rate']}%")
        return result
    
    async def get_system_health_history_example(self):
        """–ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        print("üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...")
        
        result = await self._make_request("GET", "/api/v1/health/system/history?hours=24")
        print(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–¥–æ—Ä–æ–≤—å—è (–∑–∞ 24 —á–∞—Å–∞):")
        print(f"   –ó–∞–ø–∏—Å–µ–π: {len(result['records'])}")
        
        if result['records']:
            latest = result['records'][0]
            print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: {latest['timestamp']}")
            print(f"   CPU: {latest['cpu_usage']}%")
            print(f"   –ü–∞–º—è—Ç—å: {latest['memory_usage']}%")
        
        return result
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    async def get_model_stats_example(self, model_id: int):
        """–ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–∏"""
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–∏ {model_id}...")
        
        result = await self._make_request("GET", f"/api/v1/stats/models/{model_id}?days=30")
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏ {result['model_name']}:")
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {result['total_requests']}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {result['successful_requests']}")
        print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {result['failed_requests']}")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {result['avg_response_time']}—Å")
        print(f"   –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞: {result['avg_quality_score']}")
        print(f"   –¢–æ–∫–µ–Ω–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {result['total_tokens_generated']}")
        print(f"   –¢–æ–∫–µ–Ω–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result['total_tokens_processed']}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: {result['error_rate']}%")
        return result
    
    async def get_system_stats_example(self):
        """–ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        print("üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...")
        
        result = await self._make_request("GET", "/api/v1/stats/system")
        print(f"‚úÖ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π: {result['total_models']}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {result['active_models']}")
        print(f"   –í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {result['total_routes']}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤: {result['active_routes']}")
        print(f"   –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ RAG: {result['total_documents']}")
        print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {result['total_requests_today']}")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {result['avg_response_time']}—Å")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: {result['error_rate']}%")
        return result
    
    # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–∏–º–µ—Ä
    async def run_comprehensive_example(self):
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö API"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞...")
        
        try:
            # 1. –°–æ–∑–¥–∞–Ω–∏–µ A/B —Ç–µ—Å—Ç–∞
            ab_test = await self.create_ab_test_example()
            test_id = ab_test['id']
            
            # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
            await self.list_ab_tests_example()
            
            # 3. –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
            await self.select_model_for_ab_test_example(test_id)
            
            # 4. –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            await self.record_ab_test_result_example(test_id)
            
            # 5. –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            optimization = await self.optimize_model_example()
            optimization_id = optimization['id']
            
            # 6. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            await self.get_optimization_status_example(optimization_id)
            
            # 7. –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            await self.assess_quality_example()
            
            # 8. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
            await self.get_quality_stats_example(1)
            
            # 9. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è
            await self.get_system_health_example()
            await self.get_system_health_history_example()
            
            # 10. –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            await self.get_model_stats_example(1)
            await self.get_system_stats_example()
            
            print("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤"""
    print("üéØ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API LLM Tuning Microservice")
    print("=" * 60)
    
    async with LLMTuningAPIExamples() as api:
        # –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
        await api.run_comprehensive_example()


if __name__ == "__main__":
    asyncio.run(main()) 