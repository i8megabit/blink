"""
Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
"""

from datetime import datetime
from typing import List, Optional, Dict, Any
from pydantic import BaseModel, Field


class VersionInfo(BaseModel):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏"""
    version: str = Field(..., description="–ù–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏")
    build_date: Optional[str] = Field(None, description="–î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏")
    commit_hash: Optional[str] = Field(None, description="–•–µ—à –∫–æ–º–º–∏—Ç–∞")
    branch: Optional[str] = Field(None, description="–í–µ—Ç–∫–∞")
    environment: Optional[str] = Field(None, description="–û–∫—Ä—É–∂–µ–Ω–∏–µ")


class ChangelogEntry(BaseModel):
    """–ó–∞–ø–∏—Å—å –≤ changelog"""
    version: str = Field(..., description="–í–µ—Ä—Å–∏—è")
    date: Optional[str] = Field(None, description="–î–∞—Ç–∞")
    changes: List[str] = Field(default_factory=list, description="–°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    features: List[str] = Field(default_factory=list, description="–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    fixes: List[str] = Field(default_factory=list, description="–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    breaking: List[str] = Field(default_factory=list, description="–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")


class DocumentationContent(BaseModel):
    """–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    title: str = Field(..., description="–ó–∞–≥–æ–ª–æ–≤–æ–∫")
    content: str = Field(..., description="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ HTML")
    raw_content: str = Field(..., description="–°—ã—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ")
    last_modified: Optional[datetime] = Field(None, description="–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
    file_path: Optional[str] = Field(None, description="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É")


class ReadmeInfo(BaseModel):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ README"""
    title: str = Field(..., description="–ó–∞–≥–æ–ª–æ–≤–æ–∫")
    description: str = Field(..., description="–û–ø–∏—Å–∞–Ω–∏–µ")
    sections: List[Dict[str, Any]] = Field(default_factory=list, description="–°–µ–∫—Ü–∏–∏")
    content: str = Field(..., description="–ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ HTML")


class RoadmapInfo(BaseModel):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ roadmap"""
    title: str = Field(..., description="–ó–∞–≥–æ–ª–æ–≤–æ–∫")
    phases: List[Dict[str, Any]] = Field(default_factory=list, description="–§–∞–∑—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    features: List[Dict[str, Any]] = Field(default_factory=list, description="–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    timeline: Optional[str] = Field(None, description="–í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞")


class FAQEntry(BaseModel):
    """–ó–∞–ø–∏—Å—å FAQ"""
    question: str = Field(..., description="–í–æ–ø—Ä–æ—Å")
    answer: str = Field(..., description="–û—Ç–≤–µ—Ç")
    category: Optional[str] = Field(None, description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
    tags: List[str] = Field(default_factory=list, description="–¢–µ–≥–∏")


class AboutInfo(BaseModel):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ"""
    name: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
    description: str = Field(..., description="–û–ø–∏—Å–∞–Ω–∏–µ")
    version: str = Field(..., description="–í–µ—Ä—Å–∏—è")
    author: str = Field(..., description="–ê–≤—Ç–æ—Ä")
    license: str = Field(..., description="–õ–∏—Ü–µ–Ω–∑–∏—è")
    repository: Optional[str] = Field(None, description="–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
    features: List[str] = Field(default_factory=list, description="–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")


class HowItWorksInfo(BaseModel):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞"""
    title: str = Field(..., description="–ó–∞–≥–æ–ª–æ–≤–æ–∫")
    overview: str = Field(..., description="–û–±–∑–æ—Ä")
    steps: List[Dict[str, Any]] = Field(default_factory=list, description="–®–∞–≥–∏ —Ä–∞–±–æ—Ç—ã")
    architecture: Optional[str] = Field(None, description="–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞")
    technologies: List[str] = Field(default_factory=list, description="–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏")


class CacheStats(BaseModel):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞"""
    connected: bool = Field(..., description="–ü–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –∫ Redis")
    total_keys: int = Field(0, description="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π")
    memory_used: str = Field("N/A", description="–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø–∞–º—è—Ç—å")
    connected_clients: int = Field(0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
    uptime: int = Field(0, description="–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    error: Optional[str] = Field(None, description="–û—à–∏–±–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å")


class HealthResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –Ω–∞ health check"""
    status: str = Field(..., description="–°—Ç–∞—Ç—É—Å")
    timestamp: datetime = Field(..., description="–í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞")
    version: str = Field(..., description="–í–µ—Ä—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞")
    cache_status: str = Field(..., description="–°—Ç–∞—Ç—É—Å –∫—ç—à–∞")
    uptime: Optional[float] = Field(None, description="–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã")


class APIResponse(BaseModel):
    """–ë–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç API"""
    success: bool = Field(..., description="–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏")
    message: str = Field(..., description="–°–æ–æ–±—â–µ–Ω–∏–µ")
    data: Optional[Any] = Field(None, description="–î–∞–Ω–Ω—ã–µ")
    timestamp: datetime = Field(default_factory=datetime.utcnow, description="–í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞")


class ErrorResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π"""
    success: bool = Field(False, description="–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏")
    error: str = Field(..., description="–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏")
    error_code: Optional[str] = Field(None, description="–ö–æ–¥ –æ—à–∏–±–∫–∏")
    timestamp: datetime = Field(default_factory=datetime.utcnow, description="–í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞")


# üöÄ –ù–û–í–´–ï –ú–û–î–ï–õ–ò –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò –ú–ò–ö–†–û–°–ï–†–í–ò–°–û–í

class MicroserviceInfo(BaseModel):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–µ"""
    name: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞")
    display_name: str = Field(..., description="–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
    version: str = Field(..., description="–í–µ—Ä—Å–∏—è")
    description: str = Field(..., description="–û–ø–∏—Å–∞–Ω–∏–µ")
    category: str = Field(..., description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
    status: str = Field(..., description="–°—Ç–∞—Ç—É—Å")
    health_url: str = Field(..., description="URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è")
    docs_url: Optional[str] = Field(None, description="URL –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    api_url: Optional[str] = Field(None, description="URL API")
    repository_url: Optional[str] = Field(None, description="URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
    technologies: List[str] = Field(default_factory=list, description="–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏")
    features: List[str] = Field(default_factory=list, description="–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    created_at: datetime = Field(default_factory=datetime.utcnow, description="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    updated_at: datetime = Field(default_factory=datetime.utcnow, description="–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")


class ServiceEndpoint(BaseModel):
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞"""
    path: str = Field(..., description="–ü—É—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞")
    method: str = Field(..., description="HTTP –º–µ—Ç–æ–¥")
    description: str = Field(..., description="–û–ø–∏—Å–∞–Ω–∏–µ")
    parameters: List[Dict[str, Any]] = Field(default_factory=list, description="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
    request_body: Optional[Dict[str, Any]] = Field(None, description="–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞")
    response_schema: Optional[Dict[str, Any]] = Field(None, description="–°—Ö–µ–º–∞ –æ—Ç–≤–µ—Ç–∞")
    requires_auth: bool = Field(False, description="–¢—Ä–µ–±—É–µ—Ç –ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    rate_limit: Optional[int] = Field(None, description="–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
    deprecated: bool = Field(False, description="–£—Å—Ç–∞—Ä–µ–ª –ª–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç")


class ServiceDocumentation(BaseModel):
    """–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞"""
    service: MicroserviceInfo = Field(..., description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ")
    readme: Optional[str] = Field(None, description="README –≤ markdown")
    api_docs: List[ServiceEndpoint] = Field(default_factory=list, description="API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    architecture: Optional[str] = Field(None, description="–û–ø–∏—Å–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
    deployment: Optional[str] = Field(None, description="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é")
    configuration: Optional[Dict[str, Any]] = Field(None, description="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    examples: List[Dict[str, Any]] = Field(default_factory=list, description="–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    troubleshooting: Optional[str] = Field(None, description="–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º")
    changelog: List[ChangelogEntry] = Field(default_factory=list, description="–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    last_sync: datetime = Field(default_factory=datetime.utcnow, description="–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")


class ServiceDiscovery(BaseModel):
    """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤"""
    service_name: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞")
    base_url: str = Field(..., description="–ë–∞–∑–æ–≤—ã–π URL")
    health_endpoint: str = Field(..., description="–≠–Ω–¥–ø–æ–∏–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è")
    docs_endpoint: Optional[str] = Field(None, description="–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    openapi_endpoint: Optional[str] = Field(None, description="–≠–Ω–¥–ø–æ–∏–Ω—Ç OpenAPI")
    readme_path: Optional[str] = Field(None, description="–ü—É—Ç—å –∫ README")
    enabled: bool = Field(True, description="–í–∫–ª—é—á–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å")
    sync_interval: int = Field(300, description="–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    last_check: Optional[datetime] = Field(None, description="–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")


class DocumentationSync(BaseModel):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    service_name: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞")
    sync_type: str = Field(..., description="–¢–∏–ø —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
    status: str = Field(..., description="–°—Ç–∞—Ç—É—Å")
    started_at: datetime = Field(default_factory=datetime.utcnow, description="–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞")
    completed_at: Optional[datetime] = Field(None, description="–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    error_message: Optional[str] = Field(None, description="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
    documents_updated: int = Field(0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    documents_created: int = Field(0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")


class DocumentationSearch(BaseModel):
    """–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    query: str = Field(..., description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
    services: List[str] = Field(default_factory=list, description="–§–∏–ª—å—Ç—Ä –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º")
    categories: List[str] = Field(default_factory=list, description="–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    tags: List[str] = Field(default_factory=list, description="–§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥–∞–º")
    limit: int = Field(20, description="–õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    offset: int = Field(0, description="–°–º–µ—â–µ–Ω–∏–µ")


class DocumentationSearchResult(BaseModel):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    query: str = Field(..., description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
    results: List[Dict[str, Any]] = Field(default_factory=list, description="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    total: int = Field(0, description="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    search_time_ms: int = Field(0, description="–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö")
    suggestions: List[str] = Field(default_factory=list, description="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è") 