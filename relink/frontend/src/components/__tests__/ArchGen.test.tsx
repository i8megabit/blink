import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import { vi } from 'vitest';
import ArchGen from '../ArchGen';

// –ú–æ–∫–∞–µ–º —Ö—É–∫–∏
vi.mock('../../hooks/useApi', () => ({
  useApi: () => ({
    api: {
      post: vi.fn().mockResolvedValue({
        data: {
          diagram_id: 1,
          svg_content: '<svg>test</svg>',
          quality_score: 0.85,
          generation_time: 2.5,
          model_used: 'qwen2.5:7b',
          confidence_score: 0.9,
          validation_result: {}
        }
      })
    }
  })
}));

vi.mock('../../hooks/useNotifications', () => ({
  useNotifications: () => ({
    showNotification: vi.fn()
  })
}));

vi.mock('../../hooks/useTheme', () => ({
  useTheme: () => ({
    theme: 'light'
  })
}));

describe('ArchGen Component', () => {
  beforeEach(() => {
    render(<ArchGen />);
  });

  test('—Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞', () => {
    expect(screen.getByText('ArchGen - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Å—Ö–µ–º')).toBeInTheDocument();
  });

  test('–æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —à–∞–±–ª–æ–Ω—ã –¥–∏–∞–≥—Ä–∞–º–º', () => {
    expect(screen.getByText('–°–∏—Å—Ç–µ–º–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞')).toBeInTheDocument();
    expect(screen.getByText('–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã')).toBeInTheDocument();
    expect(screen.getByText('–ü–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö')).toBeInTheDocument();
    expect(screen.getByText('–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ')).toBeInTheDocument();
  });

  test('–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω', () => {
    // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–±–ª–æ–Ω
    const templateButtons = screen.getAllByText('–°–∏—Å—Ç–µ–º–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞');
    expect(templateButtons.length).toBeGreaterThan(0);
    fireEvent.click(templateButtons[0]);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
    const apiGatewayOptions = screen.getAllByText('API Gateway');
    expect(apiGatewayOptions.length).toBeGreaterThan(0);
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é-–º—ç—Ç—á–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ 'User Service'
    const userServiceOptions = screen.getAllByText((content) => content.includes('User Service'));
    expect(userServiceOptions.length).toBeGreaterThan(0);
  });

  test('–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç', () => {
    // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π –¥–æ –∫–ª–∏–∫–∞
    const beforeInputs = screen.getAllByPlaceholderText('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞').length;
    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É "+ –î–æ–±–∞–≤–∏—Ç—å"
    const addButtons = screen.getAllByText('+ –î–æ–±–∞–≤–∏—Ç—å');
    const addButton = addButtons.find(btn => !btn.hasAttribute('disabled')) || addButtons[0];
    fireEvent.click(addButton);
    // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
    const afterInputs = screen.getAllByPlaceholderText('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞').length;
    expect(afterInputs).toBeGreaterThan(beforeInputs);
  });

  test('–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫', () => {
    const titleInput = screen.getByPlaceholderText('–ù–∞–∑–≤–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã');
    fireEvent.change(titleInput, { target: { value: '–ú–æ—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞' } });
    
    expect(titleInput).toHaveValue('–ú–æ—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞');
  });

  test('–∫–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', () => {
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    const titleInput = screen.getByPlaceholderText('–ù–∞–∑–≤–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã');
    fireEvent.change(titleInput, { target: { value: 'Test Diagram' } });

    // –í—ã–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω
    const templateButtons = screen.getAllByText('–°–∏—Å—Ç–µ–º–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞');
    fireEvent.click(templateButtons[0]);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    const addButtons = screen.getAllByText('+ –î–æ–±–∞–≤–∏—Ç—å');
    const addButton = addButtons.find(btn => !btn.hasAttribute('disabled')) || addButtons[0];
    fireEvent.click(addButton);

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const componentInputs = screen.getAllByPlaceholderText('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞');
    fireEvent.change(componentInputs[0], { target: { value: 'API Gateway' } });

    // –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–∞
    const generateButton = screen.getByText('üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É');
    expect(generateButton).not.toBeDisabled();
  });

  test('–∫–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –ø—Ä–∏ –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö', () => {
    const generateButton = screen.getByText('üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É');
    expect(generateButton).toBeDisabled();
  });

  test('–æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Å—Ç–∏–ª–∏', () => {
    expect(screen.getAllByText('modern').length).toBeGreaterThan(0);
    expect(screen.getAllByText('minimal').length).toBeGreaterThan(0);
    expect(screen.getAllByText('corporate').length).toBeGreaterThan(0);
    expect(screen.getAllByText('tech').length).toBeGreaterThan(0);
  });

  test('–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã', () => {
    const widthInput = screen.getByDisplayValue('800');
    const heightInput = screen.getByDisplayValue('600');
    
    fireEvent.change(widthInput, { target: { value: '1000' } });
    fireEvent.change(heightInput, { target: { value: '800' } });
    
    expect(widthInput).toHaveValue(1000);
    expect(heightInput).toHaveValue(800);
  });

  test('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', () => {
    expect(screen.getByText('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:')).toBeInTheDocument();
    expect(screen.getByText('–°–≤—è–∑–µ–π:')).toBeInTheDocument();
    expect(screen.getByText('–†–∞–∑–º–µ—Ä:')).toBeInTheDocument();
    expect(screen.getByText('–°—Ç–∏–ª—å:')).toBeInTheDocument();
  });
}); 