import React, { useState, useEffect, useCallback } from 'react'
import Header from './components/Header'
import DomainInput from './components/DomainInput'
import DomainsList from './components/DomainsList'
import AnalysisProgress from './components/AnalysisProgress'
import Recommendations from './components/Recommendations'
import Notifications from './components/Notifications'
import OllamaStatus from './components/OllamaStatus'
import AIAnalysisFlow from './components/AIAnalysisFlow'
import { useWebSocket } from './hooks/useWebSocket'
import { useNotifications } from './hooks/useNotifications'

function App() {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [domain, setDomain] = useState('')
  const [domains, setDomains] = useState([])
  const [recommendations, setRecommendations] = useState([])
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [analysisStats, setAnalysisStats] = useState(null)
  const [analysisStep, setAnalysisStep] = useState('')
  const [analysisProgress, setAnalysisProgress] = useState(0)
  const [aiThoughts, setAiThoughts] = useState([])
  const [showAIAnalysis, setShowAIAnalysis] = useState(false)
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  const [activeTab, setActiveTab] = useState('dashboard')
  const [sidebarOpen, setSidebarOpen] = useState(true)
  const [ollamaStatus, setOllamaStatus] = useState({
    ready_for_work: false,
    server_available: false,
    model_loaded: false,
    message: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...'
  })

  // WebSocket –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const { sendMessage, lastMessage } = useWebSocket()
  const { notifications, addNotification, removeNotification } = useNotifications()

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∫–ª–∏–µ–Ω—Ç–∞
  const clientId = React.useMemo(() => `client_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`, [])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–º–µ–Ω–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadDomains()
    checkOllamaStatus()
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Ollama
    const interval = setInterval(checkOllamaStatus, 30000)
    return () => clearInterval(interval)
  }, [])

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    if (lastMessage) {
      handleWebSocketMessage(JSON.parse(lastMessage))
    }
  }, [lastMessage])

  function handleWebSocketMessage(data) {
    console.log('üì° WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:', data.type, data)

    switch (data.type) {
      case 'progress':
        setAnalysisStep(data.step)
        setAnalysisProgress(data.percentage)
        setAnalysisStats({
          current: data.current,
          total: data.total,
          details: data.details
        })
        break

      case 'ai_thinking':
        setAiThoughts(prev => [...prev, {
          id: Date.now(),
          type: 'ai_thinking',
          thought: data.thought,
          thinking_stage: data.thinking_stage,
          emoji: data.emoji,
          timestamp: data.timestamp
        }])
        break

      case 'enhanced_ai_thinking':
        setAiThoughts(prev => [...prev, {
          id: data.thought_id,
          type: 'enhanced_ai_thinking',
          stage: data.stage,
          content: data.content,
          confidence: data.confidence,
          semantic_weight: data.semantic_weight,
          related_concepts: data.related_concepts,
          reasoning_chain: data.reasoning_chain,
          timestamp: data.timestamp
        }])
        break

      case 'ollama':
        console.log('ü§ñ Ollama —Å—Ç–∞—Ç—É—Å:', data.info)
        break

      case 'error':
        addNotification('error', '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞', data.message)
        setIsAnalyzing(false)
        break

      case 'ping':
        // –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        break

      default:
        console.log('üì° –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', data.type)
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–º–µ–Ω–æ–≤
  async function loadDomains() {
    try {
      const response = await fetch('/api/v1/domains')
      if (response.ok) {
        const data = await response.json()
        setDomains(data.domains || [])
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–º–µ–Ω–æ–≤:', error)
      addNotification('error', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤')
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Ollama
  async function checkOllamaStatus() {
    try {
      const response = await fetch('/api/v1/ollama_status')
      if (response.ok) {
        const status = await response.json()
        setOllamaStatus(status)
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Ollama:', error)
      setOllamaStatus({
        ready_for_work: false,
        server_available: false,
        model_loaded: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama'
      })
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –¥–æ–º–µ–Ω–∞
  async function handleAnalyzeDomain() {
    if (!domain.trim()) {
      addNotification('warning', '–í–Ω–∏–º–∞–Ω–∏–µ', '–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
      return
    }

    if (!ollamaStatus.ready_for_work) {
      addNotification('warning', '–°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞', 'Ollama –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ')
      return
    }

    setIsAnalyzing(true)
    setAnalysisStep('–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞...')
    setAnalysisProgress(0)
    setAnalysisStats(null)
    setAiThoughts([])
    setShowAIAnalysis(true)
    setRecommendations([])

    try {
      const response = await fetch('/api/v1/wp_index', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          domain: domain.trim(),
          client_id: clientId,
          comprehensive: true
        })
      })

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`)
      }

      const data = await response.json()
      
      if (data.status === 'success') {
        setRecommendations(data.recommendations || [])
        addNotification('success', '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω', 
          `–ù–∞–π–¥–µ–Ω–æ ${data.recommendations?.length || 0} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è ${data.posts_found || 0} —Å—Ç–∞—Ç–µ–π`)
      } else {
        throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error)
      addNotification('error', '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞', error.message)
    } finally {
      setIsAnalyzing(false)
      setAnalysisStep('')
      setAnalysisProgress(100)
    }
  }

  const handleCloseAIAnalysis = () => {
    setShowAIAnalysis(false)
  }

  // –†–µ–Ω–¥–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
  const renderContent = () => {
    switch (activeTab) {
      case 'dashboard':
        return (
          <div className="space-y-6">
            <div className="card">
              <div className="card-header">
                <div className="card-title">–ê–Ω–∞–ª–∏–∑ –¥–æ–º–µ–Ω–∞</div>
              </div>
              <div className="card-content">
                <DomainInput 
                  domain={domain}
                  setDomain={setDomain}
                  onAnalyze={handleAnalyzeDomain}
                  isAnalyzing={isAnalyzing}
                  ollamaStatus={ollamaStatus}
                />
              </div>
            </div>

            {isAnalyzing && (
              <div className="card">
                <div className="card-header">
                  <div className="card-title">–ü—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞</div>
                </div>
                <div className="card-content">
                  <AnalysisProgress 
                    step={analysisStep}
                    progress={analysisProgress}
                    stats={analysisStats}
                  />
                </div>
              </div>
            )}

            {recommendations.length > 0 && (
              <div className="card">
                <div className="card-header">
                  <div className="card-title">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</div>
                </div>
                <div className="card-content">
                  <Recommendations recommendations={recommendations} />
                </div>
              </div>
            )}
          </div>
        )

      case 'domains':
        return (
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h2 className="text-2xl font-semibold">–î–æ–º–µ–Ω—ã</h2>
              <button 
                className="btn btn-primary"
                onClick={loadDomains}
              >
                –û–±–Ω–æ–≤–∏—Ç—å
              </button>
            </div>
            <DomainsList domains={domains} onRefresh={loadDomains} />
          </div>
        )

      case 'status':
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-semibold">–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h2>
            <OllamaStatus 
              status={ollamaStatus} 
              onRefresh={checkOllamaStatus} 
            />
          </div>
        )

      default:
        return (
          <div className="text-center py-12">
            <h2 className="text-2xl font-semibold mb-4">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</h2>
            <p className="text-muted">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏</p>
          </div>
        )
    }
  }

  return (
    <div className="app-container">
      {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
      <aside className={`sidebar ${!sidebarOpen ? 'hidden' : ''}`}>
        <div className="sidebar-header">
          <div className="flex items-center gap-3">
            <div className="w-8 h-8 bg-primary rounded-lg flex items-center justify-center text-white font-semibold">
              üîó
            </div>
            <h1 className="text-lg font-semibold">SEO Link Recommender</h1>
          </div>
        </div>
        
        <div className="sidebar-content">
          <nav className="space-y-2">
            <button
              className={`w-full text-left px-3 py-2 rounded-md transition-colors ${
                activeTab === 'dashboard' 
                  ? 'bg-accent text-accent-foreground' 
                  : 'hover:bg-accent hover:text-accent-foreground'
              }`}
              onClick={() => setActiveTab('dashboard')}
            >
              üìä –î–∞—à–±–æ—Ä–¥
            </button>
            
            <button
              className={`w-full text-left px-3 py-2 rounded-md transition-colors ${
                activeTab === 'domains' 
                  ? 'bg-accent text-accent-foreground' 
                  : 'hover:bg-accent hover:text-accent-foreground'
              }`}
              onClick={() => setActiveTab('domains')}
            >
              üåê –î–æ–º–µ–Ω—ã
            </button>
            
            <button
              className={`w-full text-left px-3 py-2 rounded-md transition-colors ${
                activeTab === 'status' 
                  ? 'bg-accent text-accent-foreground' 
                  : 'hover:bg-accent hover:text-accent-foreground'
              }`}
              onClick={() => setActiveTab('status')}
            >
              ‚öôÔ∏è –°—Ç–∞—Ç—É—Å
            </button>
          </nav>
        </div>
      </aside>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <main className="main-content">
        <Header 
          title={activeTab === 'dashboard' ? '–î–∞—à–±–æ—Ä–¥' : 
                 activeTab === 'domains' ? '–î–æ–º–µ–Ω—ã' : 
                 activeTab === 'status' ? '–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã' : 'SEO Link Recommender'}
          onMenuClick={() => setSidebarOpen(!sidebarOpen)}
        />
        
        <div className="content-body">
          {renderContent()}
        </div>
      </main>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      <Notifications 
        notifications={notifications} 
        onRemove={removeNotification} 
      />

      {/* AI Analysis Flow */}
      <AIAnalysisFlow
        isVisible={showAIAnalysis}
        messages={aiThoughts}
        onClose={handleCloseAIAnalysis}
      />
    </div>
  )
}

export default App 