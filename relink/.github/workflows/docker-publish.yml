name: 🐳 Publish Docker Images

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  PROJECT_NAME: seo-link-recommender

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 📋 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}-backend
          ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}-frontend-classic
          ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}-frontend-vite
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: 🏗️ Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        
    - name: 🏗️ Build and push Frontend Classic image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./frontend/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        
    - name: 🏗️ Build and push Frontend Vite image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./frontend/Dockerfile.vite
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  test-images:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔐 Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 🧪 Test Backend image
      run: |
        docker pull ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}-backend:latest
        docker run --rm ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}-backend:latest python -c "print('Backend image test passed')"
        
    - name: 🧪 Test Frontend Classic image
      run: |
        docker pull ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}-frontend-classic:latest
        docker run --rm ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}-frontend-classic:latest nginx -t
        
    - name: 🧪 Test Frontend Vite image
      run: |
        docker pull ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}-frontend-vite:latest
        docker run --rm ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}-frontend-vite:latest nginx -t

  notify:
    needs: [build-and-push, test-images]
    runs-on: ubuntu-latest
    if: always() && github.event_name != 'pull_request'
    
    steps:
    - name: 📢 Notify success
      if: needs.build-and-push.result == 'success' && needs.test-images.result == 'success'
      run: |
        echo "✅ Docker images published successfully!"
        echo "📦 Images:"
        echo "  - ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}-backend"
        echo "  - ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}-frontend-classic"
        echo "  - ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}-frontend-vite"
        
    - name: 📢 Notify failure
      if: needs.build-and-push.result == 'failure' || needs.test-images.result == 'failure'
      run: |
        echo "❌ Docker images publication failed!"
        exit 1 