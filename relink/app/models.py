"""
üîó –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–∏
"""

from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
from datetime import datetime
from enum import Enum

class LinkType(str, Enum):
    """–¢–∏–ø—ã –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫"""
    NAVIGATION = "navigation"
    CONTENT = "content"
    FOOTER = "footer"
    RELATED = "related"
    CTA = "cta"

class Priority(str, Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"

class FocusArea(str, Enum):
    """–û–±–ª–∞—Å—Ç–∏ —Ñ–æ–∫—É—Å–∞ –¥–ª—è SEO"""
    INTERNAL_LINKING = "internal_linking"
    CONTENT_OPTIMIZATION = "content_optimization"
    TECHNICAL_SEO = "technical_seo"
    ON_PAGE_SEO = "on_page_seo"
    USER_EXPERIENCE = "user_experience"

class DomainRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–º–µ–Ω–∞"""
    domain: str = Field(..., description="–î–æ–º–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    client_id: Optional[str] = Field(None, description="ID –∫–ª–∏–µ–Ω—Ç–∞")

class PostData(BaseModel):
    """–î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞"""
    id: Optional[int] = None
    title: str = Field(..., description="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞")
    content: str = Field(..., description="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–∞")
    url: str = Field(..., description="URL –ø–æ—Å—Ç–∞")
    post_type: Optional[str] = Field(None, description="–¢–∏–ø –ø–æ—Å—Ç–∞")

class InternalLink(BaseModel):
    """–ú–æ–¥–µ–ª—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å—Å—ã–ª–∫–∏"""
    from_url: str = Field(..., description="URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Å –∫–æ—Ç–æ—Ä–æ–π –∏–¥–µ—Ç —Å—Å—ã–ª–∫–∞")
    to_url: str = Field(..., description="URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤–µ–¥–µ—Ç —Å—Å—ã–ª–∫–∞")
    anchor_text: str = Field(..., description="–¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏")
    link_type: LinkType = Field(..., description="–¢–∏–ø —Å—Å—ã–ª–∫–∏")
    title: Optional[str] = Field(None, description="Title –∞—Ç—Ä–∏–±—É—Ç —Å—Å—ã–ª–∫–∏")
    nofollow: bool = Field(False, description="–ù–∞–ª–∏—á–∏–µ nofollow –∞—Ç—Ä–∏–±—É—Ç–∞")
    position: Optional[str] = Field(None, description="–ü–æ–∑–∏—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")

class Post(BaseModel):
    """–ú–æ–¥–µ–ª—å –ø–æ—Å—Ç–∞/—Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    url: str = Field(..., description="URL –ø–æ—Å—Ç–∞")
    title: str = Field(..., description="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞")
    content: str = Field(..., description="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–∞")
    publish_date: Optional[str] = Field(None, description="–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
    word_count: int = Field(..., description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤")
    internal_links: List[InternalLink] = Field(default_factory=list, description="–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏")
    seo_score: Optional[float] = Field(None, description="SEO –æ—Ü–µ–Ω–∫–∞")
    meta_description: Optional[str] = Field(None, description="Meta description")
    keywords: Optional[List[str]] = Field(None, description="–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")

class Recommendation(BaseModel):
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–µ"""
    type: str = Field(..., description="–¢–∏–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    priority: Priority = Field(Priority.MEDIUM, description="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
    title: str = Field(..., description="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    description: str = Field(..., description="–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    details: Optional[Dict[str, Any]] = Field(None, description="–î–µ—Ç–∞–ª–∏")

class AnalysisResult(BaseModel):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞"""
    domain: str = Field(..., description="–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –¥–æ–º–µ–Ω")
    total_posts: int = Field(..., description="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤")
    posts_with_links: int = Field(..., description="–ü–æ—Å—Ç—ã —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏")
    posts_without_links: int = Field(..., description="–ü–æ—Å—Ç—ã –±–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫")
    total_internal_links: int = Field(..., description="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫")
    recommendations: List[Recommendation] = Field(..., description="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    analysis_date: datetime = Field(default_factory=datetime.utcnow)

class LinkAnalysisRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Å—ã–ª–æ–∫"""
    posts: List[PostData] = Field(..., description="–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    domain: str = Field(..., description="–î–æ–º–µ–Ω")
    client_id: Optional[str] = Field(None, description="ID –∫–ª–∏–µ–Ω—Ç–∞")

class OptimizationRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    domain: str = Field(..., description="–î–æ–º–µ–Ω –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    target_keywords: List[str] = Field(..., description="–¶–µ–ª–µ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
    client_id: Optional[str] = Field(None, description="ID –∫–ª–∏–µ–Ω—Ç–∞")

class OptimizationResult(BaseModel):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    domain: str = Field(..., description="–î–æ–º–µ–Ω")
    suggested_links: List[InternalLink] = Field(..., description="–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ —Å—Å—ã–ª–∫–∏")
    optimization_score: float = Field(..., description="–û—Ü–µ–Ω–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    keywords_coverage: Dict[str, float] = Field(..., description="–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
    created_at: datetime = Field(default_factory=datetime.utcnow)

class DomainAnalysisRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –¥–æ–º–µ–Ω–∞"""
    domain: str = Field(..., description="–î–æ–º–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    include_posts: bool = Field(True, description="–í–∫–ª—é—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–æ–≤")
    include_recommendations: bool = Field(True, description="–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    max_posts: int = Field(50, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

class DomainAnalysisResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º –¥–æ–º–µ–Ω–∞"""
    domain: str = Field(..., description="–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–º–µ–Ω")
    analysis: Dict[str, Any] = Field(..., description="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
    timestamp: str = Field(..., description="–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞")

class SEORecommendationRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é SEO —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    domain: str = Field(..., description="–î–æ–º–µ–Ω –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    focus_areas: List[FocusArea] = Field(default_factory=list, description="–û–±–ª–∞—Å—Ç–∏ —Ñ–æ–∫—É—Å–∞")
    priority: Priority = Field(Priority.MEDIUM, description="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    include_technical: bool = Field(True, description="–í–∫–ª—é—á–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")

class SEORecommendationResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å SEO —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
    domain: str = Field(..., description="–î–æ–º–µ–Ω")
    recommendations: List[Dict[str, Any]] = Field(..., description="–°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    generated_at: str = Field(..., description="–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")

class SEOAnalysisResult(BaseModel):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç SEO –∞–Ω–∞–ª–∏–∑–∞"""
    url: str = Field(..., description="URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    title_score: float = Field(..., description="–û—Ü–µ–Ω–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
    content_score: float = Field(..., description="–û—Ü–µ–Ω–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    meta_description_score: float = Field(..., description="–û—Ü–µ–Ω–∫–∞ meta description")
    internal_links_score: float = Field(..., description="–û—Ü–µ–Ω–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫")
    overall_score: float = Field(..., description="–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞")
    recommendations: List[str] = Field(default_factory=list, description="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")

class InternalLinkAnalysis(BaseModel):
    """–ê–Ω–∞–ª–∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫"""
    total_links: int = Field(..., description="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫")
    unique_targets: int = Field(..., description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–µ–ª–µ–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    orphan_pages: List[str] = Field(default_factory=list, description="–°—Ç—Ä–∞–Ω–∏—Ü—ã –±–µ–∑ –≤—Ö–æ–¥—è—â–∏—Ö —Å—Å—ã–ª–æ–∫")
    most_linked_pages: List[Dict[str, Any]] = Field(default_factory=list, description="–°–∞–º—ã–µ —Å—Å—ã–ª–∞–µ–º—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    link_distribution: Dict[str, int] = Field(default_factory=dict, description="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –ø–æ —Ç–∏–ø–∞–º")

class PostAnalysis(BaseModel):
    """–ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–∞"""
    url: str = Field(..., description="URL –ø–æ—Å—Ç–∞")
    title: str = Field(..., description="–ó–∞–≥–æ–ª–æ–≤–æ–∫")
    word_count: int = Field(..., description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤")
    internal_links_count: int = Field(..., description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫")
    seo_score: float = Field(..., description="SEO –æ—Ü–µ–Ω–∫–∞")
    issues: List[str] = Field(default_factory=list, description="–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")

class IndexingStatus(BaseModel):
    """–°—Ç–∞—Ç—É—Å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏"""
    status: str = Field(..., description="–°—Ç–∞—Ç—É—Å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
    message: str = Field(..., description="–°–æ–æ–±—â–µ–Ω–∏–µ")
    domain: str = Field(..., description="–î–æ–º–µ–Ω")
    timestamp: str = Field(..., description="–í—Ä–µ–º—è")
    data: Optional[Dict[str, Any]] = Field(None, description="–î–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")

class DashboardData(BaseModel):
    """–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
    domain: str = Field(..., description="–î–æ–º–µ–Ω")
    total_posts: int = Field(..., description="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤")
    total_internal_links: int = Field(..., description="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫")
    average_seo_score: float = Field(..., description="–°—Ä–µ–¥–Ω—è—è SEO –æ—Ü–µ–Ω–∫–∞")
    top_posts: List[PostAnalysis] = Field(default_factory=list, description="–õ—É—á—à–∏–µ –ø–æ—Å—Ç—ã")
    top_recommendations: List[Dict[str, Any]] = Field(default_factory=list, description="–¢–æ–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    recent_activity: List[Dict[str, Any]] = Field(default_factory=list, description="–ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")

class ContentAnalysisRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    url: str = Field(..., description="URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    title: str = Field(..., description="–ó–∞–≥–æ–ª–æ–≤–æ–∫")
    content: str = Field(..., description="–ö–æ–Ω—Ç–µ–Ω—Ç")
    meta_description: Optional[str] = Field(None, description="Meta description")

class ContentAnalysisResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    url: str = Field(..., description="URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    analysis: Dict[str, Any] = Field(..., description="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
    score: float = Field(..., description="–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞")
    recommendations: List[str] = Field(default_factory=list, description="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    timestamp: str = Field(..., description="–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏

class ExportFormat(str, Enum):
    """–§–æ—Ä–º–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    JSON = "json"
    CSV = "csv"
    PDF = "pdf"
    EXCEL = "excel"

class MetricsData(BaseModel):
    """–ú–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    total_requests: int = Field(..., description="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤")
    successful_requests: int = Field(..., description="–£—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
    failed_requests: int = Field(..., description="–ù–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
    average_response_time: float = Field(..., description="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞")
    domains_analyzed: int = Field(..., description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤")
    recommendations_generated: int = Field(..., description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")

class ServiceHealth(BaseModel):
    """–ó–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞"""
    status: str = Field(..., description="–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞")
    version: str = Field(..., description="–í–µ—Ä—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞")
    uptime: str = Field(..., description="–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã")
    dependencies: Dict[str, str] = Field(default_factory=dict, description="–°—Ç–∞—Ç—É—Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    last_check: str = Field(..., description="–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏") 