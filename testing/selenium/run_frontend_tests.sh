#!/bin/bash

# üß™ –°–ö–†–ò–ü–¢ –ó–ê–ü–£–°–ö–ê –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –§–†–û–ù–¢–ï–ù–î–ê
# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Selenium + RAG + LLM

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
FRONTEND_URL="http://localhost:3000"
BACKEND_URL="http://localhost:8000"
RAG_URL="http://localhost:8001"
LLM_ROUTER_URL="http://localhost:8002"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log_info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    if ! command -v python3 &> /dev/null; then
        log_error "Python3 –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ pip
    if ! command -v pip3 &> /dev/null; then
        log_error "pip3 –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Brave Browser
    if [ ! -f "/Applications/Brave Browser.app/Contents/MacOS/Brave Browser" ]; then
        log_warning "Brave Browser –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω Chrome"
    fi
    
    log_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    log_info "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    cd "$(dirname "$0")"
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    pip3 install -r requirements.txt
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    pip3 install pytest-asyncio httpx webdriver-manager
    
    log_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
check_services() {
    log_info "üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    local services=(
        "Frontend:3000"
        "Backend:8000"
        "RAG:8001"
        "LLM Router:8002"
    )
    
    for service in "${services[@]}"; do
        IFS=':' read -r name port <<< "$service"
        local url="http://localhost:$port"
        
        if curl -s --max-time 5 "$url" > /dev/null 2>&1; then
            log_success "$name –¥–æ—Å—Ç—É–ø–µ–Ω ($url)"
        else
            log_warning "$name –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ($url)"
        fi
    done
}

# –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (–µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω)
start_frontend() {
    log_info "üöÄ –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
    
    if ! curl -s --max-time 5 "$FRONTEND_URL" > /dev/null 2>&1; then
        log_info "–§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º..."
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–∞–ø–∫—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        cd ../../frontend
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        if [ ! -d "node_modules" ]; then
            log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ npm –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
            npm install
        fi
        
        # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ
        npm run dev &
        FRONTEND_PID=$!
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
        log_info "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
        for i in {1..30}; do
            if curl -s --max-time 5 "$FRONTEND_URL" > /dev/null 2>&1; then
                log_success "–§—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω (PID: $FRONTEND_PID)"
                break
            fi
            sleep 1
        done
        
        if [ $i -eq 30 ]; then
            log_error "–§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ 30 —Å–µ–∫—É–Ω–¥"
            exit 1
        fi
        
        cd - > /dev/null
    else
        log_success "–§—Ä–æ–Ω—Ç–µ–Ω–¥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
    fi
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
run_tests() {
    log_info "üß™ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
    
    cd "$(dirname "$0")"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    mkdir -p results
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    python3 test_comprehensive_frontend.py -v
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if [ -f "frontend_test_results.json" ]; then
        log_success "–¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
        
        # –ü–æ–∫–∞–∑ –∫—Ä–∞—Ç–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        echo ""
        log_info "üìä –ö—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:"
        python3 -c "
import json
with open('frontend_test_results.json', 'r') as f:
    data = json.load(f)
print(f'–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {data[\"total_tests\"]}')
print(f'–£—Å–ø–µ—à–Ω—ã—Ö: {data[\"successful_tests\"]}')
print(f'–ù–µ—É–¥–∞—á–Ω—ã—Ö: {data[\"failed_tests\"]}')
print(f'–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {data[\"success_rate\"]:.1f}%')
print(f'–û–±—â–µ–µ –≤—Ä–µ–º—è: {data[\"total_time\"]:.2f}s')
"
        
        # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        mv frontend_test_results.json results/
        mv frontend_test.log results/ 2>/dev/null || true
        
    else
        log_error "–¢–µ—Å—Ç—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
        exit 1
    fi
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
generate_report() {
    log_info "üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞..."
    
    cd "$(dirname "$0")"
    
    if [ -f "results/frontend_test_results.json" ]; then
        python3 -c "
import json
import datetime

with open('results/frontend_test_results.json', 'r') as f:
    data = json.load(f)

report = f'''# –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ reLink

**–î–∞—Ç–∞:** {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**–¢–µ—Å—Ç-—Å—å—é—Ç:** {data['test_suite']}

## –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

- **–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:** {data['total_tests']}
- **–£—Å–ø–µ—à–Ω—ã—Ö:** {data['successful_tests']}
- **–ù–µ—É–¥–∞—á–Ω—ã—Ö:** {data['failed_tests']}
- **–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞:** {data['success_rate']:.1f}%
- **–û–±—â–µ–µ –≤—Ä–µ–º—è:** {data['total_time']:.2f}s
- **–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:** {'‚úÖ –£–°–ü–ï–•' if data['overall_success'] else '‚ùå –ù–ï–£–î–ê–ß–ê'}

## –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

'''

for result in data['results']:
    status = '‚úÖ' if result['success'] else '‚ùå'
    report += f'''
### {result['test']} {status}

- **–°—Ç–∞—Ç—É—Å:** {'–£—Å–ø–µ—Ö' if result['success'] else '–ù–µ—É–¥–∞—á–∞'}
'''

if 'performance_metrics' in result:
    report += f'- **–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏:** {result.get('load_time', 'N/A'):.2f}s\n'

if 'accessibility_issues' in result:
    report += f'- **–ü—Ä–æ–±–ª–µ–º—ã –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:** {len(result['accessibility_issues'])}\n'

if 'interactions' in result:
    successful = sum(1 for r in result['interactions'] if r['success'])
    report += f'- **–£—Å–ø–µ—à–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π:** {successful}/{len(result['interactions'])}\n'

if 'devices' in result:
    successful = sum(1 for r in result['devices'] if r['success'])
    report += f'- **–£—Å–ø–µ—à–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:** {successful}/{len(result['devices'])}\n'

if 'endpoints' in result:
    successful = sum(1 for r in result['endpoints'] if r['success'])
    report += f'- **–£—Å–ø–µ—à–Ω—ã—Ö API:** {successful}/{len(result['endpoints'])}\n'

if 'services' in result:
    successful = sum(1 for r in result['services'] if r['success'])
    report += f'- **–£—Å–ø–µ—à–Ω—ã—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤:** {successful}/{len(result['services'])}\n'

report += '''

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

'''

if not data['overall_success']:
    report += '''
### –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è:
- –ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
'''
else:
    report += '''
### –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! üéâ
- –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
'''

with open('results/frontend_test_report.md', 'w', encoding='utf-8') as f:
    f.write(report)

print('–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: results/frontend_test_report.md')
"
        
        log_success "–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: results/frontend_test_report.md"
    fi
}

# –û—á–∏—Å—Ç–∫–∞
cleanup() {
    log_info "üßπ –û—á–∏—Å—Ç–∫–∞..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –µ—Å–ª–∏ –º—ã –µ–≥–æ –∑–∞–ø—É—Å–∫–∞–ª–∏
    if [ ! -z "$FRONTEND_PID" ]; then
        log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (PID: $FRONTEND_PID)"
        kill $FRONTEND_PID 2>/dev/null || true
    fi
    
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    rm -f *.pyc
    rm -rf __pycache__
    
    log_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap cleanup EXIT

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–†–û–ù–¢–ï–ù–î–ê reLink"
    echo "================================================"
    
    check_dependencies
    install_dependencies
    check_services
    start_frontend
    run_tests
    generate_report
    
    echo ""
    log_success "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    echo "üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: results/"
    echo "üìã –û—Ç—á–µ—Ç: results/frontend_test_report.md"
}

# –ó–∞–ø—É—Å–∫
main "$@" 