#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢ API –ò–ù–¢–ï–ì–†–ê–¶–ò–ò reLink
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —á–µ—Ä–µ–∑ API –≤—ã–∑–æ–≤—ã
"""

import asyncio
import time
import json
import httpx
from typing import Dict, Any, List
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('api_test.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
FRONTEND_URL = "http://localhost:3000"
BACKEND_URL = "http://localhost:8000"
RAG_URL = "http://localhost:8001"
LLM_ROUTER_URL = "http://localhost:8002"

class APITester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.test_results = []
        self.client = httpx.AsyncClient(timeout=30.0)
        
    async def test_frontend_availability(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
        logger.info("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞")
        
        try:
            start_time = time.time()
            response = await self.client.get(FRONTEND_URL)
            load_time = time.time() - start_time
            
            result = {
                "test": "frontend_availability",
                "status_code": response.status_code,
                "load_time": load_time,
                "content_length": len(response.content),
                "success": response.status_code == 200 and load_time < 5.0
            }
            
            if response.status_code == 200:
                logger.info(f"‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω, –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {load_time:.2f}s")
            else:
                logger.warning(f"‚ö†Ô∏è –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                
        except Exception as e:
            result = {
                "test": "frontend_availability",
                "error": str(e),
                "success": False
            }
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É: {e}")
        
        self.test_results.append(result)
        return result
    
    async def test_backend_health(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è backend"""
        logger.info("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è backend")
        
        try:
            response = await self.client.get(f"{BACKEND_URL}/health")
            
            result = {
                "test": "backend_health",
                "status_code": response.status_code,
                "success": response.status_code == 200
            }
            
            if response.status_code == 200:
                health_data = response.json()
                result["health_data"] = health_data
                logger.info(f"‚úÖ Backend –∑–¥–æ—Ä–æ–≤, —Å—Ç–∞—Ç—É—Å: {health_data.get('status', 'unknown')}")
            else:
                logger.warning(f"‚ö†Ô∏è Backend –Ω–µ–∑–¥–æ—Ä–æ–≤, —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                
        except Exception as e:
            result = {
                "test": "backend_health",
                "error": str(e),
                "success": False
            }
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ backend: {e}")
        
        self.test_results.append(result)
        return result
    
    async def test_rag_service(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç RAG —Å–µ—Ä–≤–∏—Å–∞"""
        logger.info("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG —Å–µ—Ä–≤–∏—Å–∞")
        
        rag_results = []
        
        # –¢–µ—Å—Ç health check
        try:
            response = await self.client.get(f"{RAG_URL}/health")
            rag_results.append({
                "endpoint": "health",
                "status_code": response.status_code,
                "success": response.status_code == 200
            })
        except Exception as e:
            rag_results.append({
                "endpoint": "health",
                "error": str(e),
                "success": False
            })
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
        try:
            response = await self.client.post(
                f"{RAG_URL}/api/v1/search",
                json={
                    "query": "SEO analysis",
                    "collection": "default",
                    "top_k": 3
                }
            )
            
            if response.status_code == 200:
                results = response.json()
                rag_results.append({
                    "endpoint": "search",
                    "status_code": response.status_code,
                    "results_count": len(results.get("results", [])),
                    "success": True
                })
            else:
                rag_results.append({
                    "endpoint": "search",
                    "status_code": response.status_code,
                    "success": False
                })
                
        except Exception as e:
            rag_results.append({
                "endpoint": "search",
                "error": str(e),
                "success": False
            })
        
        result = {
            "test": "rag_service",
            "endpoints": rag_results,
            "success": all(r["success"] for r in rag_results)
        }
        
        self.test_results.append(result)
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö RAG –≤—ã–∑–æ–≤–æ–≤: {sum(1 for r in rag_results if r['success'])}/{len(rag_results)}")
        return result
    
    async def test_llm_router(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç LLM —Ä–æ—É—Ç–µ—Ä–∞"""
        logger.info("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LLM —Ä–æ—É—Ç–µ—Ä–∞")
        
        llm_results = []
        
        # –¢–µ—Å—Ç health check
        try:
            response = await self.client.get(f"{LLM_ROUTER_URL}/health")
            llm_results.append({
                "endpoint": "health",
                "status_code": response.status_code,
                "success": response.status_code == 200
            })
        except Exception as e:
            llm_results.append({
                "endpoint": "health",
                "error": str(e),
                "success": False
            })
        
        # –¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
        try:
            response = await self.client.post(
                f"{LLM_ROUTER_URL}/api/v1/route",
                json={
                    "prompt": "What is SEO?",
                    "model": "auto",
                    "context": {}
                }
            )
            
            if response.status_code == 200:
                result_data = response.json()
                llm_results.append({
                    "endpoint": "route",
                    "status_code": response.status_code,
                    "has_response": "response" in result_data,
                    "success": True
                })
            else:
                llm_results.append({
                    "endpoint": "route",
                    "status_code": response.status_code,
                    "success": False
                })
                
        except Exception as e:
            llm_results.append({
                "endpoint": "route",
                "error": str(e),
                "success": False
            })
        
        result = {
            "test": "llm_router",
            "endpoints": llm_results,
            "success": all(r["success"] for r in llm_results)
        }
        
        self.test_results.append(result)
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö LLM –≤—ã–∑–æ–≤–æ–≤: {sum(1 for r in llm_results if r['success'])}/{len(llm_results)}")
        return result
    
    async def test_frontend_api_endpoints(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
        logger.info("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞")
        
        frontend_endpoints = [
            "/api/v1/health",
            "/api/v1/status",
            "/api/v1/config"
        ]
        
        endpoint_results = []
        
        for endpoint in frontend_endpoints:
            try:
                response = await self.client.get(f"{FRONTEND_URL}{endpoint}")
                endpoint_results.append({
                    "endpoint": endpoint,
                    "status_code": response.status_code,
                    "success": response.status_code in [200, 404]  # 404 —Ç–æ–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
                })
            except Exception as e:
                endpoint_results.append({
                    "endpoint": endpoint,
                    "error": str(e),
                    "success": False
                })
        
        result = {
            "test": "frontend_api_endpoints",
            "endpoints": endpoint_results,
            "success": all(r["success"] for r in endpoint_results)
        }
        
        self.test_results.append(result)
        logger.info(f"‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: {len(endpoint_results)}")
        return result
    
    async def test_performance_metrics(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        logger.info("‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
        performance_results = []
        
        # –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        try:
            start_time = time.time()
            response = await self.client.get(FRONTEND_URL)
            response_time = time.time() - start_time
            
            performance_results.append({
                "metric": "frontend_response_time",
                "value": response_time,
                "success": response_time < 2.0,  # –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –º–µ–Ω–µ–µ 2 —Å–µ–∫—É–Ω–¥
                "threshold": 2.0
            })
        except Exception as e:
            performance_results.append({
                "metric": "frontend_response_time",
                "error": str(e),
                "success": False
            })
        
        # –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ backend
        try:
            start_time = time.time()
            response = await self.client.get(f"{BACKEND_URL}/health")
            response_time = time.time() - start_time
            
            performance_results.append({
                "metric": "backend_response_time",
                "value": response_time,
                "success": response_time < 1.0,  # –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –º–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã
                "threshold": 1.0
            })
        except Exception as e:
            performance_results.append({
                "metric": "backend_response_time",
                "error": str(e),
                "success": False
            })
        
        result = {
            "test": "performance_metrics",
            "metrics": performance_results,
            "success": all(r["success"] for r in performance_results)
        }
        
        self.test_results.append(result)
        logger.info(f"‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –º–µ—Ç—Ä–∏–∫: {len(performance_results)}")
        return result
    
    async def run_comprehensive_test(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API")
        
        start_time = time.time()
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        await self.test_frontend_availability()
        await self.test_backend_health()
        await self.test_rag_service()
        await self.test_llm_router()
        await self.test_frontend_api_endpoints()
        await self.test_performance_metrics()
        
        total_time = time.time() - start_time
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_tests = len(self.test_results)
        successful_tests = sum(1 for r in self.test_results if r["success"])
        
        comprehensive_result = {
            "test_suite": "comprehensive_api_test",
            "total_tests": total_tests,
            "successful_tests": successful_tests,
            "failed_tests": total_tests - successful_tests,
            "success_rate": (successful_tests / total_tests) * 100 if total_tests > 0 else 0,
            "total_time": total_time,
            "results": self.test_results,
            "overall_success": successful_tests == total_tests
        }
        
        logger.info(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        logger.info(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        logger.info(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
        logger.info(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {total_tests - successful_tests}")
        logger.info(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {comprehensive_result['success_rate']:.1f}%")
        logger.info(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}s")
        
        return comprehensive_result
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        await self.client.aclose()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = APITester()
    
    try:
        result = await tester.run_comprehensive_test()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª
        with open('api_test_results.json', 'w') as f:
            json.dump(result, f, indent=2, default=str)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n" + "="*50)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API")
        print("="*50)
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {result['total_tests']}")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {result['successful_tests']}")
        print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö: {result['failed_tests']}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {result['success_rate']:.1f}%")
        print(f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {result['total_time']:.2f}s")
        print(f"–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£–°–ü–ï–•' if result['overall_success'] else '‚ùå –ù–ï–£–î–ê–ß–ê'}")
        
        if not result['overall_success']:
            print("\n‚ùå –î–µ—Ç–∞–ª–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:")
            for test_result in result['results']:
                if not test_result['success']:
                    print(f"  - {test_result['test']}: {test_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        return result['overall_success']
        
    finally:
        await tester.close()

if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1) 