"""
üîó API —Ä–æ—É—Ç—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–∏
"""

from fastapi import APIRouter, Depends, HTTPException, status
from typing import List, Optional, Dict, Any
from datetime import datetime
import logging

from ..models import (
    InternalLink, 
    LinkRecommendation, 
    DomainAnalysisRequest,
    SEOAnalysisResult,
    LinkType
)
from ..services.internal_linking import InternalLinkingService
from ..services.seo_analyzer import SEOAnalyzerService
from ..services.content_analyzer import ContentAnalyzerService
from bootstrap.llm_router import get_llm_router
from bootstrap.rag_service import get_rag_service
from bootstrap.ollama_client import get_ollama_client
from bootstrap.monitoring import get_service_monitor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

router = APIRouter(tags=["reLink Internal Linking"])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
internal_linking_service = InternalLinkingService()
seo_analyzer_service = SEOAnalyzerService()
content_analyzer_service = ContentAnalyzerService()

@router.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "service": "reLink Internal Linking",
        "description": "–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è SEO",
        "timestamp": datetime.now().isoformat()
    }

@router.post("/api/v1/internal-links/analyze")
async def analyze_internal_links(
    request: DomainAnalysisRequest,
    llm_router = Depends(get_llm_router),
    rag_service = Depends(get_rag_service),
    ollama_client = Depends(get_ollama_client),
    monitor = Depends(get_service_monitor)
):
    """–ê–Ω–∞–ª–∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è –¥–æ–º–µ–Ω–∞"""
    
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    request_data = await monitor.track_request("/internal-links/analyze", f"req_{datetime.now().timestamp()}")
    
    try:
        # –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–µ—Ä–≤–∏—Å
        analysis_result = await internal_linking_service.analyze_domain(
            domain=request.domain,
            llm_router=llm_router,
            rag_service=rag_service,
            ollama_client=ollama_client
        )
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        await monitor.complete_request(request_data["request_id"], "success", analysis_result)
        
        return analysis_result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫: {e}")
        await monitor.complete_request(request_data["request_id"], "error")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫: {str(e)}"
        )

@router.post("/api/v1/internal-links/recommendations")
async def get_link_recommendations(
    request: DomainAnalysisRequest,
    llm_router = Depends(get_llm_router),
    rag_service = Depends(get_rag_service),
    ollama_client = Depends(get_ollama_client),
    monitor = Depends(get_service_monitor)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º —Å—Å—ã–ª–∫–∞–º"""
    
    request_data = await monitor.track_request("/internal-links/recommendations", f"req_{datetime.now().timestamp()}")
    
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        recommendations = await internal_linking_service.generate_recommendations(
            domain=request.domain,
            llm_router=llm_router,
            rag_service=rag_service,
            ollama_client=ollama_client
        )
        
        await monitor.complete_request(request_data["request_id"], "success", {"recommendations": recommendations})
        
        return {
            "status": "success",
            "domain": request.domain,
            "recommendations": recommendations,
            "generated_at": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        await monitor.complete_request(request_data["request_id"], "error")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}"
        )

@router.post("/api/v1/seo/analyze", response_model=SEOAnalysisResult)
async def analyze_seo(
    request: DomainAnalysisRequest,
    llm_router = Depends(get_llm_router),
    rag_service = Depends(get_rag_service),
    ollama_client = Depends(get_ollama_client),
    monitor = Depends(get_service_monitor)
):
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π SEO –∞–Ω–∞–ª–∏–∑ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏"""
    
    request_data = await monitor.track_request("/seo/analyze", f"req_{datetime.now().timestamp()}")
    
    try:
        # SEO –∞–Ω–∞–ª–∏–∑
        seo_result = await seo_analyzer_service.analyze_domain(
            domain=request.domain,
            comprehensive=request.comprehensive,
            llm_router=llm_router,
            rag_service=rag_service,
            ollama_client=ollama_client
        )
        
        await monitor.complete_request(request_data["request_id"], "success", seo_result)
        
        return seo_result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ SEO –∞–Ω–∞–ª–∏–∑–µ: {e}")
        await monitor.complete_request(request_data["request_id"], "error")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ SEO –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"
        )

@router.post("/api/v1/content/analyze")
async def analyze_content(
    domain: str,
    llm_router = Depends(get_llm_router),
    rag_service = Depends(get_rag_service),
    ollama_client = Depends(get_ollama_client),
    monitor = Depends(get_service_monitor)
):
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫"""
    
    request_data = await monitor.track_request("/content/analyze", f"req_{datetime.now().timestamp()}")
    
    try:
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_analysis = await content_analyzer_service.analyze_content(
            domain=domain,
            llm_router=llm_router,
            rag_service=rag_service,
            ollama_client=ollama_client
        )
        
        await monitor.complete_request(request_data["request_id"], "success", content_analysis)
        
        return content_analysis
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
        await monitor.complete_request(request_data["request_id"], "error")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {str(e)}"
        )

@router.get("/api/v1/metrics")
async def get_service_metrics(monitor = Depends(get_service_monitor)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "service": "reLink Internal Linking",
        "metrics": monitor.get_effectiveness_report(),
        "timestamp": datetime.now().isoformat()
    }

@router.get("/api/v1/endpoints")
async def get_endpoints():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    return {
        "service": "reLink Internal Linking",
        "endpoints": [
            "/health",
            "/api/v1/internal-links/analyze",
            "/api/v1/internal-links/recommendations", 
            "/api/v1/seo/analyze",
            "/api/v1/content/analyze",
            "/api/v1/metrics",
            "/api/v1/endpoints"
        ]
    } 