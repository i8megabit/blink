"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è reLink.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç REST API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞–º–∏, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è–º–∏ –∏ –æ—Ç—á–µ—Ç–∞–º–∏.
"""

from fastapi import FastAPI, HTTPException, Depends, BackgroundTasks, Query
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
from fastapi.security import HTTPBearer
from contextlib import asynccontextmanager
import logging
import time
from typing import List, Optional, Dict, Any
import uvicorn

from .config import settings
from .models import (
    TestRequest, TestResponse, TestSuiteRequest, TestSuiteResponse,
    TestExecution, TestExecutionResponse, TestReport, TestMetrics,
    TestFilter, TestStatus, TestType, TestPriority, TestEnvironment
)
from .services import TestingService
from .database import get_database, Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
testing_service = TestingService()
security = HTTPBearer(auto_error=False)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è reLink...")
    # await testing_service.initialize()  # –≤—Ä–µ–º–µ–Ω–Ω–æ —É–±—Ä–∞–Ω–æ
    logger.info("‚úÖ –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    yield
    # await testing_service.cleanup()  # –≤—Ä–µ–º–µ–Ω–Ω–æ —É–±—Ä–∞–Ω–æ
    logger.info("üõë –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="reLink Testing Service",
    description="–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã reLink",
    version="1.0.0",
    docs_url="/docs" if settings.debug else None,
    redoc_url="/redoc" if settings.debug else None,
    lifespan=lifespan
)

# Middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.allowed_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=settings.allowed_hosts
)

# Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def get_db() -> Database:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    return await get_database()

# Dependency –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)
async def get_current_user(token: str = Depends(security)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not settings.auth_required:
        return {"user_id": "anonymous", "role": "tester"}
    
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if not token:
        raise HTTPException(status_code=401, detail="–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
    
    return {"user_id": "test_user", "role": "tester"}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exc}", exc_info=True)
    return JSONResponse(
        status_code=500,
        content={
            "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "detail": str(exc) if settings.debug else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞"
        }
    )

@app.exception_handler(HTTPException)
async def http_exception_handler(request, exc):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": exc.detail,
            "status_code": exc.status_code
        }
    )

# Health check
@app.get("/health", tags=["–°–∏—Å—Ç–µ–º–∞"])
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "service": "reLink Testing Service",
        "version": "1.0.0",
        "timestamp": time.time()
    }

# API —Ä–æ—É—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
@app.post("/tests/", response_model=TestResponse, tags=["–¢–µ—Å—Ç—ã"])
async def create_test(
    test_request: TestRequest,
    background_tasks: BackgroundTasks,
    current_user: dict = Depends(get_current_user),
    db: Database = Depends(get_db)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    try:
        test = await testing_service.create_test(test_request, current_user["user_id"])
        logger.info(f"–°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç: {test.id}")
        return test
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞: {e}")
        raise HTTPException(status_code=400, detail=str(e))

@app.get("/tests/", response_model=List[TestResponse], tags=["–¢–µ—Å—Ç—ã"])
async def get_tests(
    skip: int = Query(0, ge=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"),
    limit: int = Query(100, ge=1, le=1000, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π"),
    test_type: Optional[TestType] = Query(None, description="–¢–∏–ø —Ç–µ—Å—Ç–∞"),
    status: Optional[TestStatus] = Query(None, description="–°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∞"),
    priority: Optional[TestPriority] = Query(None, description="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–µ—Å—Ç–∞"),
    environment: Optional[TestEnvironment] = Query(None, description="–û–∫—Ä—É–∂–µ–Ω–∏–µ"),
    current_user: dict = Depends(get_current_user),
    db: Database = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    try:
        filters = TestFilter(
            test_type=test_type,
            status=status,
            priority=priority,
            environment=environment
        )
        tests = await testing_service.get_tests(filters, skip, limit)
        return tests
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/tests/{test_id}", response_model=TestResponse, tags=["–¢–µ—Å—Ç—ã"])
async def get_test(
    test_id: str,
    current_user: dict = Depends(get_current_user),
    db: Database = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –ø–æ ID"""
    try:
        test = await testing_service.get_test(test_id)
        if not test:
            raise HTTPException(status_code=404, detail="–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return test
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ {test_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.put("/tests/{test_id}", response_model=TestResponse, tags=["–¢–µ—Å—Ç—ã"])
async def update_test(
    test_id: str,
    test_request: TestRequest,
    current_user: dict = Depends(get_current_user),
    db: Database = Depends(get_db)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    try:
        test = await testing_service.update_test(test_id, test_request)
        if not test:
            raise HTTPException(status_code=404, detail="–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Ç–µ—Å—Ç: {test_id}")
        return test
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ {test_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.delete("/tests/{test_id}", tags=["–¢–µ—Å—Ç—ã"])
async def delete_test(
    test_id: str,
    current_user: dict = Depends(get_current_user),
    db: Database = Depends(get_db)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    try:
        success = await testing_service.delete_test(test_id)
        if not success:
            raise HTTPException(status_code=404, detail="–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        logger.info(f"–£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç: {test_id}")
        return {"message": "–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"}
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ {test_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# API —Ä–æ—É—Ç—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
@app.post("/tests/{test_id}/execute", response_model=TestExecutionResponse, tags=["–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"])
async def execute_test(
    test_id: str,
    background_tasks: BackgroundTasks,
    current_user: dict = Depends(get_current_user),
    db: Database = Depends(get_db)
):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    try:
        execution = await testing_service.execute_test(test_id, current_user["user_id"])
        if not execution:
            raise HTTPException(status_code=404, detail="–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ
        background_tasks.add_task(testing_service.run_test_execution, execution.id)
        
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞: {execution.id}")
        return execution
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ {test_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/executions/", response_model=List[TestExecutionResponse], tags=["–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"])
async def get_executions(
    skip: int = Query(0, ge=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"),
    limit: int = Query(100, ge=1, le=1000, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π"),
    test_id: Optional[str] = Query(None, description="ID —Ç–µ—Å—Ç–∞"),
    status: Optional[TestStatus] = Query(None, description="–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"),
    current_user: dict = Depends(get_current_user),
    db: Database = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π —Ç–µ—Å—Ç–æ–≤"""
    try:
        executions = await testing_service.get_executions(test_id, status, skip, limit)
        return executions
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/executions/{execution_id}", response_model=TestExecutionResponse, tags=["–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"])
async def get_execution(
    execution_id: str,
    current_user: dict = Depends(get_current_user),
    db: Database = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –ø–æ ID"""
    try:
        execution = await testing_service.get_execution(execution_id)
        if not execution:
            raise HTTPException(status_code=404, detail="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return execution
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {execution_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/executions/{execution_id}/cancel", tags=["–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"])
async def cancel_execution(
    execution_id: str,
    current_user: dict = Depends(get_current_user),
    db: Database = Depends(get_db)
):
    """–û—Ç–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    try:
        success = await testing_service.cancel_execution(execution_id)
        if not success:
            raise HTTPException(status_code=404, detail="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        logger.info(f"–û—Ç–º–µ–Ω–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {execution_id}")
        return {"message": "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ"}
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {execution_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# API —Ä–æ—É—Ç—ã –¥–ª—è –Ω–∞–±–æ—Ä–æ–≤ —Ç–µ—Å—Ç–æ–≤
@app.post("/test-suites/", response_model=TestSuiteResponse, tags=["–ù–∞–±–æ—Ä—ã —Ç–µ—Å—Ç–æ–≤"])
async def create_test_suite(
    suite_request: TestSuiteRequest,
    current_user: dict = Depends(get_current_user),
    db: Database = Depends(get_db)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤"""
    try:
        suite = await testing_service.create_test_suite(suite_request, current_user["user_id"])
        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤: {suite.id}")
        return suite
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤: {e}")
        raise HTTPException(status_code=400, detail=str(e))

@app.post("/test-suites/{suite_id}/execute", response_model=List[TestExecutionResponse], tags=["–ù–∞–±–æ—Ä—ã —Ç–µ—Å—Ç–æ–≤"])
async def execute_test_suite(
    suite_id: str,
    background_tasks: BackgroundTasks,
    current_user: dict = Depends(get_current_user),
    db: Database = Depends(get_db)
):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤"""
    try:
        executions = await testing_service.execute_test_suite(suite_id, current_user["user_id"])
        if not executions:
            raise HTTPException(status_code=404, detail="–ù–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ
        for execution in executions:
            background_tasks.add_task(testing_service.run_test_execution, execution.id)
        
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤: {suite_id}")
        return executions
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤ {suite_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# API —Ä–æ—É—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
@app.get("/reports/", response_model=List[TestReport], tags=["–û—Ç—á–µ—Ç—ã"])
async def get_reports(
    skip: int = Query(0, ge=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"),
    limit: int = Query(100, ge=1, le=1000, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π"),
    test_id: Optional[str] = Query(None, description="ID —Ç–µ—Å—Ç–∞"),
    execution_id: Optional[str] = Query(None, description="ID –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"),
    current_user: dict = Depends(get_current_user),
    db: Database = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤"""
    try:
        reports = await testing_service.get_reports(test_id, execution_id, skip, limit)
        return reports
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/reports/{report_id}", response_model=TestReport, tags=["–û—Ç—á–µ—Ç—ã"])
async def get_report(
    report_id: str,
    current_user: dict = Depends(get_current_user),
    db: Database = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ ID"""
    try:
        report = await testing_service.get_report(report_id)
        if not report:
            raise HTTPException(status_code=404, detail="–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return report
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ {report_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# API —Ä–æ—É—Ç—ã –¥–ª—è –º–µ—Ç—Ä–∏–∫
@app.get("/metrics/", response_model=TestMetrics, tags=["–ú–µ—Ç—Ä–∏–∫–∏"])
async def get_metrics(
    test_id: Optional[str] = Query(None, description="ID —Ç–µ—Å—Ç–∞"),
    execution_id: Optional[str] = Query(None, description="ID –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"),
    time_range: Optional[str] = Query("24h", description="–í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω"),
    current_user: dict = Depends(get_current_user),
    db: Database = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        metrics = await testing_service.get_metrics(test_id, execution_id, time_range)
        return metrics
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# WebSocket –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
@app.websocket("/ws/executions/{execution_id}")
async def websocket_execution_updates(websocket, execution_id: str):
    """WebSocket –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        await testing_service.subscribe_to_execution_updates(execution_id, websocket)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ WebSocket –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {execution_id}: {e}")
        await websocket.close()

if __name__ == "__main__":
    uvicorn.run(
        "app.main:app",
        host=settings.host,
        port=settings.port,
        reload=settings.debug,
        log_level="info",
        workers=1
    ) 