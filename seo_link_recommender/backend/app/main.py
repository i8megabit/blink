"""FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫."""

from __future__ import annotations

import os
from pathlib import Path

import httpx
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from sqlalchemy import Integer, Text, JSON, select
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, sessionmaker

app = FastAPI()

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


class Base(DeclarativeBase):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –º–æ–¥–µ–ª–µ–π."""


class Recommendation(Base):
    """–ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""

    __tablename__ = "recommendations"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    text: Mapped[str] = mapped_column(Text)
    links: Mapped[list[str]] = mapped_column(JSON)


class RecommendRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫."""

    text: str


class WPRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ WordPress-—Å–∞–π—Ç–∞."""

    domain: str


OLLAMA_URL = os.getenv("OLLAMA_URL", "http://localhost:11434/api/generate")
OLLAMA_MODEL = os.getenv("OLLAMA_MODEL", "llama3")

DATABASE_URL = os.getenv(
    "DATABASE_URL",
    "postgresql+asyncpg://seo_user:seo_pass@localhost/seo_db",
)

engine = create_async_engine(DATABASE_URL)
AsyncSessionLocal = sessionmaker(engine, expire_on_commit=False, class_=AsyncSession)


async def generate_links(text: str) -> list[str]:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç Ollama –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫."""
    prompt = (
        "–ü—Ä–µ–¥–ª–æ–∂–∏ –¥–æ –ø—è—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
        "–ö–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É –≤—ã–≤–µ–¥–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ /article/–Ω–∞–∑–≤–∞–Ω–∏–µ-—Å—Ç–∞—Ç—å–∏, "
        "–æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö –∏–∑ —Ç–µ–∫—Å—Ç–∞. "
        "–ù–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è. "
        f"–¢–µ–∫—Å—Ç: {text}"
    )
    async with httpx.AsyncClient(timeout=60.0) as client:
        response = await client.post(
            OLLAMA_URL,
            json={"model": OLLAMA_MODEL, "prompt": prompt, "stream": False},
            timeout=60,
        )
    response.raise_for_status()
    data = response.json()
    lines = [line.strip("- \n") for line in data.get("response", "").splitlines()]
    links = [line for line in lines if line]
    return links[:5]


async def fetch_wp_posts(domain: str) -> list[dict[str, str]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ —Å WordPress —Å–∞–π—Ç–∞ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º."""
    url = f"https://{domain}/wp-json/wp/v2/posts?per_page=6"  # –ï—â–µ –º–µ–Ω—å—à–µ –ø–æ—Å—Ç–æ–≤
    async with httpx.AsyncClient(timeout=120.0) as client:
        response = await client.get(url)
    if response.status_code >= 400:
        raise HTTPException(status_code=400, detail="–°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ WordPress")
    data = response.json()
    if not isinstance(data, list):
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç WordPress")
    posts = []
    for item in data:
        try:
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ - –±–µ–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞
            posts.append({
                "title": item["title"]["rendered"], 
                "link": item["link"]
            })
        except Exception as exc:
            raise HTTPException(status_code=400, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ") from exc
    return posts


async def generate_wp_recommendations(posts: list[dict[str, str]]) -> list[dict[str, str]]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–µ —Å—Ç–∞—Ç–µ–π —á–µ—Ä–µ–∑ Ollama —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π."""
    print(f"üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è {len(posts)} –ø–æ—Å—Ç–æ–≤")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑, –Ω–æ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
    
    # –°–æ–∑–¥–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫
    listing = "\n".join(f"{i+1}. {p['title']}" for i, p in enumerate(posts))
    print(f"üìù –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π:\n{listing}")
    
    # –°—É–ø–µ—Ä-–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —á–µ—Ç–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    prompt = f"""–°—Ç–∞—Ç—å–∏ –æ –ø–µ—Ä–µ–µ–∑–¥–µ:
{listing}

–°–æ–∑–¥–∞–π 8 –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –º–µ–∂–¥—É —Å—Ç–∞—Ç—å—è–º–∏. –§–æ—Ä–º–∞—Ç: –ù–û–ú–ï–†1 -> –ù–û–ú–ï–†2 | –∞–Ω–∫–æ—Ä_–Ω–∞_—Ä—É—Å—Å–∫–æ–º

–ü—Ä–∏–º–µ—Ä—ã:
1 -> 3 | —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø–µ—Ä–µ–µ–∑–¥–∞
2 -> 5 | –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø–µ—Ä–µ–µ–∑–¥–µ
4 -> 1 | –æ–±–∑–æ—Ä –≥–æ—Ä–æ–¥–∞

–¢–≤–æ–∏ —Å—Å—ã–ª–∫–∏:"""

    print(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–æ–º–ø—Ç –≤ Ollama: {prompt[:200]}...")

    try:
        async with httpx.AsyncClient(timeout=90.0) as client:
            resp = await client.post(
                OLLAMA_URL,
                json={
                    "model": OLLAMA_MODEL, 
                    "prompt": prompt, 
                    "stream": False,
                    "options": {
                        "num_batch": 32,      # –ï—â–µ –º–µ–Ω—å—à–µ batch
                        "num_ctx": 2048,      # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                        "temperature": 0.3,   # –ú–µ–Ω—å—à–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
                        "top_p": 0.5,         # –ë–æ–ª–µ–µ —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                        "repeat_penalty": 1.1
                    }
                },
                timeout=90,
            )
        resp.raise_for_status()
        content = resp.json().get("response", "")
        print(f"ü§ñ –û—Ç–≤–µ—Ç Ollama: {content}")
        
        recommendations = []
        for line in content.splitlines():
            if "->" not in line:
                continue
            try:
                src_part, rest = line.split("->", 1)
                if "|" in rest:
                    dst_part, anchor = rest.split("|", 1)
                else:
                    dst_part, anchor = rest, ""
                
                # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ (—Ç–æ—á–∫–∏, –ø—Ä–æ–±–µ–ª—ã)
                src_clean = src_part.strip().rstrip('.')
                dst_clean = dst_part.strip().rstrip('.')
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞
                import re
                src_match = re.search(r'\d+', src_clean)
                dst_match = re.search(r'\d+', dst_clean)
                
                if src_match and dst_match:
                    src_num = int(src_match.group()) - 1
                    dst_num = int(dst_match.group()) - 1
                    
                    if 0 <= src_num < len(posts) and 0 <= dst_num < len(posts) and src_num != dst_num:
                        recommendations.append({
                            "from": posts[src_num]['link'], 
                            "to": posts[dst_num]['link'], 
                            "anchor": anchor.strip().strip('"')
                        })
                        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {posts[src_num]['link']} -> {posts[dst_num]['link']}")
                else:
                    print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–æ–º–µ—Ä–∞ –≤ —Å—Ç—Ä–æ–∫–µ: '{line}'")
            except (ValueError, IndexError) as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ '{line}': {e}")
                continue
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö–æ—Ç—è –±—ã –±–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        for i in range(min(5, len(posts)-1)):
            recommendations.append({
                "from": posts[i]['link'],
                "to": posts[i+1]['link'], 
                "anchor": f"—á–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ –æ {posts[i+1]['title'][:30]}..."
            })
    
    print(f"üìä –ò—Ç–æ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    return recommendations[:15]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 15 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π


@app.on_event("startup")
async def on_startup() -> None:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."""
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)


@app.post("/api/v1/test")
async def test(req: RecommendRequest) -> dict[str, str]:
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint."""
    return {"message": f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: {req.text[:50]}..."}


@app.post("/api/v1/recommend")
async def recommend(req: RecommendRequest) -> dict[str, list[str]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫ –æ—Ç Ollama –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö."""
    links = await generate_links(req.text)

    async with AsyncSessionLocal() as session:
        rec = Recommendation(text=req.text, links=links)
        session.add(rec)
        await session.commit()
    return {"links": links}


@app.post("/api/v1/wp_recommend")
async def wp_recommend(req: WPRequest) -> dict[str, list[dict[str, str]]]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç WordPress-—Å–∞–π—Ç –∏ –≤—ã–¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–µ."""
    posts = await fetch_wp_posts(req.domain)
    recs = await generate_wp_recommendations(posts)
    return {"recommendations": recs}


@app.get("/api/v1/health")
async def health() -> dict[str, str]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏."""
    return {"status": "ok"}


@app.get("/api/v1/recommendations")
async def list_recommendations() -> list[dict[str, object]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Recommendation).order_by(Recommendation.id.desc())
        )
        items = [
            {"id": rec.id, "text": rec.text, "links": rec.links}
            for rec in result.scalars()
        ]
    return items


@app.get("/")
async def root():
    """–†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥."""
    from fastapi.responses import RedirectResponse
    return RedirectResponse(url="http://localhost:3000")


# –£–±–∏—Ä–∞–µ–º StaticFiles mount —Ç–∞–∫ –∫–∞–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ç–µ–ø–µ—Ä—å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ä—Ç—É
