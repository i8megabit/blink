#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ChromaDB —Å OpenTelemetry
"""

import os
import sys
import time
import requests
import json
from typing import Dict, Any

def test_chromadb_connection() -> Dict[str, Any]:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ChromaDB"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ChromaDB
        response = requests.get("http://localhost:8006/api/v1/heartbeat", timeout=5)
        if response.status_code == 200:
            return {"status": "success", "message": "ChromaDB –¥–æ—Å—Ç—É–ø–µ–Ω"}
        else:
            return {"status": "error", "message": f"ChromaDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}"}
    except Exception as e:
        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ChromaDB: {e}"}

def test_otel_collector_connection() -> Dict[str, Any]:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenTelemetry Collector"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OpenTelemetry Collector
        response = requests.get("http://localhost:4317", timeout=5)
        return {"status": "success", "message": "OpenTelemetry Collector –¥–æ—Å—Ç—É–ø–µ–Ω"}
    except Exception as e:
        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenTelemetry Collector: {e}"}

def check_chromadb_environment() -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ChromaDB"""
    env_vars = {
        "CHROMA_OTEL_COLLECTION_ENDPOINT": os.getenv("CHROMA_OTEL_COLLECTION_ENDPOINT"),
        "CHROMA_OTEL_SERVICE_NAME": os.getenv("CHROMA_OTEL_SERVICE_NAME"),
        "CHROMA_OTEL_GRANULARITY": os.getenv("CHROMA_OTEL_GRANULARITY"),
        "OTEL_EXPORTER_OTLP_ENDPOINT": os.getenv("OTEL_EXPORTER_OTLP_ENDPOINT"),
        "OTEL_SERVICE_NAME": os.getenv("OTEL_SERVICE_NAME"),
        "OTEL_TRACES_SAMPLER": os.getenv("OTEL_TRACES_SAMPLER")
    }
    
    missing_vars = [k for k, v in env_vars.items() if not v]
    
    if missing_vars:
        return {
            "status": "warning", 
            "message": f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {missing_vars}",
            "env_vars": env_vars
        }
    else:
        return {
            "status": "success", 
            "message": "–í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã",
            "env_vars": env_vars
        }

def test_chromadb_operations() -> Dict[str, Any]:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π ChromaDB"""
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        collection_name = f"test_collection_{int(time.time())}"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        create_response = requests.post(
            "http://localhost:8006/api/v1/collections",
            json={"name": collection_name},
            timeout=10
        )
        
        if create_response.status_code != 200:
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {create_response.status_code}"}
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π
        list_response = requests.get("http://localhost:8006/api/v1/collections", timeout=10)
        
        if list_response.status_code == 200:
            collections = list_response.json()
            test_collection = next((c for c in collections if c["name"] == collection_name), None)
            
            if test_collection:
                # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                delete_response = requests.delete(
                    f"http://localhost:8006/api/v1/collections/{collection_name}",
                    timeout=10
                )
                
                return {
                    "status": "success", 
                    "message": "–û–ø–µ—Ä–∞—Ü–∏–∏ ChromaDB —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                    "collection_id": test_collection["id"]
                }
            else:
                return {"status": "error", "message": "–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
        else:
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π: {list_response.status_code}"}
            
    except Exception as e:
        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π ChromaDB: {e}"}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ChromaDB —Å OpenTelemetry")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    env_result = check_chromadb_environment()
    print(f"   –°—Ç–∞—Ç—É—Å: {env_result['status']}")
    print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {env_result['message']}")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ChromaDB
    print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ChromaDB...")
    chromadb_result = test_chromadb_connection()
    print(f"   –°—Ç–∞—Ç—É—Å: {chromadb_result['status']}")
    print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {chromadb_result['message']}")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenTelemetry Collector
    print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenTelemetry Collector...")
    otel_result = test_otel_collector_connection()
    print(f"   –°—Ç–∞—Ç—É—Å: {otel_result['status']}")
    print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {otel_result['message']}")
    
    # –¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π ChromaDB
    print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π ChromaDB...")
    operations_result = test_chromadb_operations()
    print(f"   –°—Ç–∞—Ç—É—Å: {operations_result['status']}")
    print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {operations_result['message']}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    
    all_results = [env_result, chromadb_result, otel_result, operations_result]
    success_count = sum(1 for r in all_results if r['status'] == 'success')
    error_count = sum(1 for r in all_results if r['status'] == 'error')
    warning_count = sum(1 for r in all_results if r['status'] == 'warning')
    
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}")
    print(f"   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warning_count}")
    print(f"   ‚ùå –û—à–∏–±–∫–∏: {error_count}")
    
    if error_count == 0:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è.")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 