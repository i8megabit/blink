"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è reLink.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç PostgreSQL –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ Redis –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è.
"""

import asyncio
import logging
from typing import Optional, Dict, Any, List
from contextlib import asynccontextmanager
import asyncpg
import redis.asyncio as redis
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from sqlalchemy.orm import declarative_base
from sqlalchemy import Column, String, Integer, DateTime, Boolean, Text, JSON, ForeignKey
from sqlalchemy.sql import func
from datetime import datetime
import json
import uuid

from .config import settings

logger = logging.getLogger(__name__)

# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è SQLAlchemy –º–æ–¥–µ–ª–µ–π
Base = declarative_base()

class Database:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.engine = None
        self.session_factory = None
        self.redis_client = None
        self._connection_pool = None
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL
            if settings.DATABASE_URL:
                self.engine = create_async_engine(
                    settings.DATABASE_URL,
                    echo=settings.DEBUG,
                    pool_size=settings.DB_POOL_SIZE,
                    max_overflow=settings.DB_MAX_OVERFLOW,
                    pool_pre_ping=True
                )
                
                self.session_factory = async_sessionmaker(
                    self.engine,
                    class_=AsyncSession,
                    expire_on_commit=False
                )
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
                async with self.engine.begin() as conn:
                    await conn.run_sync(Base.metadata.create_all)
                
                logger.info("‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
            if settings.REDIS_URL:
                self.redis_client = redis.from_url(
                    settings.REDIS_URL,
                    encoding="utf-8",
                    decode_responses=True,
                    max_connections=settings.REDIS_MAX_CONNECTIONS
                )
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                await self.redis_client.ping()
                logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è asyncpg (–¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
            if settings.DATABASE_URL:
                self._connection_pool = await asyncpg.create_pool(
                    settings.DATABASE_URL,
                    min_size=5,
                    max_size=20
                )
                logger.info("‚úÖ –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π asyncpg —Å–æ–∑–¥–∞–Ω")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if self.engine:
                await self.engine.dispose()
                logger.info("üîå PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            
            if self.redis_client:
                await self.redis_client.close()
                logger.info("üîå Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            
            if self._connection_pool:
                await self._connection_pool.close()
                logger.info("üîå –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π asyncpg –∑–∞–∫—Ä—ã—Ç")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}")
    
    @asynccontextmanager
    async def get_session(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if not self.session_factory:
            raise RuntimeError("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        async with self.session_factory() as session:
            try:
                yield session
                await session.commit()
            except Exception:
                await session.rollback()
                raise
    
    async def execute_query(self, query: str, params: Optional[Dict] = None) -> List[Dict]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ asyncpg"""
        if not self._connection_pool:
            raise RuntimeError("–ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        async with self._connection_pool.acquire() as conn:
            try:
                if params:
                    result = await conn.fetch(query, **params)
                else:
                    result = await conn.fetch(query)
                
                return [dict(row) for row in result]
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
                raise
    
    async def execute_transaction(self, queries: List[Dict]) -> List[Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
        if not self._connection_pool:
            raise RuntimeError("–ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        async with self._connection_pool.acquire() as conn:
            async with conn.transaction():
                results = []
                for query_data in queries:
                    query = query_data["query"]
                    params = query_data.get("params", {})
                    
                    if query.strip().upper().startswith("SELECT"):
                        result = await conn.fetch(query, **params)
                        results.append([dict(row) for row in result])
                    else:
                        result = await conn.execute(query, **params)
                        results.append(result)
                
                return results
    
    # Redis –º–µ—Ç–æ–¥—ã
    async def cache_get(self, key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞"""
        if not self.redis_client:
            return None
        
        try:
            data = await self.redis_client.get(key)
            return json.loads(data) if data else None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞: {e}")
            return None
    
    async def cache_set(self, key: str, value: Any, expire: int = 3600) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à"""
        if not self.redis_client:
            return False
        
        try:
            await self.redis_client.setex(
                key,
                expire,
                json.dumps(value, default=str)
            )
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à: {e}")
            return False
    
    async def cache_delete(self, key: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞"""
        if not self.redis_client:
            return False
        
        try:
            await self.redis_client.delete(key)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞: {e}")
            return False
    
    async def cache_exists(self, key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞ –≤ –∫—ç—à–µ"""
        if not self.redis_client:
            return False
        
        try:
            return await self.redis_client.exists(key) > 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞: {e}")
            return False
    
    async def cache_invalidate_pattern(self, pattern: str) -> int:
        """–ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É"""
        if not self.redis_client:
            return 0
        
        try:
            keys = await self.redis_client.keys(pattern)
            if keys:
                return await self.redis_client.delete(*keys)
            return 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞: {e}")
            return 0

# SQLAlchemy –º–æ–¥–µ–ª–∏
class TestModel(Base):
    """–ú–æ–¥–µ–ª—å —Ç–µ—Å—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    __tablename__ = "tests"
    
    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))
    name = Column(String, nullable=False)
    description = Column(Text)
    test_type = Column(String, nullable=False)
    status = Column(String, default="active")
    priority = Column(String, default="medium")
    environment = Column(String, default="development")
    config = Column(JSON)
    created_by = Column(String, nullable=False)
    created_at = Column(DateTime, default=func.now())
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())
    is_active = Column(Boolean, default=True)

class TestExecutionModel(Base):
    """–ú–æ–¥–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    __tablename__ = "test_executions"
    
    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))
    test_id = Column(String, ForeignKey("tests.id"), nullable=False)
    status = Column(String, default="pending")
    started_at = Column(DateTime)
    completed_at = Column(DateTime)
    duration = Column(Integer)  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    result = Column(JSON)
    error_message = Column(Text)
    logs = Column(Text)
    metrics = Column(JSON)
    created_by = Column(String, nullable=False)
    created_at = Column(DateTime, default=func.now())

class TestSuiteModel(Base):
    """–ú–æ–¥–µ–ª—å –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    __tablename__ = "test_suites"
    
    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))
    name = Column(String, nullable=False)
    description = Column(Text)
    test_ids = Column(JSON)  # —Å–ø–∏—Å–æ–∫ ID —Ç–µ—Å—Ç–æ–≤
    config = Column(JSON)
    created_by = Column(String, nullable=False)
    created_at = Column(DateTime, default=func.now())
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())
    is_active = Column(Boolean, default=True)

class TestReportModel(Base):
    """–ú–æ–¥–µ–ª—å –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    __tablename__ = "test_reports"
    
    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))
    execution_id = Column(String, ForeignKey("test_executions.id"), nullable=False)
    report_type = Column(String, default="detailed")
    content = Column(JSON)
    summary = Column(Text)
    recommendations = Column(JSON)
    created_at = Column(DateTime, default=func.now())

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
_db_instance: Optional[Database] = None

async def get_database() -> Database:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    global _db_instance
    
    if _db_instance is None:
        _db_instance = Database()
        await _db_instance.initialize()
    
    return _db_instance

async def close_database():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    global _db_instance
    
    if _db_instance:
        await _db_instance.close()
        _db_instance = None

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
class DatabaseUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    def generate_id() -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID"""
        return str(uuid.uuid4())
    
    @staticmethod
    def format_datetime(dt: datetime) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
        return dt.isoformat() if dt else None
    
    @staticmethod
    def parse_datetime(dt_str: str) -> datetime:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            return datetime.fromisoformat(dt_str.replace('Z', '+00:00'))
        except ValueError:
            return datetime.now()
    
    @staticmethod
    def sanitize_sql_identifier(identifier: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ SQL –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        import re
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π
        return re.sub(r'[^a-zA-Z0-9_]', '', identifier)
    
    @staticmethod
    def build_where_clause(filters: Dict[str, Any]) -> tuple:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ WHERE —É—Å–ª–æ–≤–∏—è –¥–ª—è SQL –∑–∞–ø—Ä–æ—Å–∞"""
        conditions = []
        params = {}
        
        for key, value in filters.items():
            if value is not None:
                safe_key = DatabaseUtils.sanitize_sql_identifier(key)
                param_name = f"param_{safe_key}"
                conditions.append(f"{safe_key} = :{param_name}")
                params[param_name] = value
        
        where_clause = " AND ".join(conditions) if conditions else "1=1"
        return where_clause, params

# –ú–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
class DatabaseMigrations:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, db: Database):
        self.db = db
    
    async def create_migrations_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"""
        query = """
        CREATE TABLE IF NOT EXISTS migrations (
            id SERIAL PRIMARY KEY,
            version VARCHAR(50) UNIQUE NOT NULL,
            name VARCHAR(255) NOT NULL,
            applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        """
        await self.db.execute_query(query)
    
    async def get_applied_migrations(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π"""
        query = "SELECT version FROM migrations ORDER BY applied_at;"
        result = await self.db.execute_query(query)
        return [row["version"] for row in result]
    
    async def apply_migration(self, version: str, name: str, sql: str):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        try:
            await self.db.execute_query(sql)
            
            insert_query = """
            INSERT INTO migrations (version, name) VALUES (:version, :name);
            """
            await self.db.execute_query(insert_query, {
                "version": version,
                "name": name
            })
            
            logger.info(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {version} ({name}) –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ {version}: {e}")
            raise
    
    async def run_migrations(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–π"""
        await self.create_migrations_table()
        
        applied_migrations = await self.get_applied_migrations()
        
        # –°–ø–∏—Å–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–π (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è)
        migrations = [
            {
                "version": "001",
                "name": "Initial schema",
                "sql": """
                -- –ú–∏–≥—Ä–∞—Ü–∏—è —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ SQLAlchemy –º–æ–¥–µ–ª–∏
                """
            }
        ]
        
        for migration in migrations:
            if migration["version"] not in applied_migrations:
                await self.apply_migration(
                    migration["version"],
                    migration["name"],
                    migration["sql"]
                )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async def initialize_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        db = await get_database()
        
        # –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π
        migrations = DatabaseMigrations(db)
        await migrations.run_migrations()
        
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise 