# ========================================
# SEO Link Recommender - Makefile
# ========================================

.PHONY: help version get-version set-version tag-version release-version build test clean docs version-update version-sync

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
PYTHON := python3
VERSION_MANAGER := scripts/version_manager.py
SMART_CACHE := scripts/smart_docker_cache.py
PROFESSIONAL_BUILD := scripts/professional-build.sh

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN := \033[0;32m
YELLOW := \033[1;33m
RED := \033[0;31m
BLUE := \033[0;34m
NC := \033[0m # No Color

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
	@echo "$(GREEN)üöÄ SEO Link Recommender - Makefile$(NC)"
	@echo ""
	@echo "$(YELLOW)–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:$(NC)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-20s$(NC) %s\n", $$1, $$2}'

# ========================================
# üöÄ –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –°–ë–û–†–ö–ê –° BUILDKIT
# ========================================

buildkit: ## –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å BuildKit
	@echo "$(BLUE)üöÄ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å BuildKit...$(NC)"
	@$(PROFESSIONAL_BUILD)

buildkit-full: ## –ü–æ–ª–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å BuildKit + –∑–∞–ø—É—Å–∫ + –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
	@echo "$(BLUE)üöÄ –ü–æ–ª–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å BuildKit...$(NC)"
	@$(PROFESSIONAL_BUILD) -u -h

buildkit-backend: ## –°–±–æ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ backend —Å BuildKit
	@echo "$(BLUE)üöÄ –°–±–æ—Ä–∫–∞ backend —Å BuildKit...$(NC)"
	@$(PROFESSIONAL_BUILD) -s backend

buildkit-no-cache: ## –°–±–æ—Ä–∫–∞ —Å BuildKit –±–µ–∑ –∫–µ—à–∞
	@echo "$(BLUE)üöÄ –°–±–æ—Ä–∫–∞ —Å BuildKit –±–µ–∑ –∫–µ—à–∞...$(NC)"
	@$(PROFESSIONAL_BUILD) -n

buildkit-clean: ## –°–±–æ—Ä–∫–∞ —Å BuildKit + –æ—á–∏—Å—Ç–∫–∞
	@echo "$(BLUE)üöÄ –°–±–æ—Ä–∫–∞ —Å BuildKit + –æ—á–∏—Å—Ç–∫–∞...$(NC)"
	@$(PROFESSIONAL_BUILD) -c

buildkit-force: ## –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å BuildKit + –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
	@echo "$(BLUE)üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å BuildKit...$(NC)"
	@$(PROFESSIONAL_BUILD) -n -f

buildkit-analyze: ## –°–±–æ—Ä–∫–∞ —Å BuildKit + –∞–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑–æ–≤
	@echo "$(BLUE)üöÄ –°–±–æ—Ä–∫–∞ —Å BuildKit + –∞–Ω–∞–ª–∏–∑...$(NC)"
	@$(PROFESSIONAL_BUILD) -a

# ========================================
# –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Docker –∫–µ—à–µ–º
# ========================================

smart-build: ## –£–º–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å –∫–µ—à–µ–º
	@echo "$(GREEN)üß† –£–º–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å –∫–µ—à–µ–º...$(NC)"
	@$(PYTHON) $(SMART_CACHE) --compose-file config/docker-compose.yml

smart-build-force: ## –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —É–º–Ω–∞—è —Å–±–æ—Ä–∫–∞
	@echo "$(GREEN)üß† –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —É–º–Ω–∞—è —Å–±–æ—Ä–∫–∞...$(NC)"
	@$(PYTHON) $(SMART_CACHE) --compose-file config/docker-compose.yml --force

smart-build-service: ## –£–º–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
	@echo "$(GREEN)üß† –£–º–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ $(SERVICE)...$(NC)"
	@if [ -z "$(SERVICE)" ]; then \
		echo "$(RED)‚ùå –£–∫–∞–∂–∏—Ç–µ SERVICE=–∏–º—è_—Å–µ—Ä–≤–∏—Å–∞$(NC)"; \
		exit 1; \
	fi
	@$(PYTHON) $(SMART_CACHE) --compose-file config/docker-compose.yml --service $(SERVICE)

smart-cache-stats: ## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–º–Ω–æ–≥–æ –∫–µ—à–∞
	@echo "$(GREEN)üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–º–Ω–æ–≥–æ –∫–µ—à–∞...$(NC)"
	@$(PYTHON) $(SMART_CACHE) --stats

smart-cache-clean: ## –û—á–∏—Å—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –∫–µ—à–∞
	@echo "$(GREEN)üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –∫–µ—à–∞...$(NC)"
	@$(PYTHON) $(SMART_CACHE) --clean

smart-cache-reset: ## –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
	@echo "$(GREEN)üóëÔ∏è –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞...$(NC)"
	@rm -rf .docker_cache
	@echo "$(GREEN)‚úÖ –ö–µ—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω$(NC)"

# ========================================
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏—è–º–∏ (SemVer 2.0)
# ========================================

.PHONY: version version-current version-bump version-release version-prerelease version-set version-validate version-changelog

version: version-current
	@echo "üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏"

version-current:
	@echo "üîç –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è:"
	@$(PYTHON) $(VERSION_MANAGER) current

version-bump:
	@echo "üöÄ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏..."
	@if [ -z "$(TYPE)" ]; then \
		echo "‚ùå –£–∫–∞–∂–∏—Ç–µ TYPE=major|minor|patch"; \
		exit 1; \
	fi
	@$(PYTHON) $(VERSION_MANAGER) bump --type $(TYPE)

version-release:
	@echo "üéâ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞..."
	@$(PYTHON) $(VERSION_MANAGER) release --type $(or $(TYPE),patch)

version-prerelease:
	@echo "üîß –°–æ–∑–¥–∞–Ω–∏–µ prerelease..."
	@if [ -z "$(NAME)" ]; then \
		echo "‚ùå –£–∫–∞–∂–∏—Ç–µ NAME=–∏–º—è_prerelease"; \
		exit 1; \
	fi
	@$(PYTHON) $(VERSION_MANAGER) prerelease --prerelease $(NAME) --type $(or $(TYPE),rc)

version-set:
	@echo "‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ—Ä—Å–∏–∏..."
	@if [ -z "$(VERSION)" ]; then \
		echo "‚ùå –£–∫–∞–∂–∏—Ç–µ VERSION=X.Y.Z"; \
		exit 1; \
	fi
	@$(PYTHON) $(VERSION_MANAGER) set --version $(VERSION)

version-validate:
	@echo "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–µ—Ä—Å–∏–∏..."
	@if [ -z "$(VERSION)" ]; then \
		echo "‚ùå –£–∫–∞–∂–∏—Ç–µ VERSION=X.Y.Z"; \
		exit 1; \
	fi
	@$(PYTHON) $(VERSION_MANAGER) validate --version $(VERSION)

version-changelog:
	@echo "üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ changelog..."
	@if [ -z "$(CHANGES)" ]; then \
		echo "‚ùå –£–∫–∞–∂–∏—Ç–µ CHANGES=\"–∏–∑–º–µ–Ω–µ–Ω–∏–µ1 –∏–∑–º–µ–Ω–µ–Ω–∏–µ2\""; \
		exit 1; \
	fi
	@$(PYTHON) $(VERSION_MANAGER) changelog --changes $(CHANGES)

# ========================================
# –°–±–æ—Ä–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# ========================================

build: ## –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤ (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è)
	@echo "$(GREEN)üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤...$(NC)"
	docker-compose build

build-parallel: ## –°–±–æ—Ä–∫–∞ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
	@echo "$(GREEN)üî® –°–±–æ—Ä–∫–∞ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞...$(NC)"
	docker-compose -f docker-compose.parallel.yml build

build-no-cache: ## –°–±–æ—Ä–∫–∞ –±–µ–∑ –∫–µ—à–∞
	@echo "$(GREEN)üî® –°–±–æ—Ä–∫–∞ –±–µ–∑ –∫–µ—à–∞...$(NC)"
	docker-compose build --no-cache

build-service: ## –°–±–æ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
	@echo "$(GREEN)üî® –°–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ $(SERVICE)...$(NC)"
	@if [ -z "$(SERVICE)" ]; then \
		echo "$(RED)‚ùå –£–∫–∞–∂–∏—Ç–µ SERVICE=–∏–º—è_—Å–µ—Ä–≤–∏—Å–∞$(NC)"; \
		exit 1; \
	fi
	docker-compose build $(SERVICE)

# ========================================
# –ó–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
# ========================================

up: ## –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π)
	@echo "$(GREEN)üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã...$(NC)"
	docker-compose up -d

up-buildkit: ## –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å BuildKit
	@echo "$(BLUE)üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å BuildKit...$(NC)"
	docker-compose -f config/docker-compose.buildkit.yml up -d

up-parallel: ## –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
	@echo "$(GREEN)üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞...$(NC)"
	./run_parallel.sh

down: ## –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã
	@echo "$(GREEN)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...$(NC)"
	docker-compose down

down-buildkit: ## –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã BuildKit
	@echo "$(BLUE)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã BuildKit...$(NC)"
	docker-compose -f config/docker-compose.buildkit.yml down

restart: ## –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
	@echo "$(GREEN)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã...$(NC)"
	docker-compose restart

restart-buildkit: ## –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã BuildKit
	@echo "$(BLUE)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã BuildKit...$(NC)"
	docker-compose -f config/docker-compose.buildkit.yml restart

# ========================================
# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏
# ========================================

logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(GREEN)üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã...$(NC)"
	docker-compose logs -f

logs-buildkit: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã BuildKit
	@echo "$(BLUE)üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã BuildKit...$(NC)"
	docker-compose -f config/docker-compose.buildkit.yml logs -f

logs-backend: ## –õ–æ–≥–∏ backend
	@echo "$(GREEN)üìã –õ–æ–≥–∏ backend...$(NC)"
	docker-compose logs -f backend

logs-frontend: ## –õ–æ–≥–∏ frontend
	@echo "$(GREEN)üìã –õ–æ–≥–∏ frontend...$(NC)"
	docker-compose logs -f frontend

logs-docs: ## –õ–æ–≥–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
	@echo "$(GREEN)üìã –õ–æ–≥–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...$(NC)"
	docker-compose logs -f docs

logs-testing: ## –õ–æ–≥–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	@echo "$(GREEN)üìã –õ–æ–≥–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...$(NC)"
	docker-compose logs -f testing

# ========================================
# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# ========================================

test: ## –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
	@echo "$(GREEN)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...$(NC)"
	@cd backend && python3 -m pytest -v

test-frontend: ## –¢–µ—Å—Ç—ã frontend
	@echo "$(GREEN)üß™ –¢–µ—Å—Ç—ã frontend...$(NC)"
	@cd frontend && npm test

test-docs: ## –¢–µ—Å—Ç—ã –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
	@echo "$(GREEN)üß™ –¢–µ—Å—Ç—ã –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...$(NC)"
	@cd docs && make test

test-testing: ## –¢–µ—Å—Ç—ã –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	@echo "$(GREEN)üß™ –¢–µ—Å—Ç—ã –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...$(NC)"
	@cd testing && make test

test-e2e: ## E2E —Ç–µ—Å—Ç—ã
	@echo "$(GREEN)üß™ E2E —Ç–µ—Å—Ç—ã...$(NC)"
	@cd frontend && npm run test:e2e

# ========================================
# –û—á–∏—Å—Ç–∫–∞ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
# ========================================

clean: ## –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
	@echo "$(GREEN)üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...$(NC)"
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	rm -rf .pytest_cache/
	rm -rf htmlcov/
	rm -rf .coverage
	rm -rf dist/
	rm -rf build/

clean-docker: ## –û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤
	@echo "$(GREEN)üßπ –û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤...$(NC)"
	docker system prune -f
	docker builder prune -f

clean-docker-force: ## –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker
	@echo "$(RED)üßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker...$(NC)"
	docker system prune -af
	docker builder prune -af
	docker volume prune -f

# ========================================
# –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
# ========================================

docs: ## –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
	@echo "$(GREEN)üìö –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...$(NC)"
	@cd docs && make docs

docs-serve: ## –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
	@echo "$(GREEN)üìö –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...$(NC)"
	@cd docs && make serve

# ========================================
# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
# ========================================

deploy: ## –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω
	@echo "$(GREEN)üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω...$(NC)"
	@$(PROFESSIONAL_BUILD) -u -h -a

deploy-staging: ## –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ staging
	@echo "$(YELLOW)üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ staging...$(NC)"
	@$(PROFESSIONAL_BUILD) -s backend -u

# ========================================
# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
# ========================================

status: ## –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(GREEN)üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	docker-compose ps

status-buildkit: ## –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ BuildKit
	@echo "$(BLUE)üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ BuildKit...$(NC)"
	docker-compose -f config/docker-compose.buildkit.yml ps

health: ## –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(GREEN)üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	@$(PROFESSIONAL_BUILD) --help | grep health-check || echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: make buildkit-full"

# ========================================
# –£—Ç–∏–ª–∏—Ç—ã
# ========================================

shell-backend: ## Shell –≤ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
	@echo "$(GREEN)üêö Shell –≤ backend...$(NC)"
	docker-compose exec backend /bin/bash

shell-frontend: ## Shell –≤ frontend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
	@echo "$(GREEN)üêö Shell –≤ frontend...$(NC)"
	docker-compose exec frontend /bin/sh

shell-db: ## Shell –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	@echo "$(GREEN)üêö Shell –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	docker-compose exec db psql -U seo_user -d seo_db

# ========================================
# –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
# ========================================

backup: ## –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
	@echo "$(GREEN)üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ...$(NC)"
	docker-compose exec db pg_dump -U seo_user seo_db > backup_$(shell date +%Y%m%d_%H%M%S).sql

restore: ## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
	@echo "$(GREEN)üíæ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	@if [ -z "$(FILE)" ]; then \
		echo "$(RED)‚ùå –£–∫–∞–∂–∏—Ç–µ FILE=–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É.sql$(NC)"; \
		exit 1; \
	fi
	docker-compose exec -T db psql -U seo_user -d seo_db < $(FILE) 