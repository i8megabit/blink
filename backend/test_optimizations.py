"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π reLink
"""

import asyncio
import logging
import time
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def test_intelligent_model_router():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞ –º–æ–¥–µ–ª–µ–π"""
    logger.info("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞ –º–æ–¥–µ–ª–µ–π...")
    
    try:
        from app.llm.intelligent_model_router import IntelligentModelRouter, ModelType, TaskComplexity
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
        router = IntelligentModelRouter()
        
        # –¢–µ—Å—Ç 1: –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á
        simple_prompt = "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?"
        complex_prompt = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏"
        
        simple_complexity = router.analyze_task_complexity(simple_prompt)
        complex_complexity = router.analyze_task_complexity(complex_prompt)
        
        logger.info(f"–°–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {simple_complexity.value}")
        logger.info(f"–°–ª–æ–∂–Ω–æ—Å—Ç—å —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {complex_complexity.value}")
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã
        system_metrics = await router.get_system_metrics()
        logger.info(f"CPU: {system_metrics.cpu_usage}%, Memory: {system_metrics.memory_usage}%")
        
        # –¢–µ—Å—Ç 3: –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
        model_name, config = router.select_optimal_model(
            TaskComplexity.SIMPLE, 
            system_metrics
        )
        logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏: {model_name}")
        
        model_name, config = router.select_optimal_model(
            TaskComplexity.COMPLEX, 
            system_metrics
        )
        logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å –¥–ª—è —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–∏: {model_name}")
        
        # –¢–µ—Å—Ç 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞
        stats = router.get_router_stats()
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞: {stats['usage_stats']}")
        
        logger.info("‚úÖ –¢–µ—Å—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞ –º–æ–¥–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        return False


async def test_advanced_chromadb_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ ChromaDB"""
    logger.info("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ ChromaDB...")
    
    try:
        from app.llm.advanced_chromadb_service import AdvancedChromaDBService
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
        service = AdvancedChromaDBService(
            persist_directory="./test_chroma_db",
            enable_compression=True,
            enable_sharding=True
        )
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        health = await service.health_check()
        logger.info(f"–°—Ç–∞—Ç—É—Å ChromaDB: {health['status']}")
        
        # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        collection_name = "test_collection"
        try:
            collection = await service.create_collection(collection_name)
            logger.info(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_name} —Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            logger.warning(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {e}")
        
        # –¢–µ—Å—Ç 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        test_documents = [
            "–≠—Ç–æ –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã ChromaDB",
            "–í—Ç–æ—Ä–æ–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏",
            "–¢—Ä–µ—Ç–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –æ–ø–∏—Å—ã–≤–∞–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å–∏—Å—Ç–µ–º—ã"
        ]
        
        test_metadatas = [
            {"type": "test", "category": "optimization"},
            {"type": "test", "category": "architecture"},
            {"type": "test", "category": "system"}
        ]
        
        try:
            ids = await service.add_documents(
                collection_name=collection_name,
                documents=test_documents,
                metadatas=test_metadatas
            )
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(ids)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        
        # –¢–µ—Å—Ç 4: –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        try:
            results = await service.query(
                collection_name=collection_name,
                query_texts=["–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"],
                n_results=2
            )
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(results.get('documents', []))}")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        
        # –¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        stats = service.get_performance_stats()
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ChromaDB: {stats}")
        
        logger.info("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ ChromaDB –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ChromaDB: {e}")
        return False


async def test_optimization_manager():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π"""
    logger.info("‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π...")
    
    try:
        from app.llm.optimization_manager import OptimizationManager, OptimizationLevel
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        manager = OptimizationManager(
            optimization_level=OptimizationLevel.STANDARD,
            auto_optimize=False  # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        )
        
        # –¢–µ—Å—Ç 1: –ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        await manager.start()
        logger.info("–ú–µ–Ω–µ–¥–∂–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –∑–∞–ø—É—â–µ–Ω")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
        health = await manager.get_system_health()
        logger.info(f"CPU: {health.cpu_usage}%, Memory: {health.memory_usage}%")
        logger.info(f"Ollama: {health.ollama_status}, ChromaDB: {health.chromadb_status}")
        
        # –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        try:
            result = await manager.process_request(
                prompt="–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏",
                context="–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–∞–∂–Ω–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"
            )
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {result['total_processing_time']:.2f} —Å–µ–∫")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω): {e}")
        
        # –¢–µ—Å—Ç 4: –ú–µ—Ç—Ä–∏–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        metrics = manager.get_optimization_metrics()
        logger.info(f"–°–∫–æ—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {metrics.optimization_score:.2f}")
        logger.info(f"–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–µ—à–∞: {metrics.cache_hit_rate:.2f}")
        
        # –¢–µ—Å—Ç 5: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        await manager.optimize_system()
        logger.info("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # –¢–µ—Å—Ç 6: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        await manager.stop()
        logger.info("–ú–µ–Ω–µ–¥–∂–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        logger.info("‚úÖ –¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {e}")
        return False


async def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    logger.info("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
    
    try:
        import httpx
        
        base_url = "http://localhost:8000"
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
        async with httpx.AsyncClient() as client:
            try:
                response = await client.get(f"{base_url}/api/v1/optimization/health")
                if response.status_code == 200:
                    data = response.json()
                    logger.info(f"–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è: {data['data']['services']}")
                else:
                    logger.warning(f"–û—à–∏–±–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: {response.status_code}")
            except Exception as e:
                logger.warning(f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω): {e}")
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        async with httpx.AsyncClient() as client:
            try:
                response = await client.get(f"{base_url}/api/v1/optimization/metrics")
                if response.status_code == 200:
                    data = response.json()
                    logger.info(f"–ú–µ—Ç—Ä–∏–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã")
                else:
                    logger.warning(f"–û—à–∏–±–∫–∞ –º–µ—Ç—Ä–∏–∫: {response.status_code}")
            except Exception as e:
                logger.warning(f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        logger.info("‚úÖ –¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
        return False


async def run_performance_benchmark():
    """–ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    logger.info("üèÉ –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    try:
        from app.llm.optimization_manager import OptimizationManager, OptimizationLevel
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        manager = OptimizationManager(
            optimization_level=OptimizationLevel.ADVANCED,
            auto_optimize=False
        )
        
        await manager.start()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        test_requests = [
            "–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            "–°—Ä–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã",
            "–°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ —Å —É—á–µ—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏, –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤"
        ]
        
        results = []
        
        for i, prompt in enumerate(test_requests):
            start_time = time.time()
            
            try:
                result = await manager.process_request(prompt=prompt)
                processing_time = time.time() - start_time
                
                results.append({
                    "request_id": i + 1,
                    "prompt_length": len(prompt),
                    "processing_time": processing_time,
                    "model_used": result.get("llm_response", {}).get("model_used", "unknown"),
                    "success": True
                })
                
                logger.info(f"–ó–∞–ø—Ä–æ—Å {i+1}: {processing_time:.2f} —Å–µ–∫, –º–æ–¥–µ–ª—å: {result.get('llm_response', {}).get('model_used', 'unknown')}")
                
            except Exception as e:
                processing_time = time.time() - start_time
                results.append({
                    "request_id": i + 1,
                    "prompt_length": len(prompt),
                    "processing_time": processing_time,
                    "error": str(e),
                    "success": False
                })
                
                logger.warning(f"–ó–∞–ø—Ä–æ—Å {i+1} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        successful_requests = [r for r in results if r["success"]]
        failed_requests = [r for r in results if not r["success"]]
        
        if successful_requests:
            avg_time = sum(r["processing_time"] for r in successful_requests) / len(successful_requests)
            min_time = min(r["processing_time"] for r in successful_requests)
            max_time = max(r["processing_time"] for r in successful_requests)
            
            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–Ω—á–º–∞—Ä–∫–∞:")
            logger.info(f"   –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {len(successful_requests)}")
            logger.info(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {len(failed_requests)}")
            logger.info(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.2f} —Å–µ–∫")
            logger.info(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {min_time:.2f} —Å–µ–∫")
            logger.info(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {max_time:.2f} —Å–µ–∫")
        
        await manager.stop()
        
        logger.info("‚úÖ –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π reLink")
    
    test_results = {}
    
    # –¢–µ—Å—Ç 1: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –º–æ–¥–µ–ª–µ–π
    test_results["model_router"] = await test_intelligent_model_router()
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–µ—Ä–≤–∏—Å ChromaDB
    test_results["chromadb_service"] = await test_advanced_chromadb_service()
    
    # –¢–µ—Å—Ç 3: –ú–µ–Ω–µ–¥–∂–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
    test_results["optimization_manager"] = await test_optimization_manager()
    
    # –¢–µ—Å—Ç 4: API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    test_results["api_endpoints"] = await test_api_endpoints()
    
    # –¢–µ—Å—Ç 5: –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    test_results["performance_benchmark"] = await run_performance_benchmark()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    for test_name, result in test_results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        logger.info(f"   {test_name}: {status}")
    
    passed_tests = sum(test_results.values())
    total_tests = len(test_results)
    
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed_tests == total_tests:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")


if __name__ == "__main__":
    asyncio.run(main()) 