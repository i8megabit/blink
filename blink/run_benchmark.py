#!/usr/bin/env python3
"""
üöÄ –ó–ê–ü–£–°–ö LLM –ë–ï–ù–ß–ú–ê–†–ö–ê
–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from llm_benchmark import LLMBenchmark, BenchmarkMetrics

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞."""
    
    print("üèÜ LLM –¢–£–†–ë–û-–ë–ï–ù–ß–ú–ê–†–ö –¥–ª—è Apple M4")
    print("üéØ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ SEO –∑–∞–¥–∞—á–∞—Ö")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –±–µ–Ω—á–º–∞—Ä–∫
    benchmark = LLMBenchmark("http://localhost:8000")
    
    # –ú–æ–¥–µ–ª–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–ª—É—á—à–∏–µ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
    models_to_test = [
        "qwen2.5:7b-turbo",           # –ë–∞–∑–æ–≤–∞—è —Ç—É—Ä–±–æ –º–æ–¥–µ–ª—å (4.9—Å)
        "qwen2.5:7b-instruct-turbo", # –ß–ï–ú–ü–ò–û–ù! Instruct —Ç—É—Ä–±–æ –º–æ–¥–µ–ª—å (4.1—Å) üèÜ
        "qwen2.5:7b-instruct",       # –ë–∞–∑–æ–≤–∞—è instruct –º–æ–¥–µ–ª—å (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
    ]
    
    print(f"üìã –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {models_to_test}")
    print(f"üß™ –¢–µ—Å—Ç–æ–≤—ã—Ö –∫–µ–π—Å–æ–≤: {len(benchmark.test_cases)}")
    print(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏–π –Ω–∞ –º–æ–¥–µ–ª—å: 3")
    print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–Ω—á–º–∞—Ä–∫
    try:
        results = await benchmark.compare_models(models_to_test, iterations=3)
        
        print("\n" + "üéâ" * 20)
        print("–ë–ï–ù–ß–ú–ê–†–ö –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print("üéâ" * 20)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
        print("\nüìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:")
        for model_name, metrics in results.items():
            print(f"‚Ä¢ {model_name}: {metrics.avg_response_time:.2f}—Å, –∫–∞—á–µ—Å—Ç–≤–æ {metrics.avg_quality_score:.1f}")
        
        return results
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ë–µ–Ω—á–º–∞—Ä–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±—ç–∫–µ–Ω–¥–∞
    import httpx
    
    async def check_backend():
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.get("http://localhost:8000/api/v1/health")
                if response.status_code == 200:
                    print("‚úÖ –ë—ç–∫–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω")
                    return True
                else:
                    print(f"‚ùå –ë—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                    return False
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±—ç–∫–µ–Ω–¥—É: {e}")
            print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–ø—É—â–µ–Ω: docker-compose up -d")
            return False
    
    async def run_full_benchmark():
        if await check_backend():
            await main()
        else:
            sys.exit(1)
    
    asyncio.run(run_full_benchmark()) 