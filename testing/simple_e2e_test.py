#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ChromaDB –±–µ–∑ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
"""

import requests
import time
import json

def test_chromadb():
    """–¢–µ—Å—Ç ChromaDB"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ heartbeat
        response = requests.get("http://localhost:8006/api/v2/heartbeat", timeout=5)
        if response.status_code == 200:
            print("‚úÖ ChromaDB heartbeat: OK")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ tenant –∏ database
            response = requests.get("http://localhost:8006/api/v2/auth/identity", timeout=5)
            if response.status_code == 200:
                identity = response.json()
                tenant = identity.get('tenant', 'default_tenant')
                database = identity.get('databases', ['default_database'])[0]
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—É—Ç–µ–º
                collections_url = f"http://localhost:8006/api/v2/tenants/{tenant}/databases/{database}/collections"
                response = requests.get(collections_url, timeout=5)
                if response.status_code == 200:
                    collections = response.json()
                    print(f"‚úÖ ChromaDB collections: –Ω–∞–π–¥–µ–Ω–æ {len(collections)} –∫–æ–ª–ª–µ–∫—Ü–∏–π")
                    return True
                else:
                    print(f"‚ùå ChromaDB collections: –æ—à–∏–±–∫–∞ {response.status_code}")
                    return False
            else:
                print(f"‚ùå ChromaDB identity: –æ—à–∏–±–∫–∞ {response.status_code}")
                return False
        else:
            print(f"‚ùå ChromaDB heartbeat: –æ—à–∏–±–∫–∞ {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå ChromaDB: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - {e}")
        return False

def test_ollama():
    """–¢–µ—Å—Ç Ollama"""
    try:
        response = requests.get("http://localhost:11434/api/tags", timeout=5)
        if response.status_code == 200:
            data = response.json()
            models_count = len(data.get('models', []))
            print(f"‚úÖ Ollama API: –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            if models_count > 0:
                model_names = [model.get('name', '') for model in data.get('models', [])]
                print(f"‚úÖ Ollama –º–æ–¥–µ–ª–∏: –Ω–∞–π–¥–µ–Ω–æ {models_count} –º–æ–¥–µ–ª–µ–π")
                print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {', '.join(model_names[:3])}{'...' if len(model_names) > 3 else ''}")
                return True
            else:
                print(f"‚ö†Ô∏è  Ollama –º–æ–¥–µ–ª–∏: –ù–ï–¢ –ú–û–î–ï–õ–ï–ô! –°–∏—Å—Ç–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                return False
        else:
            print(f"‚ùå Ollama: –æ—à–∏–±–∫–∞ {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Ollama: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - {e}")
        return False

def test_relink():
    """–¢–µ—Å—Ç relink service"""
    try:
        response = requests.get("http://localhost:8003/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ relink service: OK")
            return True
        else:
            print(f"‚ùå relink service: –æ—à–∏–±–∫–∞ {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå relink service: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - {e}")
        return False

def test_router():
    """–¢–µ—Å—Ç router"""
    try:
        response = requests.get("http://localhost:8001/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ router: OK")
            return True
        else:
            print(f"‚ùå router: –æ—à–∏–±–∫–∞ {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå router: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - {e}")
        return False

def test_llm_tuning():
    """–¢–µ—Å—Ç LLM tuning service"""
    try:
        response = requests.get("http://localhost:8002/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ LLM tuning service: OK")
            return True
        else:
            print(f"‚ùå LLM tuning service: –æ—à–∏–±–∫–∞ {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå LLM tuning service: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ChromaDB –±–µ–∑ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏")
    print("=" * 60)
    
    tests = [
        ("ChromaDB", test_chromadb),
        ("Ollama", test_ollama),
        ("relink service", test_relink),
        ("router", test_router),
        ("LLM tuning service", test_llm_tuning),
    ]
    
    results = {}
    successful = 0
    
    for name, test_func in tests:
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {name}...")
        result = test_func()
        results[name] = result
        if result:
            successful += 1
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {successful}/{len(tests)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful/len(tests)*100):.1f}%")
    
    if successful == len(tests):
        print("üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏–º–µ—é—Ç –ø—Ä–æ–±–ª–µ–º—ã")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    report = {
        "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
        "total_tests": len(tests),
        "successful_tests": successful,
        "success_rate": (successful/len(tests)*100),
        "results": results
    }
    
    filename = f"simple_test_report_{time.strftime('%Y%m%d_%H%M%S')}.json"
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {filename}")

if __name__ == "__main__":
    main() 