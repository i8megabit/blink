"""
üîó –°–µ—Ä–≤–∏—Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–∏
"""

import asyncio
import logging
from typing import List, Dict, Any, Optional
from datetime import datetime
from collections import defaultdict
import re

from ..models import InternalLink, LinkRecommendation, LinkType
from bootstrap.config import get_settings

logger = logging.getLogger(__name__)

class InternalLinkingService:
    """–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫"""
    
    def __init__(self):
        self.settings = get_settings()
        self.logger = logging.getLogger(__name__)
    
    async def analyze_domain(
        self, 
        domain: str,
        llm_router=None,
        rag_service=None,
        ollama_client=None
    ) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è –¥–æ–º–µ–Ω–∞"""
        
        try:
            self.logger.info(f"–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è –¥–æ–º–µ–Ω–∞: {domain}")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å—Ç–∞—Ö (–∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö)
            posts = await self._get_domain_posts(domain)
            
            if not posts:
                return {
                    "status": "warning",
                    "message": f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –¥–æ–º–µ–Ω–∞ {domain}",
                    "domain": domain,
                    "analysis_date": datetime.now().isoformat()
                }
            
            # –ê–Ω–∞–ª–∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫
            internal_links_analysis = await self._analyze_internal_links(posts)
            
            # –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ LLM (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            llm_analysis = []
            if llm_router:
                llm_analysis = await self._analyze_with_llm(posts, domain, llm_router)
            
            # –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ RAG (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            rag_analysis = []
            if rag_service:
                rag_analysis = await self._analyze_with_rag(posts, domain, rag_service)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            recommendations = await self._generate_recommendations(
                posts, internal_links_analysis, llm_analysis, rag_analysis
            )
            
            # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
            metrics = await self._calculate_metrics(posts, internal_links_analysis)
            
            return {
                "status": "success",
                "domain": domain,
                "analysis_date": datetime.now().isoformat(),
                "posts_analyzed": len(posts),
                "internal_links_found": len(internal_links_analysis),
                "recommendations": recommendations,
                "metrics": metrics,
                "llm_analysis": llm_analysis,
                "rag_analysis": rag_analysis
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–º–µ–Ω–∞ {domain}: {e}")
            raise
    
    async def generate_recommendations(
        self,
        domain: str,
        llm_router=None,
        rag_service=None,
        ollama_client=None
    ) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º —Å—Å—ã–ª–∫–∞–º"""
        
        try:
            posts = await self._get_domain_posts(domain)
            if not posts:
                return []
            
            # –ê–Ω–∞–ª–∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫
            internal_links_analysis = await self._analyze_internal_links(posts)
            
            # –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π –±–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫
            posts_without_links = []
            for post in posts:
                content_lower = post.get('content', '').lower()
                has_internal_links = any(
                    other_post.get('title', '').lower() in content_lower 
                    for other_post in posts 
                    if other_post.get('id') != post.get('id')
                )
                
                if not has_internal_links:
                    posts_without_links.append(post)
            
            recommendations = []
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫
            if posts_without_links:
                recommendations.append({
                    "type": "internal_linking",
                    "priority": "high",
                    "title": "–î–æ–±–∞–≤–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏",
                    "description": f"–ù–∞–π–¥–µ–Ω–æ {len(posts_without_links)} —Å—Ç–∞—Ç–µ–π –±–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫",
                    "details": [
                        {
                            "post_title": post.get('title', ''),
                            "post_url": post.get('link', ''),
                            "suggested_links": [
                                other_post.get('title', '') 
                                for other_post in posts[:3] 
                                if other_post.get('id') != post.get('id')
                            ]
                        }
                        for post in posts_without_links[:5]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                    ]
                })
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Å—ã–ª–æ–∫
            if internal_links_analysis:
                recommendations.append({
                    "type": "link_optimization",
                    "priority": "medium",
                    "title": "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Å—ã–ª–∫–∏",
                    "description": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(internal_links_analysis)} –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫",
                    "details": {
                        "total_links": len(internal_links_analysis),
                        "avg_links_per_post": len(internal_links_analysis) / len(posts),
                        "recommendation": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∫–æ—Ä–æ–≤"
                    }
                })
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–µ
            recommendations.append({
                "type": "semantic_clustering",
                "priority": "medium",
                "title": "–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ç–∞—Ç–µ–π",
                "description": "–°–æ–∑–¥–∞–π—Ç–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–ª–∞—Å—Ç–µ—Ä—ã –¥–ª—è –ª—É—á—à–µ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–∏",
                "details": {
                    "total_posts": len(posts),
                    "recommendation": "–ì—Ä—É–ø–ø–∏—Ä—É–π—Ç–µ —Å—Ç–∞—Ç—å–∏ –ø–æ —Ç–µ–º–∞–º –∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏"
                }
            })
            
            return recommendations
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            return []
    
    async def _get_domain_posts(self, domain: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –¥–æ–º–µ–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ë–î)"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        return [
            {
                "id": 1,
                "title": "–ö–∞–∫ –≤—ã—Ä–∞—â–∏–≤–∞—Ç—å –ø–æ–º–∏–¥–æ—Ä—ã",
                "content": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—é —Ç–æ–º–∞—Ç–æ–≤ –≤ –¥–æ–º–∞—à–Ω–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö...",
                "link": f"https://{domain}/tomatoes",
                "content_type": "guide"
            },
            {
                "id": 2,
                "title": "–õ—É—á—à–∏–µ —Å–æ—Ä—Ç–∞ –æ–≥—É—Ä—Ü–æ–≤",
                "content": "–û–±–∑–æ—Ä –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–æ—Ä—Ç–æ–≤ –æ–≥—É—Ä—Ü–æ–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –≥—Ä—É–Ω—Ç–∞...",
                "link": f"https://{domain}/cucumbers",
                "content_type": "review"
            },
            {
                "id": 3,
                "title": "–£—Ö–æ–¥ –∑–∞ —Å–∞–¥–æ–º –≤–µ—Å–Ω–æ–π",
                "content": "–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –≤ —Å–∞–¥—É –≤ –≤–µ—Å–µ–Ω–Ω–∏–π –ø–µ—Ä–∏–æ–¥...",
                "link": f"https://{domain}/spring-garden",
                "content_type": "guide"
            }
        ]
    
    async def _analyze_internal_links(self, posts: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏"""
        internal_links = []
        
        for post in posts:
            content = post.get('content', '')
            post_title = post.get('title', '')
            
            # –ü–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥—Ä—É–≥–∏—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
            for other_post in posts:
                if other_post.get('id') == post.get('id'):
                    continue
                
                other_title = other_post.get('title', '')
                if other_title.lower() in content.lower():
                    internal_links.append({
                        "source_post_id": post.get('id'),
                        "source_post_title": post_title,
                        "target_post_id": other_post.get('id'),
                        "target_post_title": other_title,
                        "link_type": "implicit",
                        "strength": 1.0
                    })
        
        return internal_links
    
    async def _analyze_with_llm(
        self, 
        posts: List[Dict[str, Any]], 
        domain: str,
        llm_router
    ) -> List[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ LLM"""
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è LLM
            posts_data = []
            for post in posts:
                posts_data.append({
                    'title': post.get('title', ''),
                    'content': post.get('content', ''),
                    'link': post.get('link', ''),
                    'content_type': post.get('content_type', '')
                })
            
            # –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ LLM Router
            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç–∞—Ç—å–∏ —Å —Å–∞–π—Ç–∞ {domain} –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–µ:
            
            –°—Ç–∞—Ç—å–∏:
            {posts_data}
            
            –ü—Ä–µ–¥–ª–æ–∂–∏:
            1. –ö–∞–∫–∏–µ —Å—Ç–∞—Ç—å–∏ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
            2. –ö–∞–∫–∏–µ –∞–Ω–∫–æ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å—Å—ã–ª–æ–∫
            3. –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫
            """
            
            llm_result = await llm_router.route_request(prompt)
            
            return [{
                "type": "llm_analysis",
                "content": llm_result.get('response', ''),
                "confidence": llm_result.get('confidence', 0.8)
            }]
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ LLM –∞–Ω–∞–ª–∏–∑–µ: {e}")
            return []
    
    async def _analyze_with_rag(
        self, 
        posts: List[Dict[str, Any]], 
        domain: str,
        rag_service
    ) -> List[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ RAG"""
        try:
            # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ RAG
            query = f"internal linking best practices for {domain}"
            rag_results = await rag_service.search(query, top_k=5)
            
            return [{
                "type": "rag_analysis",
                "content": result.get('content', ''),
                "source": result.get('source', ''),
                "relevance": result.get('relevance', 0.0)
            } for result in rag_results]
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ RAG –∞–Ω–∞–ª–∏–∑–µ: {e}")
            return []
    
    async def _generate_recommendations(
        self,
        posts: List[Dict[str, Any]],
        internal_links_analysis: List[Dict[str, Any]],
        llm_analysis: List[Dict[str, Any]],
        rag_analysis: List[Dict[str, Any]]
    ) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤"""
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫
        posts_without_links = []
        for post in posts:
            has_links = any(
                link['source_post_id'] == post.get('id') 
                for link in internal_links_analysis
            )
            if not has_links:
                posts_without_links.append(post)
        
        if posts_without_links:
            recommendations.append({
                "type": "internal_linking",
                "priority": "high",
                "title": "–î–æ–±–∞–≤–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏",
                "description": f"–ù–∞–π–¥–µ–Ω–æ {len(posts_without_links)} —Å—Ç–∞—Ç–µ–π –±–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫",
                "details": [
                    {
                        "post_title": post.get('title', ''),
                        "post_url": post.get('link', ''),
                        "suggested_links": [
                            other_post.get('title', '') 
                            for other_post in posts[:3] 
                            if other_post.get('id') != post.get('id')
                        ]
                    }
                    for post in posts_without_links[:5]
                ]
            })
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ LLM –∞–Ω–∞–ª–∏–∑–∞
        for analysis in llm_analysis:
            if analysis.get('content'):
                recommendations.append({
                    "type": "llm_recommendation",
                    "priority": "medium",
                    "title": "AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è",
                    "description": analysis.get('content', '')[:200] + "...",
                    "confidence": analysis.get('confidence', 0.8)
                })
        
        return recommendations
    
    async def _calculate_metrics(
        self,
        posts: List[Dict[str, Any]],
        internal_links_analysis: List[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–∏"""
        total_posts = len(posts)
        total_links = len(internal_links_analysis)
        
        # –ü–æ—Å—Ç—ã —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
        posts_with_links = set(link['source_post_id'] for link in internal_links_analysis)
        posts_without_links = total_posts - len(posts_with_links)
        
        # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø–æ—Å—Ç
        avg_links_per_post = total_links / total_posts if total_posts > 0 else 0
        
        # –ü–æ–∫—Ä—ã—Ç–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
        coverage_percentage = (len(posts_with_links) / total_posts * 100) if total_posts > 0 else 0
        
        return {
            "total_posts": total_posts,
            "total_internal_links": total_links,
            "posts_with_links": len(posts_with_links),
            "posts_without_links": posts_without_links,
            "avg_links_per_post": round(avg_links_per_post, 2),
            "coverage_percentage": round(coverage_percentage, 2),
            "link_density_score": round(total_links / max(total_posts, 1), 2)
        } 