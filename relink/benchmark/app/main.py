"""
üöÄ –ì–õ–ê–í–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ë–ï–ù–ß–ú–ê–†–ö –ú–ò–ö–†–û–°–ï–†–í–ò–°–ê
FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ LLM –º–æ–¥–µ–ª–µ–π
"""

import asyncio
import time
from datetime import datetime
from typing import List, Optional
from contextlib import asynccontextmanager

from fastapi import FastAPI, HTTPException, Depends, BackgroundTasks, Query, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import structlog
import uvicorn

from .config import settings, BENCHMARK_TYPES
from .models import (
    BenchmarkRequest, BenchmarkResponse, BenchmarkListResponse, ErrorResponse,
    HealthCheck, CacheStats, PerformanceStats, BenchmarkFilterRequest,
    ExportRequest, ExportResponse, ComparisonResponse
)
from .services import get_benchmark_service
from .cache import get_cache, get_cache_stats

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.processors.JSONRenderer()
    ],
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

logger = structlog.get_logger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
start_time = time.time()
active_connections: List[WebSocket] = []


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    # –ó–∞–ø—É—Å–∫
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Benchmark Service")
    logger.info(f"–í–µ—Ä—Å–∏—è: {settings.version}")
    logger.info(f"–ü–æ—Ä—Ç: {settings.port}")
    logger.info(f"Debug: {settings.debug}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    benchmark_service = await get_benchmark_service()
    cache = await get_cache()
    
    yield
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Benchmark Service")
    await cache.disconnect()


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="üöÄ Benchmark Service",
    description="–ú–æ—â–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ LLM –º–æ–¥–µ–ª–µ–π",
    version=settings.version,
    docs_url="/docs",
    redoc_url="/redoc",
    lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
@app.middleware("http")
async def log_requests(request, call_next):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤."""
    start_time = time.time()
    
    response = await call_next(request)
    
    process_time = time.time() - start_time
    logger.info(
        "HTTP Request",
        method=request.method,
        url=str(request.url),
        status_code=response.status_code,
        process_time=process_time
    )
    
    return response


# WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä
class ConnectionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
    
    def __init__(self):
        self.active_connections: List[WebSocket] = []
    
    async def connect(self, websocket: WebSocket):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞."""
        await websocket.accept()
        self.active_connections.append(websocket)
        logger.info(f"WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω. –í—Å–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(self.active_connections)}")
    
    def disconnect(self, websocket: WebSocket):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞."""
        if websocket in self.active_connections:
            self.active_connections.remove(websocket)
        logger.info(f"WebSocket –æ—Ç–∫–ª—é—á–µ–Ω. –í—Å–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(self.active_connections)}")
    
    async def send_personal_message(self, message: str, websocket: WebSocket):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        await websocket.send_text(message)
    
    async def broadcast(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º."""
        for connection in self.active_connections:
            try:
                await connection.send_text(message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                self.disconnect(connection)


manager = ConnectionManager()


# API Endpoints

@app.get("/", response_model=dict)
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç."""
    return {
        "service": "Benchmark Service",
        "version": settings.version,
        "status": "running",
        "docs": "/docs",
        "health": "/health"
    }


@app.get("/health", response_model=HealthCheck)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞."""
    uptime = time.time() - start_time
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    services = {}
    
    try:
        cache = await get_cache()
        await cache.connect()
        services["redis"] = "healthy"
    except Exception as e:
        services["redis"] = f"unhealthy: {str(e)}"
    
    try:
        benchmark_service = await get_benchmark_service()
        services["benchmark_service"] = "healthy"
    except Exception as e:
        services["benchmark_service"] = f"unhealthy: {str(e)}"
    
    return HealthCheck(
        status="healthy" if all("healthy" in status for status in services.values()) else "degraded",
        timestamp=datetime.utcnow(),
        version=settings.version,
        uptime=uptime,
        services=services
    )


@app.post("/benchmark", response_model=BenchmarkResponse)
async def create_benchmark(
    request: BenchmarkRequest,
    background_tasks: BackgroundTasks
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞."""
    try:
        logger.info(f"–ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞: {request.name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache = await get_cache()
        cache_key = f"benchmark:{request.name}:{':'.join(request.models)}"
        
        if not request.parameters.get('force_refresh'):
            cached_result = await cache.get(cache_key)
            if cached_result:
                logger.info("–í–æ–∑–≤—Ä–∞—â–µ–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                return BenchmarkResponse(
                    success=True,
                    data=cached_result,
                    message="–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫—ç—à–∞"
                )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–Ω—á–º–∞—Ä–∫ –≤ —Ñ–æ–Ω–µ
        benchmark_service = await get_benchmark_service()
        
        async def run_benchmark_task():
            """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–µ–Ω—á–º–∞—Ä–∫–∞."""
            try:
                results = await benchmark_service.run_benchmark(request)
                
                # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                for result in results:
                    await cache.set_benchmark_result(
                        str(result.benchmark_id),
                        result.dict(),
                        ttl=settings.cache_ttl
                    )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç–æ–≤
                await manager.broadcast(f"Benchmark {request.name} completed")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–µ–Ω—á–º–∞—Ä–∫–∞: {e}")
                await manager.broadcast(f"Benchmark {request.name} failed: {str(e)}")
        
        background_tasks.add_task(run_benchmark_task)
        
        return BenchmarkResponse(
            success=True,
            message=f"–ë–µ–Ω—á–º–∞—Ä–∫ '{request.name}' –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–Ω—á–º–∞—Ä–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/benchmark/{benchmark_id}", response_model=BenchmarkResponse)
async def get_benchmark(benchmark_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞."""
    try:
        cache = await get_cache()
        result = await cache.get_benchmark_result(benchmark_id)
        
        if not result:
            raise HTTPException(status_code=404, detail="–ë–µ–Ω—á–º–∞—Ä–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return BenchmarkResponse(
            success=True,
            data=result,
            message="–†–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–Ω—á–º–∞—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω"
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ–Ω—á–º–∞—Ä–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/benchmarks", response_model=BenchmarkListResponse)
async def list_benchmarks(
    limit: int = Query(default=50, ge=1, le=1000),
    offset: int = Query(default=0, ge=0),
    benchmark_type: Optional[str] = None,
    model_name: Optional[str] = None,
    status: Optional[str] = None
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤."""
    try:
        benchmark_service = await get_benchmark_service()
        results = await benchmark_service.get_benchmark_history(limit + offset)
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        if benchmark_type:
            results = [r for r in results if r.benchmark_type == benchmark_type]
        if model_name:
            results = [r for r in results if model_name.lower() in r.model_name.lower()]
        if status:
            results = [r for r in results if r.status == status]
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        total = len(results)
        results = results[offset:offset + limit]
        
        return BenchmarkListResponse(
            success=True,
            data=results,
            total=total,
            page=offset // limit + 1,
            limit=limit,
            message=f"–ù–∞–π–¥–µ–Ω–æ {len(results)} –±–µ–Ω—á–º–∞—Ä–∫–æ–≤"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.delete("/benchmark/{benchmark_id}")
async def cancel_benchmark(benchmark_id: str):
    """–û—Ç–º–µ–Ω–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞."""
    try:
        benchmark_service = await get_benchmark_service()
        success = await benchmark_service.cancel_benchmark(benchmark_id)
        
        if not success:
            raise HTTPException(status_code=404, detail="–ë–µ–Ω—á–º–∞—Ä–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return {"success": True, "message": "–ë–µ–Ω—á–º–∞—Ä–∫ –æ—Ç–º–µ–Ω–µ–Ω"}
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –±–µ–Ω—á–º–∞—Ä–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/models")
async def list_models():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π."""
    try:
        return {
            "success": True,
            "data": settings.ollama_models,
            "message": f"–î–æ—Å—Ç—É–ø–Ω–æ {len(settings.ollama_models)} –º–æ–¥–µ–ª–µ–π"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/models/{model_name}/performance")
async def get_model_performance(model_name: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏."""
    try:
        benchmark_service = await get_benchmark_service()
        performance = await benchmark_service.get_model_performance(model_name)
        
        if not performance:
            raise HTTPException(status_code=404, detail="–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        return {
            "success": True,
            "data": performance,
            "message": f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ {model_name}"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/benchmark-types")
async def get_benchmark_types():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤."""
    try:
        return {
            "success": True,
            "data": BENCHMARK_TYPES,
            "message": f"–î–æ—Å—Ç—É–ø–Ω–æ {len(BENCHMARK_TYPES)} —Ç–∏–ø–æ–≤ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/stats/cache", response_model=CacheStats)
async def get_cache_statistics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞."""
    try:
        stats = await get_cache_stats()
        return CacheStats(**stats)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/stats/performance", response_model=PerformanceStats)
async def get_performance_statistics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    try:
        import psutil
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
        memory_usage_mb = psutil.virtual_memory().used / (1024 * 1024)
        cpu_usage_percent = psutil.cpu_percent(interval=1)
        
        # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
        active_benchmarks = len(manager.active_connections)
        completed_today = 0  # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å—á–µ—Ç
        avg_response_time = 0.5  # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å—á–µ—Ç
        total_requests = 0  # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å—á–µ—Ç
        error_rate = 0.05  # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å—á–µ—Ç
        
        return PerformanceStats(
            active_benchmarks=active_benchmarks,
            completed_today=completed_today,
            avg_response_time=avg_response_time,
            total_requests=total_requests,
            error_rate=error_rate,
            memory_usage_mb=memory_usage_mb,
            cpu_usage_percent=cpu_usage_percent
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.delete("/cache")
async def clear_cache(pattern: str = "*"):
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞."""
    try:
        cache = await get_cache()
        deleted_count = await cache.clear(pattern)
        
        return {
            "success": True,
            "message": f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} –∫–ª—é—á–µ–π –∏–∑ –∫—ç—à–∞",
            "deleted_count": deleted_count
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/export", response_model=ExportResponse)
async def export_benchmarks(request: ExportRequest):
    """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤."""
    try:
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        filename = request.filename or f"benchmark_export_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}.{request.format}"
        
        return ExportResponse(
            success=True,
            filename=filename,
            message=f"–≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ {request.format} —Å–æ–∑–¥–∞–Ω",
            download_url=f"/downloads/{filename}",
            expires_at=datetime.utcnow() + timedelta(hours=24)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/compare", response_model=ComparisonResponse)
async def compare_benchmarks(benchmark_ids: List[str]):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤."""
    try:
        if len(benchmark_ids) < 2:
            raise HTTPException(status_code=400, detail="–î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –±–µ–Ω—á–º–∞—Ä–∫–∞")
        
        cache = await get_cache()
        results = []
        
        for benchmark_id in benchmark_ids:
            result = await cache.get_benchmark_result(benchmark_id)
            if result:
                results.append(result)
        
        if len(results) < 2:
            raise HTTPException(status_code=404, detail="–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        
        return ComparisonResponse(
            success=True,
            message=f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ {len(results)} –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –±–µ–Ω—á–º–∞—Ä–∫–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# WebSocket endpoints

@app.websocket("/ws/{client_id}")
async def websocket_endpoint(websocket: WebSocket, client_id: str):
    """WebSocket —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    await manager.connect(websocket)
    try:
        await manager.send_personal_message(
            f"–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Benchmark Service. Client ID: {client_id}",
            websocket
        )
        
        while True:
            # –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data = await websocket.receive_text()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {client_id}: {data}")
            
            # –≠—Ö–æ –æ—Ç–≤–µ—Ç
            await manager.send_personal_message(f"Echo: {data}", websocket)
            
    except WebSocketDisconnect:
        manager.disconnect(websocket)
    except Exception as e:
        logger.error(f"WebSocket –æ—à–∏–±–∫–∞: {e}")
        manager.disconnect(websocket)


# Error handlers

@app.exception_handler(HTTPException)
async def http_exception_handler(request, exc):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
    return JSONResponse(
        status_code=exc.status_code,
        content=ErrorResponse(
            error="HTTPException",
            message=exc.detail,
            timestamp=datetime.utcnow()
        ).dict()
    )


@app.exception_handler(Exception)
async def general_exception_handler(request, exc):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
    logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {exc}")
    return JSONResponse(
        status_code=500,
        content=ErrorResponse(
            error="InternalServerError",
            message="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            timestamp=datetime.utcnow()
        ).dict()
    )


if __name__ == "__main__":
    uvicorn.run(
        "app.main:app",
        host=settings.host,
        port=settings.port,
        reload=settings.debug,
        workers=settings.workers
    ) 