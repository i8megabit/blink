"""
üöÄ –ë—É—Ç—Å—Ç—Ä–∞–ø –¥–ª—è –≤—Å–µ—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ reLink
RAG-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å ChromaDB
"""

import os
import sys
import asyncio
import logging
from typing import Optional, Dict, Any
from contextlib import asynccontextmanager

import chromadb
from chromadb.config import Settings as ChromaSettings
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import structlog

from .config import get_settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.processors.JSONRenderer()
    ],
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

logger = structlog.get_logger()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
settings = get_settings()
chroma_client: Optional[chromadb.Client] = None

def initialize_chromadb() -> chromadb.Client:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChromaDB –∫–ª–∏–µ–Ω—Ç–∞"""
    global chroma_client
    
    try:
        chroma_settings = ChromaSettings(
            chroma_api_impl="rest",
            chroma_server_host=settings.CHROMADB_HOST,
            chroma_server_http_port=settings.CHROMADB_PORT,
            chroma_server_ssl_enabled=False,
            anonymized_telemetry=False
        )
        
        chroma_client = chromadb.Client(chroma_settings)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        collections = chroma_client.list_collections()
        logger.info(
            "ChromaDB initialized successfully",
            host=settings.CHROMADB_HOST,
            port=settings.CHROMADB_PORT,
            collections_count=len(collections)
        )
        
        return chroma_client
        
    except Exception as e:
        logger.error(
            "Failed to initialize ChromaDB",
            error=str(e),
            host=settings.CHROMADB_HOST,
            port=settings.CHROMADB_PORT
        )
        raise

def get_chroma_client() -> chromadb.Client:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ ChromaDB –∫–ª–∏–µ–Ω—Ç–∞"""
    global chroma_client
    if chroma_client is None:
        chroma_client = initialize_chromadb()
    return chroma_client

def create_app(
    title: str = "reLink Microservice",
    description: str = "–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å reLink —Å RAG –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π",
    version: str = "1.0.0"
) -> FastAPI:
    """–°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –±—É—Ç—Å—Ç—Ä–∞–ø–æ–º"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChromaDB
    try:
        initialize_chromadb()
    except Exception as e:
        logger.error("Failed to initialize ChromaDB during app creation", error=str(e))
    
    app = FastAPI(
        title=title,
        description=description,
        version=version,
        docs_url="/docs",
        redoc_url="/redoc"
    )
    
    # CORS middleware
    app.add_middleware(
        CORSMiddleware,
        allow_origins=settings.CORS_ORIGINS.split(","),
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    # Health check endpoint
    @app.get("/health")
    async def health_check():
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ ChromaDB
            chroma_status = "healthy"
            try:
                client = get_chroma_client()
                collections = client.list_collections()
                chroma_collections = len(collections)
            except Exception as e:
                chroma_status = "unhealthy"
                chroma_collections = 0
                logger.error("ChromaDB health check failed", error=str(e))
            
            return {
                "status": "healthy",
                "service": settings.SERVICE_NAME,
                "version": version,
                "chromadb": {
                    "status": chroma_status,
                    "collections_count": chroma_collections
                },
                "timestamp": asyncio.get_event_loop().time()
            }
        except Exception as e:
            logger.error("Health check failed", error=str(e))
            raise HTTPException(status_code=500, detail="Service unhealthy")
    
    # ChromaDB endpoints
    @app.get("/api/v1/chromadb/collections")
    async def list_collections():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π ChromaDB"""
        try:
            client = get_chroma_client()
            collections = client.list_collections()
            return {
                "collections": [
                    {
                        "name": col.name,
                        "count": col.count(),
                        "metadata": col.metadata
                    }
                    for col in collections
                ]
            }
        except Exception as e:
            logger.error("Failed to list collections", error=str(e))
            raise HTTPException(status_code=500, detail=str(e))
    
    @app.get("/api/v1/chromadb/collections/{collection_name}")
    async def get_collection_info(collection_name: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
        try:
            client = get_chroma_client()
            collection = client.get_collection(collection_name)
            
            return {
                "name": collection.name,
                "count": collection.count(),
                "metadata": collection.metadata
            }
        except Exception as e:
            logger.error(f"Failed to get collection {collection_name}", error=str(e))
            raise HTTPException(status_code=404, detail="Collection not found")
    
    @app.post("/api/v1/chromadb/collections/{collection_name}")
    async def create_collection(collection_name: str, metadata: Dict[str, Any] = None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
        try:
            client = get_chroma_client()
            collection = client.create_collection(
                name=collection_name,
                metadata=metadata or {}
            )
            
            logger.info(f"Collection {collection_name} created successfully")
            return {
                "name": collection.name,
                "metadata": collection.metadata,
                "status": "created"
            }
        except Exception as e:
            logger.error(f"Failed to create collection {collection_name}", error=str(e))
            raise HTTPException(status_code=500, detail=str(e))
    
    return app

def run_service():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"""
    import uvicorn
    
    logger.info(
        "Starting reLink microservice",
        service_name=settings.SERVICE_NAME,
        port=settings.SERVICE_PORT,
        debug=settings.DEBUG
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = create_app(
        title=f"reLink {settings.SERVICE_NAME.title()}",
        description=f"–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å {settings.SERVICE_NAME} —Å RAG –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π",
        version="1.0.0"
    )
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=settings.SERVICE_PORT,
        reload=settings.DEBUG,
        log_level=settings.LOG_LEVEL.lower()
    )

if __name__ == "__main__":
    run_service() 