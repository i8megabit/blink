// ===== –°–ò–°–¢–ï–ú–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì –ö–û–ú–ü–û–ù–ï–ù–¢ =====

import React, { useState } from 'react'
import { useSystemMonitoring, useServicesHealth } from '../hooks/useMicroservices'
import { Microservice } from '../types/microservices'
import { Card, Button, Badge, Progress } from './ui'

interface SystemMonitoringProps {
  className?: string
}

export const SystemMonitoring: React.FC<SystemMonitoringProps> = ({ className = '' }) => {
  const { health, loading: healthLoading, error: healthError, acknowledgeAlert } = useSystemMonitoring()
  const { services, loading: servicesLoading, error: servicesError } = useServicesHealth()
  const [selectedService, setSelectedService] = useState<Microservice | null>(null)
  const [showAlerts, setShowAlerts] = useState(false)

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'healthy': return 'green'
      case 'warning': return 'yellow'
      case 'critical': return 'red'
      case 'unknown': return 'gray'
      default: return 'gray'
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'healthy': return '‚úÖ'
      case 'warning': return '‚ö†Ô∏è'
      case 'critical': return '‚ùå'
      case 'unknown': return '‚ùì'
      default: return '‚ùì'
    }
  }

  const formatBytes = (bytes: number) => {
    if (bytes === 0) return '0 B'
    const k = 1024
    const sizes = ['B', 'KB', 'MB', 'GB', 'TB']
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
  }

  const formatUptime = (percentage: number) => {
    return `${percentage.toFixed(2)}%`
  }

  const handleAcknowledgeAlert = async (alertId: string) => {
    try {
      await acknowledgeAlert(alertId)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞:', error)
    }
  }

  if (healthLoading || servicesLoading) {
    return (
      <div className={`flex items-center justify-center p-8 ${className}`}>
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...</p>
        </div>
      </div>
    )
  }

  if (healthError || servicesError) {
    return (
      <div className={`p-4 ${className}`}>
        <Card className="border-red-200 bg-red-50">
          <div className="text-center">
            <p className="text-red-600 mb-2">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</p>
            <p className="text-red-500 text-sm">{healthError || servicesError}</p>
          </div>
        </Card>
      </div>
    )
  }

  return (
    <div className={`space-y-6 ${className}`}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900 dark:text-white">
            üìä –°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
          </h2>
          <p className="text-gray-600 dark:text-gray-400 mt-1">
            –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∏ —Å–µ—Ä–≤–∏—Å–æ–≤
          </p>
        </div>
        <div className="flex space-x-2">
          <Button
            onClick={() => setShowAlerts(!showAlerts)}
            className={`${showAlerts ? 'bg-red-600 hover:bg-red-700' : 'bg-gray-600 hover:bg-gray-700'} text-white`}
          >
            {showAlerts ? 'üìã –°–∫—Ä—ã—Ç—å –∞–ª–µ—Ä—Ç—ã' : 'üö® –ü–æ–∫–∞–∑–∞—Ç—å –∞–ª–µ—Ä—Ç—ã'}
          </Button>
        </div>
      </div>

      {/* –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã */}
      {health && (
        <Card className="p-6">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
              –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
            </h3>
            <div className="flex items-center space-x-2">
              <span className="text-2xl">{getStatusIcon(health.overall_status)}</span>
              <Badge color={getStatusColor(health.overall_status)}>
                {health.overall_status}
              </Badge>
            </div>
          </div>

          {/* –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-gray-600">CPU:</span>
                <span className="font-medium">{health.resources.cpu.usage_percent.toFixed(1)}%</span>
              </div>
              <Progress 
                value={health.resources.cpu.usage_percent} 
                max={100}
                className="h-2"
                color={health.resources.cpu.usage_percent > 80 ? 'red' : health.resources.cpu.usage_percent > 60 ? 'yellow' : 'green'}
              />
            </div>
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-gray-600">–ü–∞–º—è—Ç—å:</span>
                <span className="font-medium">{health.resources.memory.usage_percent.toFixed(1)}%</span>
              </div>
              <Progress 
                value={health.resources.memory.usage_percent} 
                max={100}
                className="h-2"
                color={health.resources.memory.usage_percent > 80 ? 'red' : health.resources.memory.usage_percent > 60 ? 'yellow' : 'green'}
              />
            </div>
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-gray-600">–î–∏—Å–∫:</span>
                <span className="font-medium">{health.resources.disk.usage_percent.toFixed(1)}%</span>
              </div>
              <Progress 
                value={health.resources.disk.usage_percent} 
                max={100}
                className="h-2"
                color={health.resources.disk.usage_percent > 80 ? 'red' : health.resources.disk.usage_percent > 60 ? 'yellow' : 'green'}
              />
            </div>
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-gray-600">–°–µ—Ç—å:</span>
                <span className="font-medium">{health.resources.network.connections}</span>
              </div>
              <div className="text-xs text-gray-500">
                {formatBytes(health.resources.network.bytes_sent)} / {formatBytes(health.resources.network.bytes_received)}
              </div>
            </div>
          </div>

          {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Å—É—Ä—Å–∞—Ö */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
            <div className="space-y-2">
              <div className="flex justify-between">
                <span className="text-gray-600">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏:</span>
                <span className="font-medium">{formatBytes(health.resources.memory.used_mb * 1024 * 1024)}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">–í—Å–µ–≥–æ –ø–∞–º—è—Ç–∏:</span>
                <span className="font-medium">{formatBytes(health.resources.memory.total_mb * 1024 * 1024)}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–∏—Å–∫–∞:</span>
                <span className="font-medium">{formatBytes(health.resources.disk.used_gb * 1024 * 1024 * 1024)}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">–í—Å–µ–≥–æ –¥–∏—Å–∫–∞:</span>
                <span className="font-medium">{formatBytes(health.resources.disk.total_gb * 1024 * 1024 * 1024)}</span>
              </div>
            </div>
            <div className="space-y-2">
              <div className="flex justify-between">
                <span className="text-gray-600">–Ø–¥—Ä–∞ CPU:</span>
                <span className="font-medium">{health.resources.cpu.cores}</span>
              </div>
              {health.resources.cpu.temperature && (
                <div className="flex justify-between">
                  <span className="text-gray-600">–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU:</span>
                  <span className="font-medium">{health.resources.cpu.temperature}¬∞C</span>
                </div>
              )}
              <div className="flex justify-between">
                <span className="text-gray-600">–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:</span>
                <span className="font-medium">{health.resources.network.connections}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</span>
                <span className="font-medium">{new Date(health.last_check).toLocaleTimeString()}</span>
              </div>
            </div>
          </div>
        </Card>
      )}

      {/* –ê–ª–µ—Ä—Ç—ã */}
      {showAlerts && health && health.alerts.length > 0 && (
        <Card className="p-6">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
            üö® –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã ({health.alerts.length})
          </h3>
          <div className="space-y-3">
            {health.alerts.map((alert) => (
              <div key={alert.id} className="flex items-center justify-between p-3 border border-gray-200 rounded-lg">
                <div className="flex items-center space-x-3">
                  <span className="text-xl">
                    {alert.level === 'critical' ? 'üî¥' : alert.level === 'warning' ? 'üü°' : 'üîµ'}
                  </span>
                  <div>
                    <div className="font-medium text-gray-900 dark:text-white">{alert.title}</div>
                    <div className="text-sm text-gray-600">{alert.message}</div>
                    <div className="text-xs text-gray-500 mt-1">
                      –°–µ—Ä–≤–∏—Å: {alert.service} ‚Ä¢ {new Date(alert.timestamp).toLocaleString()}
                    </div>
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  {!alert.acknowledged && (
                    <Button
                      size="sm"
                      onClick={() => handleAcknowledgeAlert(alert.id)}
                      className="bg-blue-600 hover:bg-blue-700 text-white"
                    >
                      –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                    </Button>
                  )}
                  <Badge color={alert.acknowledged ? 'green' : 'red'}>
                    {alert.acknowledged ? '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' : '–ù–æ–≤—ã–π'}
                  </Badge>
                </div>
              </div>
            ))}
          </div>
        </Card>
      )}

      {/* –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ */}
      <Card className="p-6">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
          üîß –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ ({services.length})
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {services.map((service) => (
            <div
              key={service.name}
              className="p-4 border border-gray-200 rounded-lg hover:shadow-md transition-shadow cursor-pointer"
              onClick={() => setSelectedService(service)}
            >
              <div className="flex items-center justify-between mb-2">
                <h4 className="font-medium text-gray-900 dark:text-white">{service.name}</h4>
                <div className="flex items-center space-x-1">
                  <span className="text-lg">{getStatusIcon(service.status)}</span>
                  <Badge color={getStatusColor(service.status)}>
                    {service.status}
                  </Badge>
                </div>
              </div>
              <div className="space-y-1 text-sm text-gray-600">
                <div>–í–µ—Ä—Å–∏—è: {service.version}</div>
                <div>–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {service.response_time_ms}ms</div>
                <div>–ê–ø—Ç–∞–π–º: {formatUptime(service.uptime_percentage)}</div>
                <div>–≠–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: {service.endpoints.length}</div>
              </div>
              <div className="mt-3 text-xs text-gray-500">
                –ü–æ—Å–ª–µ–¥–Ω–∏–π heartbeat: {new Date(service.last_heartbeat).toLocaleTimeString()}
              </div>
            </div>
          ))}
        </div>
      </Card>

      {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ */}
      {selectedService && (
        <ServiceDetailsModal
          service={selectedService}
          onClose={() => setSelectedService(null)}
        />
      )}
    </div>
  )
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏ —Å–µ—Ä–≤–∏—Å–∞
interface ServiceDetailsModalProps {
  service: Microservice
  onClose: () => void
}

const ServiceDetailsModal: React.FC<ServiceDetailsModalProps> = ({ service, onClose }) => {
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <Card className="w-full max-w-2xl p-6 max-h-[90vh] overflow-y-auto">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
            –î–µ—Ç–∞–ª–∏ —Å–µ—Ä–≤–∏—Å–∞: {service.name}
          </h3>
          <Button onClick={onClose} className="text-gray-500 hover:text-gray-700">
            ‚úï
          </Button>
        </div>

        <div className="space-y-4">
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">–í–µ—Ä—Å–∏—è</label>
              <div className="text-sm text-gray-900">{service.version}</div>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">–°—Ç–∞—Ç—É—Å</label>
              <Badge color={service.status === 'healthy' ? 'green' : service.status === 'warning' ? 'yellow' : 'red'}>
                {service.status}
              </Badge>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞</label>
              <div className="text-sm text-gray-900">{service.response_time_ms}ms</div>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">–ê–ø—Ç–∞–π–º</label>
              <div className="text-sm text-gray-900">{service.uptime_percentage.toFixed(2)}%</div>
            </div>
          </div>

          {/* URL —Å–µ—Ä–≤–∏—Å–∞ */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">URL —Å–µ—Ä–≤–∏—Å–∞</label>
            <div className="text-sm text-gray-900 break-all">{service.health_url}</div>
          </div>

          {/* –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã ({service.endpoints.length})</label>
            <div className="space-y-2 max-h-40 overflow-y-auto">
              {service.endpoints.map((endpoint, index) => (
                <div key={index} className="flex items-center justify-between p-2 bg-gray-50 rounded">
                  <div className="flex items-center space-x-2">
                    <Badge color={endpoint.method === 'GET' ? 'green' : endpoint.method === 'POST' ? 'blue' : 'orange'}>
                      {endpoint.method}
                    </Badge>
                    <span className="text-sm font-mono">{endpoint.path}</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    {endpoint.requires_auth && (
                      <Badge color="red" size="sm">Auth</Badge>
                    )}
                    {endpoint.deprecated && (
                      <Badge color="gray" size="sm">Deprecated</Badge>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ */}
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">–ü–æ—Å–ª–µ–¥–Ω–∏–π heartbeat</label>
              <div className="text-sm text-gray-900">
                {new Date(service.last_heartbeat).toLocaleString()}
              </div>
            </div>
            {service.metrics_url && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">URL –º–µ—Ç—Ä–∏–∫</label>
                <div className="text-sm text-gray-900 break-all">{service.metrics_url}</div>
              </div>
            )}
            {service.documentation_url && (
              <div className="col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-1">URL –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏</label>
                <div className="text-sm text-gray-900 break-all">{service.documentation_url}</div>
              </div>
            )}
          </div>
        </div>
      </Card>
    </div>
  )
} 