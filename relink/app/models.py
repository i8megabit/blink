"""
üîó –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–∏
"""

from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
from datetime import datetime
from enum import Enum

class LinkType(str, Enum):
    """–¢–∏–ø—ã –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫"""
    INTERNAL = "internal"
    EXTERNAL = "external"
    ANCHOR = "anchor"

class Priority(str, Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"

class DomainRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–º–µ–Ω–∞"""
    domain: str = Field(..., description="–î–æ–º–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    client_id: Optional[str] = Field(None, description="ID –∫–ª–∏–µ–Ω—Ç–∞")

class PostData(BaseModel):
    """–î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞"""
    id: Optional[int] = None
    title: str = Field(..., description="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞")
    content: str = Field(..., description="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–∞")
    url: str = Field(..., description="URL –ø–æ—Å—Ç–∞")
    post_type: Optional[str] = Field(None, description="–¢–∏–ø –ø–æ—Å—Ç–∞")

class InternalLink(BaseModel):
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å—Å—ã–ª–∫–∞"""
    source_post_id: int = Field(..., description="ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞")
    target_post_id: int = Field(..., description="ID —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ—Å—Ç–∞")
    link_text: str = Field(..., description="–¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏")
    link_type: LinkType = Field(LinkType.INTERNAL, description="–¢–∏–ø —Å—Å—ã–ª–∫–∏")
    strength: float = Field(1.0, description="–°–∏–ª–∞ —Å–≤—è–∑–∏")

class Recommendation(BaseModel):
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–µ"""
    type: str = Field(..., description="–¢–∏–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    priority: Priority = Field(Priority.MEDIUM, description="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
    title: str = Field(..., description="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    description: str = Field(..., description="–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    details: Optional[Dict[str, Any]] = Field(None, description="–î–µ—Ç–∞–ª–∏")

class AnalysisResult(BaseModel):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞"""
    domain: str = Field(..., description="–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –¥–æ–º–µ–Ω")
    total_posts: int = Field(..., description="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤")
    posts_with_links: int = Field(..., description="–ü–æ—Å—Ç—ã —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏")
    posts_without_links: int = Field(..., description="–ü–æ—Å—Ç—ã –±–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫")
    total_internal_links: int = Field(..., description="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫")
    recommendations: List[Recommendation] = Field(..., description="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    analysis_date: datetime = Field(default_factory=datetime.utcnow)

class LinkAnalysisRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Å—ã–ª–æ–∫"""
    posts: List[PostData] = Field(..., description="–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    domain: str = Field(..., description="–î–æ–º–µ–Ω")
    client_id: Optional[str] = Field(None, description="ID –∫–ª–∏–µ–Ω—Ç–∞")

class OptimizationRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    domain: str = Field(..., description="–î–æ–º–µ–Ω –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    target_keywords: List[str] = Field(..., description="–¶–µ–ª–µ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
    client_id: Optional[str] = Field(None, description="ID –∫–ª–∏–µ–Ω—Ç–∞")

class OptimizationResult(BaseModel):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    domain: str = Field(..., description="–î–æ–º–µ–Ω")
    suggested_links: List[InternalLink] = Field(..., description="–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ —Å—Å—ã–ª–∫–∏")
    optimization_score: float = Field(..., description="–û—Ü–µ–Ω–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    keywords_coverage: Dict[str, float] = Field(..., description="–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
    created_at: datetime = Field(default_factory=datetime.utcnow) 