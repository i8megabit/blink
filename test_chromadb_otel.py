#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ChromaDB v2 (–±–µ–∑ OpenTelemetry)
"""

import os
import sys
import time
import requests
import json
from typing import Dict, Any

def test_chromadb_connection() -> Dict[str, Any]:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ChromaDB"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ChromaDB –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—Ç—É —Å API v2
        response = requests.get("http://localhost:8006/api/v2/heartbeat", timeout=5)
        if response.status_code == 200:
            return {"status": "success", "message": "ChromaDB –¥–æ—Å—Ç—É–ø–µ–Ω"}
        else:
            return {"status": "error", "message": f"ChromaDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}"}
    except Exception as e:
        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ChromaDB: {e}"}

def get_auth_identity() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ tenant –∏ database –∏–∑ ChromaDB"""
    try:
        response = requests.get("http://localhost:8006/api/v2/auth/identity", timeout=5)
        if response.status_code == 200:
            data = response.json()
            return {
                "status": "success", 
                "data": data,
                "tenant": data.get("tenant_id", "default_tenant"),
                "database": data.get("database_id", "default_database")
            }
        else:
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è identity: {response.status_code}"}
    except Exception as e:
        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è identity: {e}"}

def test_chromadb_api() -> Dict[str, Any]:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö API ChromaDB v2"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º tenant –∏ database
        identity = get_auth_identity()
        if identity["status"] != "success":
            return identity
        
        tenant = identity["tenant"]
        database = identity["database"]
        
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º tenant: {tenant}, database: {database}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å API v2
        collection_name = f"test_collection_{int(time.time())}"
        collection_data = {
            "name": collection_name,
            "metadata": {"description": "Test collection for integration testing"}
        }
        
        create_url = f"http://localhost:8006/api/v2/tenants/{tenant}/databases/{database}/collections"
        response = requests.post(create_url, json=collection_data, timeout=10)
        
        if response.status_code == 200:
            collection_info = response.json()
            collection_id = collection_info.get("id")
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
            add_url = f"http://localhost:8006/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}/add"
            documents_data = {
                "documents": ["This is a test document"],
                "metadatas": [{"source": "test"}],
                "ids": ["test_id_1"]
            }
            
            add_response = requests.post(add_url, json=documents_data, timeout=10)
            
            if add_response.status_code in (200, 201):
                return {
                    "status": "success", 
                    "message": f"–ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_name} —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã",
                    "collection_id": collection_id
                }
            else:
                return {
                    "status": "error", 
                    "message": f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {add_response.status_code}"
                }
        else:
            return {
                "status": "error", 
                "message": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {response.status_code} - {response.text}"
            }
            
    except Exception as e:
        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}"}

def test_chromadb_health() -> Dict[str, Any]:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check ChromaDB"""
    try:
        response = requests.get("http://localhost:8006/api/v2/heartbeat", timeout=5)
        if response.status_code == 200:
            data = response.json()
            return {
                "status": "success", 
                "message": "Health check –ø—Ä–æ–π–¥–µ–Ω",
                "data": data
            }
        else:
            return {"status": "error", "message": f"Health check –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {response.status_code}"}
    except Exception as e:
        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ health check: {e}"}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ChromaDB v2")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    print("\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ChromaDB...")
    connection_result = test_chromadb_connection()
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {connection_result['status']} - {connection_result['message']}")
    
    if connection_result["status"] != "success":
        print("‚ùå ChromaDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        return
    
    # –¢–µ—Å—Ç health check
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...")
    health_result = test_chromadb_health()
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {health_result['status']} - {health_result['message']}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ identity
    print("\n3. –ü–æ–ª—É—á–µ–Ω–∏–µ tenant –∏ database...")
    identity_result = get_auth_identity()
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {identity_result['status']}")
    if identity_result["status"] == "success":
        print(f"   Tenant: {identity_result['tenant']}")
        print(f"   Database: {identity_result['database']}")
    
    # –¢–µ—Å—Ç API
    print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –æ–ø–µ—Ä–∞—Ü–∏–π...")
    api_result = test_chromadb_api()
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {api_result['status']} - {api_result['message']}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    
    all_tests = [
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", connection_result),
        ("Health Check", health_result),
        ("Identity", identity_result),
        ("API –û–ø–µ—Ä–∞—Ü–∏–∏", api_result)
    ]
    
    passed = 0
    total = len(all_tests)
    
    for test_name, result in all_tests:
        status = "‚úÖ" if result["status"] == "success" else "‚ùå"
        print(f"   {status} {test_name}: {result['status']}")
        if result["status"] == "success":
            passed += 1
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! ChromaDB v2 —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")

if __name__ == "__main__":
    main() 