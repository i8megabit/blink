"""
üß† –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ LLM Tuning –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è, RAG, –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ç—é–Ω–∏–Ω–≥ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
"""

from fastapi import FastAPI, HTTPException, Depends, BackgroundTasks, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
import time
import logging
from typing import Dict, Any, List

from .config import settings
from .database import get_db, init_db
from .services import (
    ModelService, 
    RouterService, 
    RAGService, 
    TuningService,
    MonitoringService
)
from .models import (
    LLMModelCreate, LLMModelUpdate, LLMModelResponse,
    RouteCreate, RouteResponse,
    TuningSessionCreate, TuningSessionResponse,
    RAGQuery, RAGResponse,
    RouteRequest, RouteResponse as RouterResponse,
    PerformanceMetrics
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, settings.monitoring.log_level),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ LLM Tuning –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await init_db()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    app.state.model_service = ModelService()
    app.state.router_service = RouterService()
    app.state.rag_service = RAGService()
    app.state.tuning_service = TuningService()
    app.state.monitoring_service = MonitoringService()
    
    logger.info("‚úÖ –°–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    logger.info(f"üéØ RAG –≤–∫–ª—é—á–µ–Ω: {settings.rag.enabled}")
    logger.info(f"‚ö° –¢—é–Ω–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω: {settings.tuning.enabled}")
    logger.info(f"üõ£Ô∏è –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞: {settings.router.enabled}")
    
    yield
    
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ LLM Tuning –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞...")


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title=settings.api.title,
    description=settings.api.description,
    version=settings.api.version,
    docs_url=settings.api.docs_url if settings.debug else None,
    redoc_url=settings.api.redoc_url if settings.debug else None,
    lifespan=lifespan
)

# Middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.api.cors_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.add_middleware(GZipMiddleware, minimum_size=1000)


# Middleware –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
@app.middleware("http")
async def monitoring_middleware(request: Request, call_next):
    """Middleware –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    start_time = time.time()
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    logger.info(f"üì• {request.method} {request.url.path}")
    
    try:
        response = await call_next(request)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        process_time = time.time() - start_time
        logger.info(f"üì§ {request.method} {request.url.path} - {response.status_code} ({process_time:.3f}s)")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        response.headers["X-Process-Time"] = str(process_time)
        
        return response
        
    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        process_time = time.time() - start_time
        logger.error(f"‚ùå {request.method} {request.url.path} - ERROR ({process_time:.3f}s): {str(e)}")
        raise


# Health check
@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "service": "llm-tuning",
        "version": settings.api.version,
        "environment": settings.environment,
        "features": {
            "rag_enabled": settings.rag.enabled,
            "tuning_enabled": settings.tuning.enabled,
            "router_enabled": settings.router.enabled
        }
    }


# API Routes

## –ú–æ–¥–µ–ª–∏ LLM
@app.post("/api/v1/models", response_model=LLMModelResponse)
async def create_model(
    model_data: LLMModelCreate,
    db=Depends(get_db),
    model_service: ModelService = Depends(lambda: app.state.model_service)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ LLM"""
    try:
        model = await model_service.create_model(db, model_data)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model.name}")
        return model
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
        raise HTTPException(status_code=400, detail=str(e))


@app.get("/api/v1/models", response_model=List[LLMModelResponse])
async def list_models(
    skip: int = 0,
    limit: int = 100,
    provider: str = None,
    status: str = None,
    db=Depends(get_db),
    model_service: ModelService = Depends(lambda: app.state.model_service)
):
    """–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π LLM"""
    try:
        models = await model_service.list_models(db, skip=skip, limit=limit, provider=provider, status=status)
        return models
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/v1/models/{model_id}", response_model=LLMModelResponse)
async def get_model(
    model_id: int,
    db=Depends(get_db),
    model_service: ModelService = Depends(lambda: app.state.model_service)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ ID"""
    try:
        model = await model_service.get_model(db, model_id)
        if not model:
            raise HTTPException(status_code=404, detail="–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return model
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ {model_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.put("/api/v1/models/{model_id}", response_model=LLMModelResponse)
async def update_model(
    model_id: int,
    model_data: LLMModelUpdate,
    db=Depends(get_db),
    model_service: ModelService = Depends(lambda: app.state.model_service)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ LLM"""
    try:
        model = await model_service.update_model(db, model_id, model_data)
        if not model:
            raise HTTPException(status_code=404, detail="–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å: {model.name}")
        return model
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ {model_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.delete("/api/v1/models/{model_id}")
async def delete_model(
    model_id: int,
    db=Depends(get_db),
    model_service: ModelService = Depends(lambda: app.state.model_service)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ LLM"""
    try:
        success = await model_service.delete_model(db, model_id)
        if not success:
            raise HTTPException(status_code=404, detail="–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å: {model_id}")
        return {"message": "–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"}
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ {model_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


## –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
@app.post("/api/v1/route", response_model=RouterResponse)
async def route_request(
    request_data: RouteRequest,
    db=Depends(get_db),
    router_service: RouterService = Depends(lambda: app.state.router_service)
):
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    try:
        start_time = time.time()
        route_result = await router_service.route_request(db, request_data)
        process_time = time.time() - start_time
        
        logger.info(f"üõ£Ô∏è –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è: {request_data.query[:50]}... -> {route_result.model_name} ({process_time:.3f}s)")
        
        return route_result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/v1/routes", response_model=RouteResponse)
async def create_route(
    route_data: RouteCreate,
    db=Depends(get_db),
    router_service: RouterService = Depends(lambda: app.state.router_service)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞"""
    try:
        route = await router_service.create_route(db, route_data)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –º–∞—Ä—à—Ä—É—Ç: {route.name}")
        return route
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞: {e}")
        raise HTTPException(status_code=400, detail=str(e))


@app.get("/api/v1/routes", response_model=List[RouteResponse])
async def list_routes(
    skip: int = 0,
    limit: int = 100,
    strategy: str = None,
    db=Depends(get_db),
    router_service: RouterService = Depends(lambda: app.state.router_service)
):
    """–°–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    try:
        routes = await router_service.list_routes(db, skip=skip, limit=limit, strategy=strategy)
        return routes
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))


## RAG —Å–∏—Å—Ç–µ–º–∞
@app.post("/api/v1/rag/query", response_model=RAGResponse)
async def rag_query(
    query_data: RAGQuery,
    db=Depends(get_db),
    rag_service: RAGService = Depends(lambda: app.state.rag_service)
):
    """RAG –∑–∞–ø—Ä–æ—Å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    if not settings.rag.enabled:
        raise HTTPException(status_code=400, detail="RAG —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    
    try:
        start_time = time.time()
        response = await rag_service.query(db, query_data)
        process_time = time.time() - start_time
        
        logger.info(f"üß† RAG –∑–∞–ø—Ä–æ—Å: {query_data.query[:50]}... ({process_time:.3f}s)")
        
        return response
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ RAG –∑–∞–ø—Ä–æ—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/v1/rag/documents")
async def add_document(
    title: str,
    content: str,
    source: str = None,
    document_type: str = None,
    tags: List[str] = [],
    db=Depends(get_db),
    rag_service: RAGService = Depends(lambda: app.state.rag_service)
):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ RAG —Å–∏—Å—Ç–µ–º—É"""
    if not settings.rag.enabled:
        raise HTTPException(status_code=400, detail="RAG —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    
    try:
        document_id = await rag_service.add_document(db, title, content, source, document_type, tags)
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –≤ RAG: {title}")
        return {"document_id": document_id, "message": "–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω"}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


## –¢—é–Ω–∏–Ω–≥ –º–æ–¥–µ–ª–µ–π
@app.post("/api/v1/tuning/sessions", response_model=TuningSessionResponse)
async def create_tuning_session(
    session_data: TuningSessionCreate,
    background_tasks: BackgroundTasks,
    db=Depends(get_db),
    tuning_service: TuningService = Depends(lambda: app.state.tuning_service)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Ç—é–Ω–∏–Ω–≥–∞"""
    if not settings.tuning.enabled:
        raise HTTPException(status_code=400, detail="–¢—é–Ω–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω")
    
    try:
        session = await tuning_service.create_session(db, session_data)
        
        # –ó–∞–ø—É—Å–∫ —Ç—é–Ω–∏–Ω–≥–∞ –≤ —Ñ–æ–Ω–µ
        background_tasks.add_task(tuning_service.run_tuning, db, session.id)
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è —Ç—é–Ω–∏–Ω–≥–∞: {session.name}")
        return session
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ —Ç—é–Ω–∏–Ω–≥–∞: {e}")
        raise HTTPException(status_code=400, detail=str(e))


@app.get("/api/v1/tuning/sessions", response_model=List[TuningSessionResponse])
async def list_tuning_sessions(
    skip: int = 0,
    limit: int = 100,
    status: str = None,
    model_id: int = None,
    db=Depends(get_db),
    tuning_service: TuningService = Depends(lambda: app.state.tuning_service)
):
    """–°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π —Ç—é–Ω–∏–Ω–≥–∞"""
    try:
        sessions = await tuning_service.list_sessions(db, skip=skip, limit=limit, status=status, model_id=model_id)
        return sessions
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π —Ç—é–Ω–∏–Ω–≥–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/v1/tuning/sessions/{session_id}", response_model=TuningSessionResponse)
async def get_tuning_session(
    session_id: int,
    db=Depends(get_db),
    tuning_service: TuningService = Depends(lambda: app.state.tuning_service)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Ç—é–Ω–∏–Ω–≥–∞"""
    try:
        session = await tuning_service.get_session(db, session_id)
        if not session:
            raise HTTPException(status_code=404, detail="–°–µ—Å—Å–∏—è —Ç—é–Ω–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return session
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ —Ç—é–Ω–∏–Ω–≥–∞ {session_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/v1/tuning/optimize")
async def optimize_model(
    model_id: int,
    background_tasks: BackgroundTasks,
    db=Depends(get_db),
    tuning_service: TuningService = Depends(lambda: app.state.tuning_service)
):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏"""
    if not settings.tuning.enabled:
        raise HTTPException(status_code=400, detail="–¢—é–Ω–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω")
    
    try:
        # –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ–Ω–µ
        background_tasks.add_task(tuning_service.optimize_model, db, model_id)
        
        logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏: {model_id}")
        return {"message": "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞", "model_id": model_id}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ {model_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –º–µ—Ç—Ä–∏–∫–∏
@app.post("/api/v1/metrics")
async def record_metrics(
    metrics: PerformanceMetrics,
    db=Depends(get_db),
    monitoring_service: MonitoringService = Depends(lambda: app.state.monitoring_service)
):
    """–ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        await monitoring_service.record_metrics(db, metrics)
        return {"message": "–ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø–∏—Å–∞–Ω—ã"}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/v1/metrics/summary")
async def get_metrics_summary(
    model_id: int = None,
    time_range: str = "24h",
    db=Depends(get_db),
    monitoring_service: MonitoringService = Depends(lambda: app.state.monitoring_service)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –º–µ—Ç—Ä–∏–∫"""
    try:
        summary = await monitoring_service.get_metrics_summary(db, model_id, time_range)
        return summary
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –º–µ—Ç—Ä–∏–∫: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/v1/models/status")
async def get_models_status(
    db=Depends(get_db),
    model_service: ModelService = Depends(lambda: app.state.model_service)
):
    """–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
    try:
        status = await model_service.get_models_status(db)
        return status
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    logger.error(f"‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exc}")
    return JSONResponse(
        status_code=500,
        content={
            "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "detail": str(exc) if settings.debug else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"
        }
    )


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=settings.debug,
        workers=4
    ) 