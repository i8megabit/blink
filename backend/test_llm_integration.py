#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ WordPress –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å LLM Router

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç:
1. –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—é WordPress —Å–∞–π—Ç–∞
2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—é SEO —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —á–µ—Ä–µ–∑ LLM Router
3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import httpx
import json
import logging
from datetime import datetime
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class ReLinkTester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è reLink —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.client = None
        self.auth_token = None
    
    async def __aenter__(self):
        self.client = httpx.AsyncClient(timeout=60.0)
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.client:
            await self.client.aclose()
    
    async def setup_test_user(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            response = await self.client.post(f"{self.base_url}/api/v1/test/setup")
            if response.status_code == 200:
                logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response.status_code}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    async def login(self) -> bool:
        """–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É"""
        try:
            response = await self.client.post(f"{self.base_url}/api/v1/test/login")
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                logger.info("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {response.status_code}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}")
            return False
    
    async def get_headers(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
        headers = {"Content-Type": "application/json"}
        if self.auth_token:
            headers["Authorization"] = f"Bearer {self.auth_token}"
        return headers
    
    async def test_wordpress_indexing(self, domain: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ WordPress —Å–∞–π—Ç–∞"""
        try:
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞—é –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é WordPress —Å–∞–π—Ç–∞: {domain}")
            
            headers = await self.get_headers()
            payload = {
                "domain": domain,
                "comprehensive": True
            }
            
            response = await self.client.post(
                f"{self.base_url}/api/v1/wordpress/index",
                json=payload,
                headers=headers
            )
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                logger.info(f"   - –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {data.get('posts_count', 0)}")
                logger.info(f"   - –î–æ–º–µ–Ω ID: {data.get('domain_id', 0)}")
                return data
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {response.status_code}")
                logger.error(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return {"error": f"HTTP {response.status_code}", "details": response.text}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {e}")
            return {"error": str(e)}
    
    async def test_seo_recommendations(self, domain: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SEO —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        try:
            logger.info(f"üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é SEO —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è: {domain}")
            
            headers = await self.get_headers()
            payload = {
                "domain": domain,
                "comprehensive": True
            }
            
            response = await self.client.post(
                f"{self.base_url}/api/v1/seo/recommendations",
                json=payload,
                headers=headers
            )
            
            if response.status_code == 200:
                data = response.json()
                recommendations = data.get('recommendations', [])
                
                logger.info(f"‚úÖ SEO —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                logger.info(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(recommendations)}")
                logger.info(f"   - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç–∞—Ç–µ–π: {data.get('posts_analyzed', 0)}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                llm_recommendations = [r for r in recommendations if r.get('source') == 'llm_router']
                classic_recommendations = [r for r in recommendations if r.get('source') != 'llm_router']
                
                logger.info(f"   - AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(llm_recommendations)}")
                logger.info(f"   - –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(classic_recommendations)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                for i, rec in enumerate(recommendations[:3]):
                    logger.info(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è {i+1}: {rec.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')} ({rec.get('priority', 'unknown')})")
                
                return data
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {response.status_code}")
                logger.error(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return {"error": f"HTTP {response.status_code}", "details": response.text}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            return {"error": str(e)}
    
    async def test_llm_router_status(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ LLM Router"""
        try:
            logger.info("üîß –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å LLM Router")
            
            headers = await self.get_headers()
            response = await self.client.get(
                f"{self.base_url}/api/v1/ollama_status",
                headers=headers
            )
            
            if response.status_code == 200:
                data = response.json()
                logger.info("‚úÖ LLM Router —Ä–∞–±–æ—Ç–∞–µ—Ç")
                logger.info(f"   - –ú–æ–¥–µ–ª—å: {data.get('model', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                logger.info(f"   - –°—Ç–∞—Ç—É—Å: {data.get('status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                return data
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ LLM Router: {response.status_code}")
                return {"error": f"HTTP {response.status_code}"}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ LLM Router: {e}")
            return {"error": str(e)}
    
    async def test_full_workflow(self, domain: str) -> Dict[str, Any]:
        """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞")
        
        results = {
            "timestamp": datetime.now().isoformat(),
            "domain": domain,
            "steps": {}
        }
        
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ LLM Router
        logger.info("\nüìã –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ LLM Router")
        llm_status = await self.test_llm_router_status()
        results["steps"]["llm_router_status"] = llm_status
        
        if llm_status.get("error"):
            logger.error("‚ùå LLM Router –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–µ—Ä—ã–≤–∞—é —Ç–µ—Å—Ç")
            return results
        
        # –®–∞–≥ 2: –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è WordPress
        logger.info("\nüìã –®–∞–≥ 2: –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è WordPress")
        indexing_result = await self.test_wordpress_indexing(domain)
        results["steps"]["wordpress_indexing"] = indexing_result
        
        if indexing_result.get("error"):
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏, –ø—Ä–µ—Ä—ã–≤–∞—é —Ç–µ—Å—Ç")
            return results
        
        # –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SEO —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        logger.info("\nüìã –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SEO —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        seo_result = await self.test_seo_recommendations(domain)
        results["steps"]["seo_recommendations"] = seo_result
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        logger.info("\nüìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        
        if not seo_result.get("error"):
            recommendations = seo_result.get("recommendations", [])
            llm_recs = [r for r in recommendations if r.get("source") == "llm_router"]
            
            if llm_recs:
                logger.info("‚úÖ LLM Router —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                logger.info(f"   - AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(llm_recs)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                if llm_recs:
                    ai_rec = llm_recs[0]
                    logger.info(f"   - –ü—Ä–∏–º–µ—Ä AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {ai_rec.get('title')}")
                    logger.info(f"     –ú–æ–¥–µ–ª—å: {ai_rec.get('model_used', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                    logger.info(f"     –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {ai_rec.get('processing_time', 0):.2f}—Å")
            else:
                logger.warning("‚ö†Ô∏è LLM Router –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SEO —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        
        return results

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è reLink —Å–∏—Å—Ç–µ–º—ã")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–æ–º–µ–Ω—ã WordPress
    test_domains = [
        "https://wordpress.org",
        "https://www.smashingmagazine.com",
        "https://www.wpbeginner.com"
    ]
    
    async with ReLinkTester() as tester:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not await tester.setup_test_user():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        # –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
        if not await tester.login():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –¥–æ–º–µ–Ω
        for domain in test_domains:
            logger.info(f"\n{'='*60}")
            logger.info(f"üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞: {domain}")
            logger.info(f"{'='*60}")
            
            results = await tester.test_full_workflow(domain)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"test_results_{timestamp}.json"
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2)
            
            logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            await asyncio.sleep(2)

if __name__ == "__main__":
    asyncio.run(main()) 