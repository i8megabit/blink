"""
üß† –†–ê–°–®–ò–†–ï–ù–ù–´–ô RAG –ú–ï–ù–ï–î–ñ–ï–†
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏ ChromaDB + —É–º–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
"""

import asyncio
import time
import hashlib
from typing import List, Dict, Any, Optional, Set
from datetime import datetime, timedelta
import structlog
import chromadb
from chromadb.config import Settings

from .config import get_settings

logger = structlog.get_logger()

class ChromaDBManager:
    """–£–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä ChromaDB —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏"""
    
    def __init__(self):
        self.settings = get_settings()
        self.chroma_client: Optional[chromadb.Client] = None
        self._collections_cache: Dict[str, Any] = {}
        self._last_cleanup = datetime.now()
        self._cleanup_interval = timedelta(hours=1)  # –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.max_collections = 50  # –ú–∞–∫—Å–∏–º—É–º –∫–æ–ª–ª–µ–∫—Ü–∏–π
        self.max_documents_per_collection = 10000  # –ú–∞–∫—Å–∏–º—É–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        self.collection_ttl = timedelta(days=7)  # TTL –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–π
        
        self._initialize_chromadb()
    
    def _initialize_chromadb(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChromaDB —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            headers = {}
            if hasattr(self.settings, 'CHROMADB_AUTH_TOKEN') and self.settings.CHROMADB_AUTH_TOKEN:
                headers["X-Chroma-Token"] = self.settings.CHROMADB_AUTH_TOKEN
            
            self.chroma_client = chromadb.HttpClient(
                host=self.settings.CHROMADB_HOST,
                port=self.settings.CHROMADB_PORT,
                ssl=False,
                headers=headers if headers else None
            )
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self.chroma_client.heartbeat()
            logger.info("ChromaDB client initialized successfully")
            
        except Exception as e:
            logger.error("Failed to initialize ChromaDB client", error=str(e))
            self.chroma_client = None
    
    async def get_or_create_collection(
        self, 
        name: str, 
        metadata: Optional[Dict[str, Any]] = None
    ) -> Optional[Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å —É–º–Ω—ã–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        
        if not self.chroma_client:
            logger.error("ChromaDB client not initialized")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if name in self._collections_cache:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                collection = self.chroma_client.get_collection(name)
                return collection
            except:
                # –ö–æ–ª–ª–µ–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞, —É–±–∏—Ä–∞–µ–º –∏–∑ –∫–µ—à–∞
                del self._collections_cache[name]
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
            collection = self.chroma_client.get_collection(name)
            self._collections_cache[name] = collection
            logger.info("Collection retrieved from cache", name=name)
            return collection
            
        except:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
            try:
                default_metadata = {
                    "description": f"Collection for {self.settings.SERVICE_NAME}",
                    "created_at": datetime.now().isoformat(),
                    "service": self.settings.SERVICE_NAME
                }
                
                if metadata:
                    default_metadata.update(metadata)
                
                collection = self.chroma_client.create_collection(
                    name=name,
                    metadata=default_metadata
                )
                
                self._collections_cache[name] = collection
                logger.info("New collection created", name=name, metadata=default_metadata)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
                await self._check_collection_limits()
                
                return collection
                
            except Exception as e:
                logger.error("Failed to create collection", name=name, error=str(e))
                return None
    
    async def add_documents_safe(
        self,
        documents: List[Dict[str, Any]],
        collection_name: str = "default",
        batch_size: int = 100
    ) -> Dict[str, Any]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        
        if not self.chroma_client:
            return {"error": "ChromaDB not initialized"}
        
        try:
            collection = await self.get_or_create_collection(collection_name)
            if not collection:
                return {"error": "Failed to get or create collection"}
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            texts = []
            metadatas = []
            ids = []
            
            for i, doc in enumerate(documents):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
                text = doc.get('text', doc.get('content', str(doc)))
                if not text or len(text.strip()) == 0:
                    continue
                
                texts.append(text)
                
                # –û—á–∏—â–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–ª–µ–π
                metadata = doc.get('metadata', {}).copy()
                problematic_fields = ['_type', 'id', '__class__', '__module__']
                for field in problematic_fields:
                    if field in metadata:
                        del metadata[field]
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                metadata.update({
                    "added_at": datetime.now().isoformat(),
                    "service": self.settings.SERVICE_NAME,
                    "document_hash": hashlib.md5(text.encode()).hexdigest()
                })
                
                metadatas.append(metadata)
                ids.append(doc.get('id', f"doc_{i}_{hash(text)}"))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –±–∞—Ç—á–∞–º–∏
            added_count = 0
            for i in range(0, len(texts), batch_size):
                batch_texts = texts[i:i + batch_size]
                batch_metadatas = metadatas[i:i + batch_size]
                batch_ids = ids[i:i + batch_size]
                
                collection.add(
                    documents=batch_texts,
                    metadatas=batch_metadatas,
                    ids=batch_ids
                )
                added_count += len(batch_texts)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                if i + batch_size < len(texts):
                    await asyncio.sleep(0.1)
            
            logger.info(
                "Documents added successfully",
                collection=collection_name,
                added_count=added_count,
                total_documents=len(documents)
            )
            
            return {
                "success": True,
                "added_count": added_count,
                "collection": collection_name,
                "batch_size": batch_size
            }
            
        except Exception as e:
            logger.error(
                "Failed to add documents",
                collection=collection_name,
                error=str(e),
                documents_count=len(documents)
            )
            return {"error": str(e)}
    
    async def search_safe(
        self,
        query: str,
        collection_name: str = "default",
        top_k: int = 5,
        filter_metadata: Optional[Dict[str, Any]] = None
    ) -> List[Dict[str, Any]]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        
        if not self.chroma_client:
            return []
        
        try:
            collection = await self.get_or_create_collection(collection_name)
            if not collection:
                return []
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            results = collection.query(
                query_texts=[query],
                n_results=top_k,
                where=filter_metadata
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            formatted_results = []
            if results['documents'] and results['documents'][0]:
                for i, doc in enumerate(results['documents'][0]):
                    formatted_results.append({
                        'document': doc,
                        'metadata': results['metadatas'][0][i] if results['metadatas'] and results['metadatas'][0] else {},
                        'id': results['ids'][0][i] if results['ids'] and results['ids'][0] else None,
                        'distance': results['distances'][0][i] if results['distances'] and results['distances'][0] else None
                    })
            
            logger.info(
                "Search completed successfully",
                query=query[:100] + "..." if len(query) > 100 else query,
                results_count=len(formatted_results),
                collection=collection_name
            )
            
            return formatted_results
            
        except Exception as e:
            logger.error(
                "Search failed",
                query=query[:100] + "..." if len(query) > 100 else query,
                error=str(e),
                collection=collection_name
            )
            return []
    
    async def delete_collection(self, name: str) -> Dict[str, Any]:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
        
        if not self.chroma_client:
            return {"error": "ChromaDB not initialized"}
        
        try:
            self.chroma_client.delete_collection(name)
            
            # –£–±–∏—Ä–∞–µ–º –∏–∑ –∫–µ—à–∞
            if name in self._collections_cache:
                del self._collections_cache[name]
            
            logger.info("Collection deleted", name=name)
            return {"success": True, "collection": name}
            
        except Exception as e:
            logger.error("Failed to delete collection", name=name, error=str(e))
            return {"error": str(e)}
    
    async def cleanup_old_collections(self) -> Dict[str, Any]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π"""
        
        if not self.chroma_client:
            return {"error": "ChromaDB not initialized"}
        
        try:
            collections = self.chroma_client.list_collections()
            deleted_count = 0
            
            for collection in collections:
                metadata = collection.metadata or {}
                created_at_str = metadata.get('created_at')
                
                if created_at_str:
                    try:
                        created_at = datetime.fromisoformat(created_at_str)
                        if datetime.now() - created_at > self.collection_ttl:
                            self.chroma_client.delete_collection(collection.name)
                            deleted_count += 1
                            logger.info("Old collection deleted", name=collection.name)
                    except:
                        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        continue
            
            logger.info("Cleanup completed", deleted_count=deleted_count)
            return {"success": True, "deleted_count": deleted_count}
            
        except Exception as e:
            logger.error("Cleanup failed", error=str(e))
            return {"error": str(e)}
    
    async def _check_collection_limits(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–π"""
        
        if not self.chroma_client:
            return
        
        try:
            collections = self.chroma_client.list_collections()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π
            if len(collections) > self.max_collections:
                logger.warning(
                    "Too many collections",
                    current=len(collections),
                    max=self.max_collections
                )
                await self.cleanup_old_collections()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–π
            for collection in collections:
                if collection.count() > self.max_documents_per_collection:
                    logger.warning(
                        "Collection too large",
                        name=collection.name,
                        count=collection.count(),
                        max=self.max_documents_per_collection
                    )
            
        except Exception as e:
            logger.error("Failed to check collection limits", error=str(e))
    
    async def get_collections_info(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö"""
        
        if not self.chroma_client:
            return []
        
        try:
            collections = self.chroma_client.list_collections()
            
            result = []
            for collection in collections:
                result.append({
                    "name": collection.name,
                    "metadata": collection.metadata,
                    "count": collection.count(),
                    "created_at": collection.metadata.get('created_at') if collection.metadata else None
                })
            
            return result
            
        except Exception as e:
            logger.error("Failed to get collections info", error=str(e))
            return []
    
    async def health_check(self) -> Dict[str, Any]:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
        
        if not self.chroma_client:
            return {
                "status": "unhealthy",
                "error": "ChromaDB client not initialized"
            }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self.chroma_client.heartbeat()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö
            collections_info = await self.get_collections_info()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –æ—á–∏—Å—Ç–∫–∞
            needs_cleanup = datetime.now() - self._last_cleanup > self._cleanup_interval
            
            return {
                "status": "healthy",
                "chromadb_connected": True,
                "collections_count": len(collections_info),
                "collections_info": collections_info,
                "needs_cleanup": needs_cleanup,
                "service": self.settings.SERVICE_NAME
            }
            
        except Exception as e:
            logger.error("Health check failed", error=str(e))
            return {
                "status": "unhealthy",
                "error": str(e),
                "service": self.settings.SERVICE_NAME
            }
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.chroma_client:
            try:
                self.chroma_client.close()
                self._collections_cache.clear()
                logger.info("ChromaDB Manager connection closed")
            except Exception as e:
                logger.error("Error closing ChromaDB Manager", error=str(e))

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_chromadb_manager: Optional[ChromaDBManager] = None

def get_chromadb_manager() -> ChromaDBManager:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ ChromaDB –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    global _chromadb_manager
    if _chromadb_manager is None:
        _chromadb_manager = ChromaDBManager()
    return _chromadb_manager

async def close_chromadb_manager():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ ChromaDB –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    global _chromadb_manager
    if _chromadb_manager:
        await _chromadb_manager.close()
        _chromadb_manager = None 