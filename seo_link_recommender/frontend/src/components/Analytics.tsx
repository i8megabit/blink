import React, { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from './ui/Card'
import { Button } from './ui/Button'
import { Badge } from './ui/Badge'

interface AnalyticsProps {
  domain?: string
}

interface MetricData {
  label: string
  value: number
  change?: number
  trend?: 'up' | 'down' | 'stable'
  color?: string
}

interface ChartData {
  labels: string[]
  datasets: {
    label: string
    data: number[]
    backgroundColor?: string
    borderColor?: string
  }[]
}

const Analytics: React.FC<AnalyticsProps> = ({ domain }) => {
  const [isLoading, setIsLoading] = useState(true)
  const [timeRange, setTimeRange] = useState<'7d' | '30d' | '90d'>('30d')

  // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  const mockMetrics: MetricData[] = [
    { label: '–û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫', value: 15420, change: 12.5, trend: 'up', color: 'text-blue-600' },
    { label: '–ö–æ–Ω–≤–µ—Ä—Å–∏–∏', value: 234, change: 8.2, trend: 'up', color: 'text-green-600' },
    { label: '–í—Ä–µ–º—è –Ω–∞ —Å–∞–π—Ç–µ', value: 4.2, change: -2.1, trend: 'down', color: 'text-yellow-600' },
    { label: '–û—Ç–∫–∞–∑—ã', value: 32.1, change: -5.3, trend: 'up', color: 'text-red-600' },
    { label: 'SEO –ø–æ–∑–∏—Ü–∏–∏', value: 15.3, change: 18.7, trend: 'up', color: 'text-purple-600' },
    { label: '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏', value: 89, change: 25.4, trend: 'up', color: 'text-indigo-600' }
  ]

  const mockChartData: ChartData = {
    labels: ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'],
    datasets: [
      {
        label: '–¢—Ä–∞—Ñ–∏–∫',
        data: [1200, 1350, 1100, 1400, 1600, 1800, 1700],
        backgroundColor: 'rgba(59, 130, 246, 0.1)',
        borderColor: 'rgba(59, 130, 246, 1)'
      },
      {
        label: '–ö–æ–Ω–≤–µ—Ä—Å–∏–∏',
        data: [12, 15, 8, 18, 22, 25, 20],
        backgroundColor: 'rgba(34, 197, 94, 0.1)',
        borderColor: 'rgba(34, 197, 94, 1)'
      }
    ]
  }

  useEffect(() => {
    loadAnalytics()
  }, [domain, timeRange])

  const loadAnalytics = async () => {
    setIsLoading(true)
    try {
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
      await new Promise(resolve => setTimeout(resolve, 1000))
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error)
    } finally {
      setIsLoading(false)
    }
  }

  const getTrendIcon = (trend: string) => {
    switch (trend) {
      case 'up': return 'üìà'
      case 'down': return 'üìâ'
      case 'stable': return '‚û°Ô∏è'
      default: return '‚û°Ô∏è'
    }
  }

  const getTrendColor = (trend: string) => {
    switch (trend) {
      case 'up': return 'text-green-600'
      case 'down': return 'text-red-600'
      case 'stable': return 'text-gray-600'
      default: return 'text-gray-600'
    }
  }

  const formatValue = (value: number, type: string) => {
    if (type === 'percentage') return `${value}%`
    if (type === 'time') return `${value} –º–∏–Ω`
    if (value >= 1000) return `${(value / 1000).toFixed(1)}K`
    return value.toString()
  }

  if (isLoading) {
    return (
      <div className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {Array.from({ length: 6 }).map((_, i) => (
            <Card key={i}>
              <CardContent className="p-6">
                <div className="h-4 bg-muted rounded animate-pulse mb-2" />
                <div className="h-8 bg-muted rounded animate-pulse" />
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</h2>
          <p className="text-muted-foreground">
            –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ SEO –º–µ—Ç—Ä–∏–∫
          </p>
        </div>
        <div className="flex items-center gap-2">
          <select 
            value={timeRange} 
            onChange={(e) => setTimeRange(e.target.value as any)}
            className="px-3 py-1 text-sm border rounded-md bg-background"
          >
            <option value="7d">7 –¥–Ω–µ–π</option>
            <option value="30d">30 –¥–Ω–µ–π</option>
            <option value="90d">90 –¥–Ω–µ–π</option>
          </select>
          <Button variant="outline" onClick={loadAnalytics}>
            –û–±–Ω–æ–≤–∏—Ç—å
          </Button>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {mockMetrics.map((metric, index) => (
          <Card key={index} className="hover:shadow-lg transition-all duration-200">
            <CardContent className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-sm font-medium text-muted-foreground">
                  {metric.label}
                </h3>
                <Badge className={getTrendColor(metric.trend || 'stable')}>
                  {getTrendIcon(metric.trend || 'stable')}
                </Badge>
              </div>
              <div className="space-y-2">
                <div className={`text-3xl font-bold ${metric.color}`}>
                  {formatValue(metric.value, metric.label.toLowerCase())}
                </div>
                {metric.change && (
                  <div className={`text-sm ${getTrendColor(metric.trend || 'stable')}`}>
                    {metric.change > 0 ? '+' : ''}{metric.change}% —Å –ø—Ä–æ—à–ª–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ */}
        <Card>
          <CardHeader>
            <CardTitle>–î–∏–Ω–∞–º–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="h-64 flex items-end justify-between gap-2">
              {mockChartData.datasets[0]?.data.map((value, index) => (
                <div key={index} className="flex-1 flex flex-col items-center">
                  <div 
                    className="w-full bg-blue-500 rounded-t"
                    style={{ 
                      height: `${(value / Math.max(...(mockChartData.datasets[0]?.data || []))) * 200}px`,
                      minHeight: '4px'
                    }}
                  />
                  <span className="text-xs text-muted-foreground mt-2">
                    {mockChartData.labels[index]}
                  </span>
                </div>
              ))}
            </div>
            <div className="mt-4 text-center text-sm text-muted-foreground">
              –¢—Ä–∞—Ñ–∏–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            </div>
          </CardContent>
        </Card>

        {/* –ì—Ä–∞—Ñ–∏–∫ –∫–æ–Ω–≤–µ—Ä—Å–∏–π */}
        <Card>
          <CardHeader>
            <CardTitle>–ö–æ–Ω–≤–µ—Ä—Å–∏–∏</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="h-64 flex items-end justify-between gap-2">
              {mockChartData.datasets[1]?.data.map((value, index) => (
                <div key={index} className="flex-1 flex flex-col items-center">
                  <div 
                    className="w-full bg-green-500 rounded-t"
                    style={{ 
                      height: `${(value / Math.max(...(mockChartData.datasets[1]?.data || []))) * 200}px`,
                      minHeight: '4px'
                    }}
                  />
                  <span className="text-xs text-muted-foreground mt-2">
                    {mockChartData.labels[index]}
                  </span>
                </div>
              ))}
            </div>
            <div className="mt-4 text-center text-sm text-muted-foreground">
              –ö–æ–Ω–≤–µ—Ä—Å–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            </div>
          </CardContent>
        </Card>
      </div>

      {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* –¢–æ–ø —Å—Ç—Ä–∞–Ω–∏—Ü */}
        <Card>
          <CardHeader>
            <CardTitle>–¢–æ–ø —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {[
                { page: '/glavnaya', traffic: 2340, change: 12.5 },
                { page: '/o-kompanii', traffic: 1890, change: 8.2 },
                { page: '/uslugi', traffic: 1560, change: -2.1 },
                { page: '/kontakty', traffic: 1230, change: 15.3 },
                { page: '/blog', traffic: 980, change: 25.4 }
              ].map((item, index) => (
                <div key={index} className="flex items-center justify-between">
                  <div className="flex-1 min-w-0">
                    <div className="text-sm font-medium truncate">{item.page}</div>
                    <div className="text-xs text-muted-foreground">
                      {item.traffic.toLocaleString()} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
                    </div>
                  </div>
                  <div className={`text-sm ${item.change > 0 ? 'text-green-600' : 'text-red-600'}`}>
                    {item.change > 0 ? '+' : ''}{item.change}%
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞ */}
        <Card>
          <CardHeader>
            <CardTitle>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {[
                { source: '–ü–æ–∏—Å–∫', percentage: 45, color: 'bg-blue-500' },
                { source: '–ü—Ä—è–º–æ–π', percentage: 25, color: 'bg-green-500' },
                { source: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏', percentage: 20, color: 'bg-purple-500' },
                { source: '–†–µ—Ñ–µ—Ä–∞–ª—ã', percentage: 10, color: 'bg-yellow-500' }
              ].map((item, index) => (
                <div key={index}>
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-medium">{item.source}</span>
                    <span className="text-sm text-muted-foreground">{item.percentage}%</span>
                  </div>
                  <div className="w-full bg-muted rounded-full h-2">
                    <div 
                      className={`h-2 rounded-full ${item.color}`}
                      style={{ width: `${item.percentage}%` }}
                    />
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* SEO –º–µ—Ç—Ä–∏–∫–∏ */}
        <Card>
          <CardHeader>
            <CardTitle>SEO –º–µ—Ç—Ä–∏–∫–∏</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {[
                { metric: '–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞–Ω–∏—Ü', value: 156, status: 'good' },
                { metric: '–û—à–∏–±–∫–∏ 404', value: 3, status: 'warning' },
                { metric: '–î—É–±–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞', value: 0, status: 'good' },
                { metric: '–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏', value: '2.3—Å', status: 'good' },
                { metric: '–ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è', value: '100%', status: 'good' }
              ].map((item, index) => (
                <div key={index} className="flex items-center justify-between">
                  <span className="text-sm">{item.metric}</span>
                  <div className="flex items-center gap-2">
                    <span className="text-sm font-medium">{item.value}</span>
                    <div className={`w-2 h-2 rounded-full ${
                      item.status === 'good' ? 'bg-green-500' : 
                      item.status === 'warning' ? 'bg-yellow-500' : 'bg-red-500'
                    }`} />
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é */}
      <Card>
        <CardHeader>
          <CardTitle>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-4">
              <h4 className="font-medium text-green-600">‚úÖ –ß—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ</h4>
              <ul className="space-y-2 text-sm">
                <li className="flex items-start gap-2">
                  <span className="text-green-500 mt-1">‚Ä¢</span>
                  <span>–í—ã—Å–æ–∫–∏–π —Ä–æ—Å—Ç –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ (+12.5%)</span>
                </li>
                <li className="flex items-start gap-2">
                  <span className="text-green-500 mt-1">‚Ä¢</span>
                  <span>–û—Ç–ª–∏—á–Ω–∞—è –º–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è (100%)</span>
                </li>
                <li className="flex items-start gap-2">
                  <span className="text-green-500 mt-1">‚Ä¢</span>
                  <span>–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥—É–±–ª–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞</span>
                </li>
              </ul>
            </div>
            <div className="space-y-4">
              <h4 className="font-medium text-yellow-600">‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è</h4>
              <ul className="space-y-2 text-sm">
                <li className="flex items-start gap-2">
                  <span className="text-yellow-500 mt-1">‚Ä¢</span>
                  <span>–£–≤–µ–ª–∏—á–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Å–∞–π—Ç–µ (—Å–µ–π—á–∞—Å 4.2 –º–∏–Ω)</span>
                </li>
                <li className="flex items-start gap-2">
                  <span className="text-yellow-500 mt-1">‚Ä¢</span>
                  <span>–ò—Å–ø—Ä–∞–≤–∏—Ç—å 3 –æ—à–∏–±–∫–∏ 404</span>
                </li>
                <li className="flex items-start gap-2">
                  <span className="text-yellow-500 mt-1">‚Ä¢</span>
                  <span>–£–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ /uslugi</span>
                </li>
              </ul>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

export default Analytics 