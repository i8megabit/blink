"""
üé® –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SVG –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏ –≤ reLink
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å LLM —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
"""

import asyncio
import json
import logging
from datetime import datetime
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass

import httpx
import numpy as np
from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession
from pydantic import BaseModel, Field

from .config import settings
from .models import Diagram, DiagramEmbedding, DiagramTemplate, AnalysisHistory, User
from .exceptions import OllamaException, DatabaseException
from .monitoring import logger, monitor_operation

@dataclass
class DiagramGenerationRequest:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∏–∞–≥—Ä–∞–º–º—ã."""
    diagram_type: str
    title: str
    description: str
    components: List[Dict[str, Any]]
    relationships: List[Dict[str, Any]]
    style_config: Optional[Dict[str, Any]] = None
    analysis_id: Optional[int] = None
    user_id: Optional[int] = None

@dataclass
class DiagramGenerationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã."""
    diagram_id: int
    svg_content: str
    quality_score: float
    generation_time: float
    model_used: str
    confidence_score: float
    validation_result: Dict[str, Any]

class DiagramStyle(BaseModel):
    """–°—Ç–∏–ª—å –¥–∏–∞–≥—Ä–∞–º–º—ã."""
    theme: str = Field(default="modern", description="–¢–µ–º–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã")
    colors: Dict[str, str] = Field(default_factory=dict, description="–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞")
    font_family: str = Field(default="Arial, sans-serif", description="–®—Ä–∏—Ñ—Ç")
    font_size: int = Field(default=12, description="–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞")
    stroke_width: int = Field(default=2, description="–¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–π")
    opacity: float = Field(default=0.9, description="–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å")

class DiagramService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SVG –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏."""
    
    def __init__(self):
        self.ollama_url = settings.OLLAMA_BASE_URL
        self.default_model = settings.DEFAULT_LLM_MODEL
        self.client = httpx.AsyncClient(timeout=30.0)
        
    async def __aenter__(self):
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        await self.client.aclose()
    
    @monitor_operation("diagram_generation")
    async def generate_diagram(
        self, 
        request: DiagramGenerationRequest,
        db: AsyncSession
    ) -> DiagramGenerationResult:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SVG –¥–∏–∞–≥—Ä–∞–º–º—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LLM."""
        start_time = datetime.now()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è —Ç–∏–ø–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã
            template = await self._get_template(request.diagram_type, db)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM
            prompt = self._build_prompt(request, template)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SVG —á–µ—Ä–µ–∑ LLM
            svg_content = await self._generate_svg_with_llm(prompt)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –æ—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
            validation_result = await self._validate_svg(svg_content)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            diagram = await self._save_diagram(
                request, svg_content, validation_result, db
            )
            
            # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è RAG
            await self._create_embeddings(diagram, db)
            
            generation_time = (datetime.now() - start_time).total_seconds()
            
            return DiagramGenerationResult(
                diagram_id=diagram.id,
                svg_content=svg_content,
                quality_score=validation_result["quality_score"],
                generation_time=generation_time,
                model_used=self.default_model,
                confidence_score=validation_result.get("confidence_score", 0.8),
                validation_result=validation_result
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")
            raise OllamaException(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")
    
    async def _get_template(self, diagram_type: str, db: AsyncSession) -> Optional[DiagramTemplate]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Ç–∏–ø–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã."""
        try:
            result = await db.execute(
                select(DiagramTemplate).where(
                    DiagramTemplate.diagram_type == diagram_type,
                    DiagramTemplate.is_active == True
                ).order_by(DiagramTemplate.usage_count.desc())
            )
            template = result.scalar_one_or_none()
            
            if not template:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω
                return self._get_default_template(diagram_type)
            
            return template
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
            return self._get_default_template(diagram_type)
    
    def _get_default_template(self, diagram_type: str) -> DiagramTemplate:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞."""
        base_prompts = {
            "system_architecture": """
–°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é SVG –¥–∏–∞–≥—Ä–∞–º–º—É –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–∏—Å—Ç–µ–º—ã:

–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {components}
–°–≤—è–∑–∏: {relationships}
–°—Ç–∏–ª—å: {style}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏
2. –î–æ–±–∞–≤—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∞–Ω–∏–º–∞—Ü–∏–∏
3. –í–∫–ª—é—á–∏ –ª–µ–≥–µ–Ω–¥—É –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
4. –û–±–µ—Å–ø–µ—á—å accessibility
5. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –¥–ª—è –≤–µ–±-–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

–†–∞–∑–º–µ—Ä—ã: 800x600 –ø–∏–∫—Å–µ–ª–µ–π
""",
            "data_flow": """
–°–æ–∑–¥–∞–π SVG –¥–∏–∞–≥—Ä–∞–º–º—É –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö:

–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {components}
–°–≤—è–∑–∏: {relationships}
–°—Ç–∏–ª—å: {style}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –ü–æ–∫–∞–∂–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ —Å—Ç—Ä–µ–ª–∫–∞–º–∏
2. –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
3. –î–æ–±–∞–≤—å –∞–Ω–∏–º–∞—Ü–∏—é –¥–≤–∏–∂–µ–Ω–∏—è
4. –°–¥–µ–ª–∞–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π
5. –í–∫–ª—é—á–∏ tooltips

–†–∞–∑–º–µ—Ä—ã: 800x600 –ø–∏–∫—Å–µ–ª–µ–π
""",
            "microservices": """
–°–æ–∑–¥–∞–π SVG –¥–∏–∞–≥—Ä–∞–º–º—É –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:

–°–µ—Ä–≤–∏—Å—ã: {components}
–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: {relationships}
–°—Ç–∏–ª—å: {style}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –ü–æ–∫–∞–∂–∏ API Gateway
2. –û—Ç–æ–±—Ä–∞–∑–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã –∏ –ë–î
3. –î–æ–±–∞–≤—å –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
4. –í–∫–ª—é—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
5. –°–¥–µ–ª–∞–π –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π

–†–∞–∑–º–µ—Ä—ã: 800x600 –ø–∏–∫—Å–µ–ª–µ–π
"""
        }
        
        return DiagramTemplate(
            name=f"default_{diagram_type}",
            description=f"–ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è {diagram_type}",
            diagram_type=diagram_type,
            prompt_template=base_prompts.get(diagram_type, base_prompts["system_architecture"]),
            default_style={},
            is_active=True
        )
    
    def _build_prompt(self, request: DiagramGenerationRequest, template: DiagramTemplate) -> str:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è LLM."""
        style = request.style_config or template.default_style
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ —Å–≤—è–∑–∏
        components_text = "\n".join([
            f"- {comp.get('name', 'Component')}: {comp.get('description', '')}"
            for comp in request.components
        ])
        
        relationships_text = "\n".join([
            f"- {rel.get('from', '')} -> {rel.get('to', '')}: {rel.get('type', 'connection')}"
            for rel in request.relationships
        ])
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
        prompt = f"""
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö SVG –¥–∏–∞–≥—Ä–∞–º–º. –°–æ–∑–¥–∞–π –¥–∏–∞–≥—Ä–∞–º–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:

## –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:

### 1. –°–¢–†–£–ö–¢–£–†–ê SVG:
- –ò—Å–ø–æ–ª—å–∑—É–π viewBox –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏
- –î–æ–±–∞–≤—å xmlns="http://www.w3.org/2000/svg"
- –£—Å—Ç–∞–Ω–æ–≤–∏ width="800" height="600"
- –í–∫–ª—é—á–∏ preserveAspectRatio="xMidYMid meet"

### 2. –ö–û–ú–ü–û–ù–ï–ù–¢–´ –°–ò–°–¢–ï–ú–´:
{components_text}

### 3. –°–í–Ø–ó–ò –ú–ï–ñ–î–£ –ö–û–ú–ü–û–ù–ï–ù–¢–ê–ú–ò:
{relationships_text}

### 4. –î–ò–ó–ê–ô–ù-–°–ò–°–¢–ï–ú–ê:
- –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞: {style.get('colors', {})}
- –®—Ä–∏—Ñ—Ç: {style.get('font_family', 'Arial, sans-serif')}
- –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞: {style.get('font_size', 12)}px
- –¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–π: {style.get('stroke_width', 2)}px

### 5. –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –≠–õ–ï–ú–ï–ù–¢–´:
- –ò—Å–ø–æ–ª—å–∑—É–π <defs> –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
- –î–æ–±–∞–≤—å <filter> –¥–ª—è —Ç–µ–Ω–µ–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
- –°–æ–∑–¥–∞–π <linearGradient> –¥–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–π <clipPath> –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤

### 6. –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–°–¢–¨:
- –î–æ–±–∞–≤—å <title> –∏ <desc> –¥–ª—è accessibility
- –ò—Å–ø–æ–ª—å–∑—É–π CSS hover —ç—Ñ—Ñ–µ–∫—Ç—ã
- –í–∫–ª—é—á–∏ JavaScript –¥–ª—è –¥–∏–Ω–∞–º–∏–∫–∏
- –î–æ–±–∞–≤—å data-–∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö

### 7. –ê–ù–ò–ú–ê–¶–ò–ò:
- –ò—Å–ø–æ–ª—å–∑—É–π <animate> –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π
- –î–æ–±–∞–≤—å <animateTransform> –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π
- –í–∫–ª—é—á–∏ <animateMotion> –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –ø—É—Ç–∏
- –£—Å—Ç–∞–Ω–æ–≤–∏ dur="2s" –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏

## –ü–†–ò–ú–ï–† –°–¢–†–£–ö–¢–£–†–´ SVG:

```svg
<svg xmlns="http://www.w3.org/2000/svg" width="800" height="600" viewBox="0 0 800 600">
  <defs>
    <linearGradient id="componentGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#4CAF50;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#45a049;stop-opacity:1" />
    </linearGradient>
    <filter id="shadow" x="-50%" y="-50%" width="200%" height="200%">
      <feDropShadow dx="2" dy="2" stdDeviation="3" flood-color="#000000" flood-opacity="0.3"/>
    </filter>
  </defs>
  
  <title>{request.title}</title>
  <desc>{request.description}</desc>
  
  <g id="components">
    <!-- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã -->
  </g>
  
  <g id="relationships">
    <!-- –°—Ç—Ä–µ–ª–∫–∏ –∏ –ª–∏–Ω–∏–∏ -->
  </g>
  
  <g id="legend">
    <!-- –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ -->
  </g>
  
  <style>
    .component {{ cursor: pointer; transition: all 0.3s; }}
    .component:hover {{ filter: brightness(1.2) drop-shadow(0 0 10px rgba(0,0,0,0.3)); }}
  </style>
  
  <script>
    // JavaScript –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  </script>
</svg>
```

## –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –ì–µ–Ω–µ—Ä–∏—Ä—É–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π SVG –∫–æ–¥
2. –ù–µ –¥–æ–±–∞–≤–ª—è–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤–Ω–µ SVG
3. –ò—Å–ø–æ–ª—å–∑—É–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –∏–º–µ–Ω–∞ –¥–ª—è id –∏ class
4. –û–±–µ—Å–ø–µ—á—å accessibility (ARIA labels)
5. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –¥–ª—è –≤–µ–±-–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

–¢–∏–ø –¥–∏–∞–≥—Ä–∞–º–º—ã: {request.diagram_type}
–ó–∞–≥–æ–ª–æ–≤–æ–∫: {request.title}
–û–ø–∏—Å–∞–Ω–∏–µ: {request.description}

–°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é SVG –¥–∏–∞–≥—Ä–∞–º–º—É, —Å–ª–µ–¥—É—è –≤—Å–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –≤—ã—à–µ.
"""
        
        return prompt
    
    async def _generate_svg_with_llm(self, prompt: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SVG —Å –ø–æ–º–æ—â—å—é LLM."""
        try:
            payload = {
                "model": self.default_model,
                "prompt": prompt,
                "stream": False,
                "options": {
                    "temperature": 0.3,
                    "top_p": 0.9,
                    "top_k": 50,
                    "repeat_penalty": 1.1,
                    "num_ctx": 4096
                }
            }
            
            response = await self.client.post(
                f"{self.ollama_url}/api/generate",
                json=payload
            )
            
            if response.status_code != 200:
                raise OllamaException(f"Ollama –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
            
            result = response.json()
            svg_content = result.get("response", "")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º SVG –∏–∑ –æ—Ç–≤–µ—Ç–∞
            import re
            svg_match = re.search(r'<svg.*?</svg>', svg_content, re.DOTALL | re.IGNORECASE)
            if svg_match:
                return svg_match.group(0)
            else:
                # –ï—Å–ª–∏ SVG –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π
                return self._create_fallback_svg()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SVG —Å LLM: {e}")
            return self._create_fallback_svg()
    
    def _create_fallback_svg(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ SVG –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
        return """
<svg xmlns="http://www.w3.org/2000/svg" width="800" height="600" viewBox="0 0 800 600">
  <defs>
    <linearGradient id="fallbackGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#FF6B6B;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#D63031;stop-opacity:1" />
    </linearGradient>
  </defs>
  
  <title>Fallback Diagram</title>
  <desc>–ë–∞–∑–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</desc>
  
  <rect x="50" y="50" width="700" height="500" fill="url(#fallbackGradient)" rx="10"/>
  <text x="400" y="300" text-anchor="middle" fill="white" font-size="24" font-family="Arial, sans-serif">
    –î–∏–∞–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞
  </text>
  <text x="400" y="330" text-anchor="middle" fill="white" font-size="16" font-family="Arial, sans-serif">
    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑
  </text>
</svg>
"""
    
    async def _validate_svg(self, svg_content: str) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ SVG."""
        validation_result = {
            "is_valid": False,
            "errors": [],
            "warnings": [],
            "quality_score": 0.0,
            "accessibility_score": 0.0,
            "performance_score": 0.0,
            "confidence_score": 0.8
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É SVG
            if not svg_content.strip().startswith('<svg'):
                validation_result["errors"].append("SVG –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Ç–µ–≥–∞ <svg>")
                return validation_result
            
            # –ü–∞—Ä—Å–∏–º SVG
            import xml.etree.ElementTree as ET
            try:
                root = ET.fromstring(svg_content)
            except ET.ParseError as e:
                validation_result["errors"].append(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ SVG: {e}")
                return validation_result
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
            if not root.get('xmlns'):
                validation_result["warnings"].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç xmlns –∞—Ç—Ä–∏–±—É—Ç")
            
            if not root.get('viewBox'):
                validation_result["warnings"].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç viewBox –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            required_sections = ['components', 'relationships', 'legend']
            for section in required_sections:
                if not root.find(f".//g[@id='{section}']"):
                    validation_result["warnings"].append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è {section}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º accessibility
            accessibility_score = self._check_accessibility(root)
            validation_result["accessibility_score"] = accessibility_score
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            performance_score = self._check_performance(root)
            validation_result["performance_score"] = performance_score
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π score
            total_score = 0.0
            max_score = 100.0
            
            # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (30 –±–∞–ª–ª–æ–≤)
            if not validation_result["errors"]:
                total_score += 30
            
            # Accessibility (25 –±–∞–ª–ª–æ–≤)
            total_score += accessibility_score * 25
            
            # Performance (25 –±–∞–ª–ª–æ–≤)
            total_score += performance_score * 25
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (20 –±–∞–ª–ª–æ–≤)
            feature_score = 0.0
            animations = root.findall(".//animate") + root.findall(".//animateTransform") + root.findall(".//animateMotion")
            if animations:
                feature_score += 0.5
            if root.find(".//style") or root.find(".//script"):
                feature_score += 0.3
            if root.find(".//title") or root.find(".//desc"):
                feature_score += 0.2
            total_score += feature_score * 20
            
            validation_result["quality_score"] = min(total_score, max_score) / max_score
            validation_result["is_valid"] = len(validation_result["errors"]) == 0
            
        except Exception as e:
            validation_result["errors"].append(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        
        return validation_result
    
    def _check_accessibility(self, root) -> float:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ accessibility."""
        score = 0.0
        checks = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ title
        if root.find(".//title") is not None:
            score += 1.0
        checks += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ desc
        if root.find(".//desc") is not None:
            score += 1.0
        checks += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º aria-label
        aria_labels = root.findall(".//*[@aria-label]")
        if aria_labels:
            score += 1.0
        checks += 1
        
        return score / checks if checks > 0 else 0.0
    
    def _check_performance(self, root) -> float:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        score = 0.0
        checks = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        total_elements = len(root.findall(".//*"))
        if total_elements < 100:
            score += 1.0
        elif total_elements < 200:
            score += 0.5
        checks += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ defs
        if root.find(".//defs") is not None:
            score += 1.0
        checks += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø
        groups = root.findall(".//g")
        if groups:
            score += 1.0
        checks += 1
        
        return score / checks if checks > 0 else 0.0
    
    async def _save_diagram(
        self, 
        request: DiagramGenerationRequest,
        svg_content: str,
        validation_result: Dict[str, Any],
        db: AsyncSession
    ) -> Diagram:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –≤ –ë–î."""
        try:
            diagram = Diagram(
                analysis_id=request.analysis_id,
                user_id=request.user_id,
                diagram_type=request.diagram_type,
                title=request.title,
                description=request.description,
                svg_content=svg_content,
                svg_metadata={
                    "components_count": len(request.components),
                    "relationships_count": len(request.relationships),
                    "style_config": request.style_config or {}
                },
                quality_score=validation_result["quality_score"],
                accessibility_score=validation_result["accessibility_score"],
                performance_score=validation_result["performance_score"],
                validation_errors=validation_result["errors"],
                optimization_suggestions=validation_result["warnings"],
                llm_model_used=self.default_model,
                confidence_score=validation_result.get("confidence_score", 0.8),
                components=request.components,
                relationships=request.relationships,
                style_config=request.style_config or {},
                status="generated"
            )
            
            db.add(diagram)
            await db.commit()
            await db.refresh(diagram)
            
            return diagram
            
        except Exception as e:
            await db.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")
            raise DatabaseException(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")
    
    async def _create_embeddings(self, diagram: Diagram, db: AsyncSession):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è RAG –ø–æ–∏—Å–∫–∞."""
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
            title_embedding = await self._create_text_embedding(diagram.title)
            title_emb = DiagramEmbedding(
                diagram_id=diagram.id,
                embedding_type="title",
                vector_model="text-embedding-3-small",
                embedding_vector=json.dumps(title_embedding.tolist()),
                dimension=len(title_embedding),
                context_text=diagram.title,
                semantic_keywords=self._extract_keywords(diagram.title)
            )
            db.add(title_emb)
            
            # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è
            if diagram.description:
                desc_embedding = await self._create_text_embedding(diagram.description)
                desc_emb = DiagramEmbedding(
                    diagram_id=diagram.id,
                    embedding_type="description",
                    vector_model="text-embedding-3-small",
                    embedding_vector=json.dumps(desc_embedding.tolist()),
                    dimension=len(desc_embedding),
                    context_text=diagram.description,
                    semantic_keywords=self._extract_keywords(diagram.description)
                )
                db.add(desc_emb)
            
            # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            components_text = " ".join([
                f"{comp.get('name', '')} {comp.get('description', '')}"
                for comp in diagram.components
            ])
            if components_text:
                comp_embedding = await self._create_text_embedding(components_text)
                comp_emb = DiagramEmbedding(
                    diagram_id=diagram.id,
                    embedding_type="components",
                    vector_model="text-embedding-3-small",
                    embedding_vector=json.dumps(comp_embedding.tolist()),
                    dimension=len(comp_embedding),
                    context_text=components_text,
                    semantic_keywords=self._extract_keywords(components_text)
                )
                db.add(comp_emb)
            
            await db.commit()
            
        except Exception as e:
            await db.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
    
    async def _create_text_embedding(self, text: str) -> np.ndarray:
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞."""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Ollama –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
            payload = {
                "model": "nomic-embed-text",
                "prompt": text
            }
            
            response = await self.client.post(
                f"{self.ollama_url}/api/embeddings",
                json=payload
            )
            
            if response.status_code == 200:
                result = response.json()
                return np.array(result.get("embedding", []))
            else:
                # Fallback: —Å–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–±–µ–¥–¥–∏–Ω–≥
                return np.random.rand(384)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {e}")
            return np.random.rand(384)
    
    def _extract_keywords(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å –ø–æ–º–æ—â—å—é NLTK –∏–ª–∏ spaCy
        import re
        words = re.findall(r'\b\w+\b', text.lower())
        # –£–±–∏—Ä–∞–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
        stop_words = {'–∏', '–≤', '–Ω–∞', '—Å', '–ø–æ', '–¥–ª—è', '–æ—Ç', '–¥–æ', '–∏–∑', '–∫', '—É', '–æ', '–æ–±', '–∑–∞', '–ø—Ä–∏', '–ø–æ–¥', '–Ω–∞–¥'}
        keywords = [word for word in words if word not in stop_words and len(word) > 2]
        return list(set(keywords))[:10]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-10 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤
    
    @monitor_operation("diagram_search")
    async def search_diagrams(
        self,
        query: str,
        diagram_type: Optional[str] = None,
        limit: int = 10,
        db: AsyncSession = None
    ) -> List[Diagram]:
        """–ü–æ–∏—Å–∫ –¥–∏–∞–≥—Ä–∞–º–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG."""
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            query_embedding = await self._create_text_embedding(query)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
            result = await db.execute(
                select(DiagramEmbedding).where(
                    DiagramEmbedding.embedding_type.in_(["title", "description", "components"])
                )
            )
            embeddings = result.scalars().all()
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–¥—Å—Ç–≤–æ
            similarities = []
            for emb in embeddings:
                try:
                    emb_vector = np.array(json.loads(emb.embedding_vector))
                    similarity = np.dot(query_embedding, emb_vector) / (
                        np.linalg.norm(query_embedding) * np.linalg.norm(emb_vector)
                    )
                    similarities.append((similarity, emb.diagram_id))
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ö–æ–¥—Å—Ç–≤–∞: {e}")
                    continue
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ö–æ–¥—Å—Ç–≤—É
            similarities.sort(key=lambda x: x[0], reverse=True)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—ã
            diagram_ids = [diagram_id for _, diagram_id in similarities[:limit]]
            
            if diagram_ids:
                result = await db.execute(
                    select(Diagram).where(
                        Diagram.id.in_(diagram_ids),
                        Diagram.status == "generated"
                    )
                )
                diagrams = result.scalars().all()
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É —Å—Ö–æ–¥—Å—Ç–≤–∞
                diagram_dict = {d.id: d for d in diagrams}
                sorted_diagrams = [diagram_dict[diagram_id] for diagram_id in diagram_ids if diagram_id in diagram_dict]
                
                return sorted_diagrams
            
            return []
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–∏–∞–≥—Ä–∞–º–º: {e}")
            return []
    
    @monitor_operation("diagram_optimization")
    async def optimize_diagram(self, diagram_id: int, db: AsyncSession) -> Dict[str, Any]:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–∏–∞–≥—Ä–∞–º–º—ã."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
            result = await db.execute(
                select(Diagram).where(Diagram.id == diagram_id)
            )
            diagram = result.scalar_one_or_none()
            
            if not diagram:
                raise DatabaseException("–î–∏–∞–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
            validation_result = await self._validate_svg(diagram.svg_content)
            
            # –ï—Å–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∏–∑–∫–æ–µ, –ø—ã—Ç–∞–µ–º—Å—è —É–ª—É—á—à–∏—Ç—å
            if validation_result["quality_score"] < 0.7:
                # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                improved_request = DiagramGenerationRequest(
                    diagram_type=diagram.diagram_type,
                    title=diagram.title,
                    description=diagram.description,
                    components=diagram.components,
                    relationships=diagram.relationships,
                    style_config=diagram.style_config,
                    analysis_id=diagram.analysis_id,
                    user_id=diagram.user_id
                )
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
                improved_result = await self.generate_diagram(improved_request, db)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
                diagram.svg_content = improved_result.svg_content
                diagram.quality_score = improved_result.quality_score
                diagram.accessibility_score = improved_result.validation_result["accessibility_score"]
                diagram.performance_score = improved_result.validation_result["performance_score"]
                diagram.validation_errors = improved_result.validation_result["errors"]
                diagram.optimization_suggestions = improved_result.validation_result["warnings"]
                diagram.status = "optimized"
                diagram.version += 1
                
                await db.commit()
                
                return {
                    "success": True,
                    "improved_quality": improved_result.quality_score,
                    "original_quality": validation_result["quality_score"],
                    "improvement": improved_result.quality_score - validation_result["quality_score"]
                }
            
            return {
                "success": True,
                "message": "–î–∏–∞–≥—Ä–∞–º–º–∞ —É–∂–µ –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ",
                "quality_score": validation_result["quality_score"]
            }
            
        except Exception as e:
            await db.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")
            raise DatabaseException(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
diagram_service = DiagramService() 