#!/bin/bash
# üöÄ create-microservice.sh - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞

set -e

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SERVICE_NAME=$1
SERVICE_PORT=$2
SERVICE_DESCRIPTION=$3

if [ -z "$SERVICE_NAME" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –∏–º—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞"
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./create-microservice.sh <service_name> <port> <description>"
    exit 1
fi

if [ -z "$SERVICE_PORT" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –ø–æ—Ä—Ç –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞"
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./create-microservice.sh <service_name> <port> <description>"
    exit 1
fi

if [ -z "$SERVICE_DESCRIPTION" ]; then
    SERVICE_DESCRIPTION="–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å $SERVICE_NAME –¥–ª—è reLink"
fi

echo "üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞: $SERVICE_NAME"

# 1. –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
mkdir -p $SERVICE_NAME/{app,tests,scripts,config}
mkdir -p $SERVICE_NAME/app/{api,models,services,utils}

# 2. –°–æ–∑–¥–∞–Ω–∏–µ Dockerfile
cat > $SERVICE_NAME/Dockerfile << EOF
# üê≥ $SERVICE_NAME - –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å reLink
FROM eberil/relink-base:latest

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ —Å–µ—Ä–≤–∏—Å–∞
COPY . .

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å–µ—Ä–≤–∏—Å–∞
RUN pip install --no-cache-dir -r requirements.txt

# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ—Ä—Ç–∞
EXPOSE $SERVICE_PORT

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
CMD ["python", "-m", "app.main"]
EOF

# 3. –°–æ–∑–¥–∞–Ω–∏–µ docker-compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
cat > $SERVICE_NAME/docker-compose.yml << EOF
version: '3.8'

services:
  $SERVICE_NAME:
    build:
      context: .
      dockerfile: Dockerfile
    image: eberil/relink-$SERVICE_NAME:latest
    ports:
      - "$SERVICE_PORT:$SERVICE_PORT"
    environment:
      - SERVICE_NAME=$SERVICE_NAME
      - SERVICE_PORT=$SERVICE_PORT
      - DATABASE_URL=postgresql+asyncpg://seo_user:seo_pass@db:5432/seo_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - OLLAMA_URL=http://ollama:11434
    depends_on:
      - redis
      - db
      - ollama
    networks:
      - relink-network

networks:
  relink-network:
    external: true
EOF

# 4. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
cat > $SERVICE_NAME/app/main.py << EOF
"""
$SERVICE_NAME - –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å reLink
$SERVICE_DESCRIPTION
"""

from fastapi import FastAPI
from bootstrap.main import create_app, add_service_routes
from bootstrap.config import get_settings

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –±—É—Ç—Å—Ç—Ä–∞–ø–æ–º
app = create_app(
    title="$SERVICE_NAME",
    description="$SERVICE_DESCRIPTION",
    version="1.0.0"
)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ—É—Ç–æ–≤ —Å–µ—Ä–≤–∏—Å–∞
from app.api import router
add_service_routes(app, router, prefix="/api/v1")

if __name__ == "__main__":
    import uvicorn
    settings = get_settings()
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=$SERVICE_PORT,
        reload=settings.DEBUG
    )
EOF

# 5. –°–æ–∑–¥–∞–Ω–∏–µ API —Ä–æ—É—Ç–µ—Ä–∞
cat > $SERVICE_NAME/app/api/__init__.py << EOF
from fastapi import APIRouter
from .routes import router

__all__ = ["router"]
EOF

cat > $SERVICE_NAME/app/api/routes.py << EOF
from fastapi import APIRouter, Depends
from bootstrap.llm_router import get_llm_router
from bootstrap.rag_service import get_rag_service
from bootstrap.ollama_client import get_ollama_client
from bootstrap.monitoring import get_service_monitor
import uuid

router = APIRouter(tags=["$SERVICE_NAME"])

@router.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "service": "$SERVICE_NAME",
        "description": "$SERVICE_DESCRIPTION"
    }

@router.get("/api/v1/endpoints")
async def get_endpoints():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    return {
        "service": "$SERVICE_NAME",
        "endpoints": [
            "/health",
            "/api/v1/endpoints"
        ]
    }

@router.get("/api/v1/metrics")
async def get_metrics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–µ—Ä–≤–∏—Å–∞"""
    monitor = get_service_monitor()
    return monitor.get_metrics_summary()
EOF

# 6. –°–æ–∑–¥–∞–Ω–∏–µ requirements.txt
cat > $SERVICE_NAME/requirements.txt << EOF
# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è $SERVICE_NAME
# –ë–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ eberil/relink-base:latest

# –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
# fastapi
# uvicorn
# pydantic
EOF

# 7. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
cat > $SERVICE_NAME/tests/__init__.py << EOF
# –¢–µ—Å—Ç—ã –¥–ª—è $SERVICE_NAME
EOF

cat > $SERVICE_NAME/tests/test_main.py << EOF
import pytest
from fastapi.testclient import TestClient
from app.main import app

client = TestClient(app)

def test_health_check():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
    response = client.get("/health")
    assert response.status_code == 200
    assert response.json()["service"] == "$SERVICE_NAME"

def test_endpoints():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    response = client.get("/api/v1/endpoints")
    assert response.status_code == 200
    assert response.json()["service"] == "$SERVICE_NAME"

def test_metrics():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫"""
    response = client.get("/api/v1/metrics")
    assert response.status_code == 200
    assert response.json()["service"] == "$SERVICE_NAME"
EOF

# 8. –°–æ–∑–¥–∞–Ω–∏–µ Makefile
cat > $SERVICE_NAME/Makefile << EOF
.PHONY: build run test clean

SERVICE_NAME = $SERVICE_NAME
PORT = $SERVICE_PORT

build:
	docker build -t eberil/relink-\$(SERVICE_NAME):latest .

run:
	docker-compose up -d

test:
	pytest tests/ -v

clean:
	docker-compose down
	docker rmi eberil/relink-\$(SERVICE_NAME):latest || true
EOF

# 9. –°–æ–∑–¥–∞–Ω–∏–µ README
cat > $SERVICE_NAME/README.md << EOF
# $SERVICE_NAME

$SERVICE_DESCRIPTION

## –ó–∞–ø—É—Å–∫

\`\`\`bash
make build
make run
\`\`\`

## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

\`\`\`bash
make test
\`\`\`

## API

- Health check: http://localhost:$SERVICE_PORT/health
- Swagger UI: http://localhost:$SERVICE_PORT/docs
- Metrics: http://localhost:$SERVICE_PORT/metrics
EOF

# 10. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π docker-compose.yml
echo "
  $SERVICE_NAME:
    build:
      context: ../$SERVICE_NAME
      dockerfile: Dockerfile
    image: eberil/relink-$SERVICE_NAME:latest
    ports:
      - \"$SERVICE_PORT:$SERVICE_PORT\"
    environment:
      - SERVICE_NAME=$SERVICE_NAME
      - SERVICE_PORT=$SERVICE_PORT
      - DATABASE_URL=postgresql+asyncpg://seo_user:seo_pass@db:5432/seo_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - OLLAMA_URL=http://ollama:11434
    depends_on:
      - redis
      - db
      - ollama
    networks:
      - relink-network" >> config/docker-compose.yml

# 11. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
mkdir -p frontend/src/components/services
cat > frontend/src/components/services/$SERVICE_NAME.tsx << EOF
import React from 'react';
import { Card, Button, Badge } from '../ui';

interface $SERVICE_NAME^Props {
  serviceName: string;
  description: string;
}

export const $SERVICE_NAME^Component: React.FC<$SERVICE_NAME^Props> = ({
  serviceName,
  description
}) => {
  const [isConnected, setIsConnected] = React.useState(false);

  const testConnection = async () => {
    try {
      const response = await fetch(\`http://localhost:$SERVICE_PORT/health\`);
      setIsConnected(response.ok);
    } catch (error) {
      setIsConnected(false);
    }
  };

  return (
    <Card>
      <div className="flex items-center justify-between">
        <div>
          <h3 className="text-lg font-semibold">{serviceName}</h3>
          <p className="text-gray-600">{description}</p>
        </div>
        <div className="flex items-center space-x-2">
          <Badge variant={isConnected ? "success" : "error"}>
            {isConnected ? "Connected" : "Disconnected"}
          </Badge>
          <Button onClick={testConnection} size="sm">
            Test
          </Button>
          <Button 
            onClick={() => window.open(\`http://localhost:$SERVICE_PORT/docs\`, '_blank')}
            size="sm"
            variant="outline"
          >
            Swagger
          </Button>
        </div>
      </div>
    </Card>
  );
};
EOF

# 12. Git –æ–ø–µ—Ä–∞—Ü–∏–∏
git add .
git commit -m "üöÄ Add $SERVICE_NAME microservice

- Created service structure
- Added Docker configuration
- Integrated with bootstrap
- Added frontend integration
- Added tests

Service: $SERVICE_NAME
Port: $SERVICE_PORT
Description: $SERVICE_DESCRIPTION"

echo "‚úÖ –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å $SERVICE_NAME —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"
echo "üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ –ø–∞–ø–∫–µ: $SERVICE_NAME"
echo "üê≥ Docker –æ–±—Ä–∞–∑: eberil/relink-$SERVICE_NAME:latest"
echo "üåê –ü–æ—Ä—Ç: $SERVICE_PORT"
echo "üìö Swagger UI: http://localhost:$SERVICE_PORT/docs"
echo "üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∞"
echo "üìù Git –∫–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω"

echo ""
echo "üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. cd $SERVICE_NAME"
echo "2. make build"
echo "3. make run"
echo "4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å http://localhost:$SERVICE_PORT/health" 