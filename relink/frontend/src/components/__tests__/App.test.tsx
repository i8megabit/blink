import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { describe, it, expect, vi, beforeEach } from 'vitest';
import App from '../../App';

// –ú–æ–∫–∞–µ–º fetch –¥–ª—è —Ç–µ—Å—Ç–æ–≤
global.fetch = vi.fn();

// –ú–æ–∫–∞–µ–º API –≤—ã–∑–æ–≤—ã
vi.mock('../../hooks/useApi', () => ({
  useApi: () => ({
    getOllamaStatus: vi.fn().mockResolvedValue({
      status: 'available',
      models: ['qwen2.5:7b-instruct', 'llama3.1:8b-instruct']
    }),
    getDomains: vi.fn().mockResolvedValue([
      { id: 1, domain: 'example.com', status: 'analyzed', score: 85 }
    ]),
    getAnalysisHistory: vi.fn().mockResolvedValue([
      { id: 1, domain: 'example.com', date: '2024-01-01', score: 85 }
    ]),
    getBenchmarks: vi.fn().mockResolvedValue([
      { id: 1, name: 'SEO Benchmark', score: 90 }
    ]),
    analyzeDomain: vi.fn().mockResolvedValue({ success: true }),
    exportResults: vi.fn().mockResolvedValue({ success: true })
  })
}));

// –ú–æ–∫–∞–µ–º WebSocket
global.WebSocket = vi.fn().mockImplementation(() => ({
  addEventListener: vi.fn(),
  removeEventListener: vi.fn(),
  send: vi.fn(),
  close: vi.fn(),
  readyState: 1
})) as any;

// –ú–æ–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
vi.mock('../../hooks/useNotifications', () => ({
  useNotifications: () => ({
    addNotification: vi.fn(),
    removeNotification: vi.fn(),
    notifications: [],
    selectedNotification: null,
    showNotificationDetails: vi.fn(),
    hideNotificationDetails: vi.fn(),
    pauseNotification: vi.fn(),
    resumeNotification: vi.fn()
  })
}));

describe('App Component', () => {
  const user = userEvent.setup();

  beforeEach(() => {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–∫–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    vi.clearAllMocks();
    
    // –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã API
    (global.fetch as any).mockResolvedValue({
      ok: true,
      json: async () => ({
        status: 'healthy',
        version: '4.1.1'
      })
    });
  });

  it('—Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫', () => {
    render(<App />);
    expect(screen.getAllByText(/reLink/i).length).toBeGreaterThan(0);
  });

  it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏', () => {
    render(<App />);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    expect(screen.getAllByText(/–î–∞—à–±–æ—Ä–¥/i).length).toBeGreaterThan(0);
    expect(screen.getAllByText(/–î–æ–º–µ–Ω—ã/i).length).toBeGreaterThan(0);
    expect(screen.getAllByText(/–ò—Å—Ç–æ—Ä–∏—è/i).length).toBeGreaterThan(0);
    expect(screen.getAllByText(/–ë–µ–Ω—á–º–∞—Ä–∫–∏/i).length).toBeGreaterThan(0);
    expect(screen.getAllByText(/–ù–∞—Å—Ç—Ä–æ–π–∫–∏/i).length).toBeGreaterThan(0);
  });

  it('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫', () => {
    render(<App />);
    expect(screen.getAllByText('reLink').length).toBeGreaterThan(0);
  });

  it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∞—à–±–æ—Ä–¥–∞', () => {
    render(<App />);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–∞—à–±–æ—Ä–¥–∞
    expect(screen.getByText(/–í—Å–µ–≥–æ –¥–æ–º–µ–Ω–æ–≤/i)).toBeInTheDocument();
    expect(screen.getByRole('heading', { level: 3, name: /–ê–Ω–∞–ª–∏–∑ –¥–æ–º–µ–Ω–∞/i })).toBeInTheDocument();
    expect(screen.getByText(/–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑/i)).toBeInTheDocument();
  });

  it('–ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏', async () => {
    render(<App />);
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –î–æ–º–µ–Ω—ã
    await user.click(screen.getByText(/üåê –î–æ–º–µ–Ω—ã/i));
    expect(screen.getAllByRole('heading', { level: 2, name: /–î–æ–º–µ–Ω—ã/i }).length).toBeGreaterThan(0);
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ò—Å—Ç–æ—Ä–∏—è
    await user.click(screen.getByText(/üìã –ò—Å—Ç–æ—Ä–∏—è/i));
    expect(screen.getAllByRole('heading', { level: 2, name: /–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤/i }).length).toBeGreaterThan(0);
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ë–µ–Ω—á–º–∞—Ä–∫–∏
    await user.click(screen.getByText(/‚ö° –ë–µ–Ω—á–º–∞—Ä–∫–∏/i));
    expect(screen.getAllByText(/–ë–µ–Ω—á–º–∞—Ä–∫–∏ –º–æ–¥–µ–ª–µ–π/i).length).toBeGreaterThan(0);
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    await user.click(screen.getByText(/üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏/i));
    expect(screen.getAllByText(/–ù–∞—Å—Ç—Ä–æ–π–∫–∏/i).length).toBeGreaterThan(0);
  });

  it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å Ollama', async () => {
    render(<App />);
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –°—Ç–∞—Ç—É—Å
    await user.click(screen.getByText(/‚öôÔ∏è –°—Ç–∞—Ç—É—Å/i));
    
    await waitFor(() => {
      expect(screen.getByRole('heading', { level: 2, name: /–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã/i })).toBeInTheDocument();
    });
  });

  it('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', () => {
    render(<App />);
    // –í–µ—Ä—Å–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    expect(screen.getAllByText(/reLink/i).length).toBeGreaterThan(0);
  });

  it('–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', async () => {
    // –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É API
    (global.fetch as any).mockRejectedValue(new Error('API Error'));
    
    render(<App />);
    
    // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ API
    expect(screen.getAllByText(/reLink/i).length).toBeGreaterThan(0);
  });

  it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', () => {
    // –ú–æ–∫–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç API
    (global.fetch as any).mockImplementation(() => 
      new Promise(resolve => setTimeout(() => resolve({
        ok: true,
        json: async () => ({ status: 'healthy', version: '4.1.1' })
      }), 100))
    );
    
    render(<App />);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
    expect(screen.getAllByText(/reLink/i).length).toBeGreaterThan(0);
  });
}); 