#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç UX-–±–æ—Ç–∞ reLink
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –±–æ—Ç–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º LLM
"""

import asyncio
import logging
import sys
import os
import time
from datetime import datetime
from typing import Dict, Any, Optional, List

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.core import UXBotCore
from app.config import settings
from app.models import UserProfile, TestScenario

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('ux_bot_comprehensive_test.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

# –û—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è LLM –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
llm_logger = logging.getLogger('LLM_Interaction')
llm_logger.setLevel(logging.INFO)

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤ LLM
llm_handler = logging.FileHandler('llm_interactions.log')
llm_handler.setFormatter(logging.Formatter('%(asctime)s - %(message)s'))
llm_logger.addHandler(llm_handler)


class ComprehensiveUXBotTest:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç UX-–±–æ—Ç–∞"""
    
    def __init__(self):
        self.ux_bot: Optional[UXBotCore] = None
        self.test_results: Dict[str, Any] = {}
        self.start_time = None
        self.end_time = None
        
    async def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        logger.info("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ê UX-–ë–û–¢–ê")
        logger.info("=" * 60)
        
        self.start_time = time.time()
        
        try:
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UX-–±–æ—Ç–∞
            await self._test_initialization()
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å LLM
            await self._test_llm_integration()
            
            # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            await self._test_self_integration()
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            await self._test_all_scenarios()
            
            # 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            await self._test_final_checks()
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º —Ç–µ—Å—Ç–µ: {e}")
            self.test_results["critical_error"] = str(e)
        
        finally:
            self.end_time = time.time()
            await self._generate_final_report()
    
    async def _test_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UX-–±–æ—Ç–∞"""
        logger.info("üìã 1. –¢–ï–°–¢ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò")
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ UX-–±–æ—Ç–∞
            self.ux_bot = UXBotCore()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ—Ñ–∏–ª–µ–º SEO-—ç–∫—Å–ø–µ—Ä—Ç–∞
            success = await self.ux_bot.initialize(user_profile_id="seo_expert")
            
            if success:
                logger.info("‚úÖ UX-–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                logger.info(f"   –°–µ—Å—Å–∏—è ID: {self.ux_bot.session_id}")
                logger.info(f"   –ü—Ä–æ—Ñ–∏–ª—å: {self.ux_bot.current_user_profile.name}")
                
                # –ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏
                await self.ux_bot.start_session()
                logger.info("‚úÖ –°–µ—Å—Å–∏—è UX-–±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞")
                
                self.test_results["initialization"] = "PASSED"
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UX-–±–æ—Ç–∞")
                self.test_results["initialization"] = "FAILED"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            self.test_results["initialization"] = f"ERROR: {e}"
    
    async def _test_llm_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å LLM"""
        logger.info("üß† 2. –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° LLM")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ollama
            ollama_status = await self._check_ollama_status()
            
            if ollama_status["available"]:
                logger.info("‚úÖ Ollama –¥–æ—Å—Ç—É–ø–µ–Ω")
                logger.info(f"   –ú–æ–¥–µ–ª–∏: {ollama_status['models_count']}")
                logger.info(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {', '.join(ollama_status['models'][:3])}...")
                
                # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM
                llm_response = await self._test_llm_request()
                
                if llm_response:
                    logger.info("‚úÖ LLM –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    llm_logger.info(f"ü§ñ LLM –û–¢–í–ï–¢: {llm_response[:200]}...")
                    self.test_results["llm_integration"] = "PASSED"
                else:
                    logger.warning("‚ö†Ô∏è LLM –∑–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                    self.test_results["llm_integration"] = "WARNING"
            else:
                logger.error("‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                self.test_results["llm_integration"] = "FAILED"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
            self.test_results["llm_integration"] = f"ERROR: {e}"
    
    async def _test_self_integration(self):
        """–¢–µ—Å—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ UX-–±–æ—Ç–∞"""
        logger.info("üéØ 3. –¢–ï–°–¢ –°–û–ë–°–¢–í–ï–ù–ù–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
        
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            logger.info("   –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É reLink...")
            await self.ux_bot.browser_service.navigate_to("http://localhost:3000")
            
            # –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Testing
            logger.info("   –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Testing...")
            testing_link = await self.ux_bot.browser_service.find_element("a[href*='testing'], [data-testid='testing-link']")
            
            if testing_link:
                logger.info("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ Testing –Ω–∞–π–¥–µ–Ω–∞")
                
                # –ö–ª–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ Testing
                await self.ux_bot.browser_service.click_element(testing_link)
                logger.info("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Testing")
                
                # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
                await asyncio.sleep(2)
                
                # –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UX-–±–æ—Ç–∞
                logger.info("   –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UX-–±–æ—Ç–∞...")
                ux_bot_elements = await self._find_ux_bot_elements()
                
                if ux_bot_elements:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UX-–±–æ—Ç–∞: {len(ux_bot_elements)}")
                    
                    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    await self._test_ux_bot_controls(ux_bot_elements)
                    
                    self.test_results["self_integration"] = "PASSED"
                else:
                    logger.warning("‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç—ã UX-–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    self.test_results["self_integration"] = "WARNING"
            else:
                logger.warning("‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ Testing –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                self.test_results["self_integration"] = "WARNING"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
            self.test_results["self_integration"] = f"ERROR: {e}"
    
    async def _test_all_scenarios(self):
        """–¢–µ—Å—Ç –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        logger.info("üìù 4. –¢–ï–°–¢ –í–°–ï–• –°–¶–ï–ù–ê–†–ò–ï–í")
        
        try:
            scenarios = self.ux_bot.scenario_service.list_scenarios()
            logger.info(f"   –î–æ—Å—Ç—É–ø–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(scenarios)}")
            
            # –ó–∞–ø—É—Å–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            self_test_scenario = self.ux_bot.scenario_service.get_scenario("ux_bot_self_test")
            
            if self_test_scenario:
                logger.info("   –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
                
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
                result = await self.ux_bot.execute_scenario(self_test_scenario)
                
                if result.success:
                    logger.info("‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    logger.info(f"   –í—ã–ø–æ–ª–Ω–µ–Ω–æ —à–∞–≥–æ–≤: {len(result.completed_steps)}")
                    logger.info(f"   –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(result.issues)}")
                    
                    self.test_results["scenarios"] = "PASSED"
                else:
                    logger.warning("‚ö†Ô∏è –°—Ü–µ–Ω–∞—Ä–∏–π —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
                    self.test_results["scenarios"] = "WARNING"
            else:
                logger.warning("‚ö†Ô∏è –°—Ü–µ–Ω–∞—Ä–∏–π —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.test_results["scenarios"] = "WARNING"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {e}")
            self.test_results["scenarios"] = f"ERROR: {e}"
    
    async def _test_final_checks(self):
        """–§–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        logger.info("üîç 5. –§–ò–ù–ê–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = self.ux_bot.get_statistics()
            logger.info(f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ UX-–±–æ—Ç–∞:")
            logger.info(f"     - –í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π: {stats['actions_performed']}")
            logger.info(f"     - –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {stats['issues_found']}")
            logger.info(f"     - –î–æ—Å—Ç—É–ø–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {stats['scenarios_available']}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
            log_file = "ux_bot.log"
            if os.path.exists(log_file):
                log_size = os.path.getsize(log_file)
                logger.info(f"   –†–∞–∑–º–µ—Ä –ª–æ–≥-—Ñ–∞–π–ª–∞: {log_size} –±–∞–π—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ LLM –ª–æ–≥–æ–≤
            llm_log_file = "llm_interactions.log"
            if os.path.exists(llm_log_file):
                llm_log_size = os.path.getsize(llm_log_file)
                logger.info(f"   –†–∞–∑–º–µ—Ä LLM –ª–æ–≥–æ–≤: {llm_log_size} –±–∞–π—Ç")
            
            self.test_results["final_checks"] = "PASSED"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö: {e}")
            self.test_results["final_checks"] = f"ERROR: {e}"
    
    async def _check_ollama_status(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Ollama"""
        try:
            import aiohttp
            
            async with aiohttp.ClientSession() as session:
                async with session.get("http://localhost:11434/api/tags") as response:
                    if response.status == 200:
                        data = await response.json()
                        return {
                            "available": True,
                            "models_count": len(data.get("models", [])),
                            "models": [model["name"] for model in data.get("models", [])]
                        }
                    else:
                        return {"available": False}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Ollama: {e}")
            return {"available": False}
    
    async def _test_llm_request(self) -> Optional[str]:
        """–¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            test_prompt = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç UX-–±–æ—Ç–∞. –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º."
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ API –∫–ª–∏–µ–Ω—Ç
            response = await self.ux_bot.api_client.post(
                "/api/v1/llm/chat",
                json={
                    "prompt": test_prompt,
                    "model": "qwen2.5:7b-instruct",
                    "max_tokens": 100
                }
            )
            
            if response and response.get("response"):
                llm_logger.info(f"ü§ñ LLM –ó–ê–ü–†–û–°: {test_prompt}")
                llm_logger.info(f"ü§ñ LLM –û–¢–í–ï–¢: {response['response']}")
                return response["response"]
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ LLM –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None
    
    async def _find_ux_bot_elements(self) -> List[Any]:
        """–ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UX-–±–æ—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        try:
            selectors = [
                "[data-testid*='ux'], [data-testid*='bot']",
                ".ux-bot, .bot-controls",
                "[aria-label*='UX'], [aria-label*='Bot']",
                "button:contains('UX'), button:contains('Bot')"
            ]
            
            elements = []
            for selector in selectors:
                try:
                    element = await self.ux_bot.browser_service.find_element(selector)
                    if element:
                        elements.append(element)
                except:
                    continue
            
            return elements
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UX-–±–æ—Ç–∞: {e}")
            return []
    
    async def _test_ux_bot_controls(self, elements: List[Any]):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è UX-–±–æ—Ç–∞"""
        try:
            for i, element in enumerate(elements[:3]):  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞
                try:
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
                    text = await self.ux_bot.browser_service.get_element_text(element)
                    logger.info(f"   –≠–ª–µ–º–µ–Ω—Ç {i+1}: {text}")
                    
                    # –ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞ (–µ—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞)
                    if "button" in str(element.tag_name).lower():
                        await self.ux_bot.browser_service.click_element(element)
                        logger.info(f"   ‚úÖ –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É {i+1}")
                        await asyncio.sleep(1)
                        
                except Exception as e:
                    logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ {i+1}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
    
    async def _generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        logger.info("üìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –§–ò–ù–ê–õ–¨–ù–û–ì–û –û–¢–ß–ï–¢–ê")
        logger.info("=" * 60)
        
        duration = self.end_time - self.start_time
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        passed = sum(1 for result in self.test_results.values() if "PASSED" in str(result))
        failed = sum(1 for result in self.test_results.values() if "FAILED" in str(result))
        warnings = sum(1 for result in self.test_results.values() if "WARNING" in str(result))
        errors = sum(1 for result in self.test_results.values() if "ERROR" in str(result))
        
        logger.info(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {passed}")
        logger.info(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {failed}")
        logger.info(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings}")
        logger.info(f"üö® –û—à–∏–±–æ–∫: {errors}")
        
        logger.info("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for test_name, result in self.test_results.items():
            status_icon = "‚úÖ" if "PASSED" in str(result) else "‚ùå" if "FAILED" in str(result) else "‚ö†Ô∏è" if "WARNING" in str(result) else "üö®"
            logger.info(f"   {status_icon} {test_name}: {result}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
        report_file = f"comprehensive_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write("–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ UX-–ë–û–¢–ê RELINK\n")
            f.write("=" * 50 + "\n\n")
            f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.2f} —Å–µ–∫—É–Ω–¥\n\n")
            
            f.write("–†–ï–ó–£–õ–¨–¢–ê–¢–´:\n")
            for test_name, result in self.test_results.items():
                f.write(f"  {test_name}: {result}\n")
        
        logger.info(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {report_file}")
        
        if failed == 0 and errors == 0:
            logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        else:
            logger.warning("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("ü§ñ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ê UX-–ë–û–¢–ê RELINK")
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º LLM")
    logger.info("=" * 70)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
    test = ComprehensiveUXBotTest()
    await test.run_comprehensive_test()


if __name__ == "__main__":
    asyncio.run(main()) 