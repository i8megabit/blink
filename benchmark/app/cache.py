"""
üöÄ –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –ë–ï–ù–ß–ú–ê–†–ö –ú–ò–ö–†–û–°–ï–†–í–ò–°–ê
–í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å Redis –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
"""

import json
import pickle
import asyncio
from typing import Any, Optional, Dict, List, Union
from datetime import datetime, timedelta
import aioredis
import structlog
from .config import settings

logger = structlog.get_logger(__name__)


class BenchmarkCache:
    """–í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    
    def __init__(self):
        self.redis: Optional[aioredis.Redis] = None
        self.prefix = settings.cache_prefix
        self.default_ttl = settings.cache_ttl
        self._connection_lock = asyncio.Lock()
    
    async def connect(self) -> None:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis."""
        if self.redis is None:
            async with self._connection_lock:
                if self.redis is None:
                    try:
                        self.redis = aioredis.from_url(
                            settings.redis_url,
                            encoding="utf-8",
                            decode_responses=False,
                            max_connections=settings.redis_pool_size
                        )
                        await self.redis.ping()
                        logger.info("Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
                        raise
    
    async def disconnect(self) -> None:
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Redis."""
        if self.redis:
            await self.redis.close()
            self.redis = None
            logger.info("Redis –æ—Ç–∫–ª—é—á–µ–Ω")
    
    def _make_key(self, key: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º."""
        return f"{self.prefix}{key}"
    
    async def get(self, key: str, default: Any = None) -> Any:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞."""
        if not settings.cache_enabled:
            return default
        
        try:
            await self.connect()
            cache_key = self._make_key(key)
            value = await self.redis.get(cache_key)
            
            if value is None:
                return default
            
            # –ü—Ä–æ–±—É–µ–º –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–∞–∫ JSON, –∑–∞—Ç–µ–º –∫–∞–∫ pickle
            try:
                return json.loads(value.decode('utf-8'))
            except (json.JSONDecodeError, UnicodeDecodeError):
                try:
                    return pickle.loads(value)
                except pickle.UnpicklingError:
                    return value.decode('utf-8')
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞: {e}")
            return default
    
    async def set(
        self, 
        key: str, 
        value: Any, 
        ttl: Optional[int] = None,
        serialize: bool = True
    ) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫—ç—à."""
        if not settings.cache_enabled:
            return False
        
        try:
            await self.connect()
            cache_key = self._make_key(key)
            
            if serialize:
                # –ü—Ä–æ–±—É–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–∞–∫ JSON, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –∫–∞–∫ pickle
                try:
                    serialized_value = json.dumps(value, default=str).encode('utf-8')
                except (TypeError, ValueError):
                    serialized_value = pickle.dumps(value)
            else:
                serialized_value = str(value).encode('utf-8')
            
            ttl = ttl or self.default_ttl
            await self.redis.setex(cache_key, ttl, serialized_value)
            logger.debug(f"–ó–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à: {key}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à: {e}")
            return False
    
    async def delete(self, key: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞."""
        if not settings.cache_enabled:
            return False
        
        try:
            await self.connect()
            cache_key = self._make_key(key)
            result = await self.redis.delete(cache_key)
            return result > 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞: {e}")
            return False
    
    async def exists(self, key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞."""
        if not settings.cache_enabled:
            return False
        
        try:
            await self.connect()
            cache_key = self._make_key(key)
            return await self.redis.exists(cache_key) > 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞: {e}")
            return False
    
    async def clear(self, pattern: str = "*") -> int:
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É."""
        if not settings.cache_enabled:
            return 0
        
        try:
            await self.connect()
            cache_pattern = self._make_key(pattern)
            keys = await self.redis.keys(cache_pattern)
            
            if keys:
                deleted = await self.redis.delete(*keys)
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted} –∫–ª—é—á–µ–π –∏–∑ –∫—ç—à–∞")
                return deleted
            return 0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
            return 0
    
    async def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞."""
        if not settings.cache_enabled:
            return {"enabled": False}
        
        try:
            await self.connect()
            info = await self.redis.info()
            
            # –ü–æ–¥—Å—á–µ—Ç –∫–ª—é—á–µ–π —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –±–µ–Ω—á–º–∞—Ä–∫–∞
            benchmark_keys = await self.redis.keys(f"{self.prefix}*")
            
            return {
                "enabled": True,
                "total_keys": len(benchmark_keys),
                "memory_usage": info.get("used_memory_human", "N/A"),
                "connected_clients": info.get("connected_clients", 0),
                "uptime": info.get("uptime_in_seconds", 0),
                "hits": info.get("keyspace_hits", 0),
                "misses": info.get("keyspace_misses", 0),
                "hit_rate": self._calculate_hit_rate(info)
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞: {e}")
            return {"enabled": False, "error": str(e)}
    
    def _calculate_hit_rate(self, info: Dict) -> float:
        """–†–∞—Å—á–µ—Ç hit rate –∫—ç—à–∞."""
        hits = info.get("keyspace_hits", 0)
        misses = info.get("keyspace_misses", 0)
        total = hits + misses
        
        if total == 0:
            return 0.0
        
        return round((hits / total) * 100, 2)
    
    async def get_benchmark_result(self, benchmark_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞ –∏–∑ –∫—ç—à–∞."""
        return await self.get(f"result:{benchmark_id}")
    
    async def set_benchmark_result(
        self, 
        benchmark_id: str, 
        result: Dict, 
        ttl: Optional[int] = None
    ) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞ –≤ –∫—ç—à."""
        return await self.set(f"result:{benchmark_id}", result, ttl)
    
    async def get_model_performance(self, model_name: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ –∏–∑ –∫—ç—à–∞."""
        return await self.get(f"performance:{model_name}")
    
    async def set_model_performance(
        self, 
        model_name: str, 
        performance: Dict, 
        ttl: Optional[int] = None
    ) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ –≤ –∫—ç—à."""
        return await self.set(f"performance:{model_name}", performance, ttl)
    
    async def get_benchmark_history(self, limit: int = 100) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ –∏–∑ –∫—ç—à–∞."""
        try:
            await self.connect()
            pattern = self._make_key("result:*")
            keys = await self.redis.keys(pattern)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
            keys.sort(reverse=True)
            keys = keys[:limit]
            
            if not keys:
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            pipeline = self.redis.pipeline()
            for key in keys:
                pipeline.get(key)
            
            values = await pipeline.execute()
            results = []
            
            for value in values:
                if value:
                    try:
                        result = json.loads(value.decode('utf-8'))
                        results.append(result)
                    except (json.JSONDecodeError, UnicodeDecodeError):
                        continue
            
            return results
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤: {e}")
            return []
    
    async def invalidate_model_cache(self, model_name: str) -> bool:
        """–ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏."""
        patterns = [
            f"performance:{model_name}",
            f"result:*:{model_name}",
            f"benchmark:*:{model_name}"
        ]
        
        total_deleted = 0
        for pattern in patterns:
            deleted = await self.clear(pattern)
            total_deleted += deleted
        
        logger.info(f"–ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω –∫—ç—à –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name}: {total_deleted} –∫–ª—é—á–µ–π")
        return total_deleted > 0
    
    async def get_cache_size(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."""
        try:
            await self.connect()
            
            categories = {
                "results": len(await self.redis.keys(self._make_key("result:*"))),
                "performance": len(await self.redis.keys(self._make_key("performance:*"))),
                "benchmarks": len(await self.redis.keys(self._make_key("benchmark:*"))),
                "models": len(await self.redis.keys(self._make_key("model:*"))),
                "total": len(await self.redis.keys(self._make_key("*")))
            }
            
            return categories
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞: {e}")
            return {}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
cache_manager = BenchmarkCache()


async def get_cache() -> BenchmarkCache:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫—ç—à–∞."""
    return cache_manager


async def cache_benchmark_result(benchmark_id: str, result: Dict, ttl: Optional[int] = None) -> bool:
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞."""
    return await cache_manager.set_benchmark_result(benchmark_id, result, ttl)


async def get_cached_benchmark_result(benchmark_id: str) -> Optional[Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞."""
    return await cache_manager.get_benchmark_result(benchmark_id)


async def invalidate_cache(pattern: str = "*") -> int:
    """–ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É."""
    return await cache_manager.clear(pattern)


async def get_cache_stats() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞."""
    return await cache_manager.get_stats() 