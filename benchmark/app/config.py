"""
üöÄ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–ï–ù–ß–ú–ê–†–ö –ú–ò–ö–†–û–°–ï–†–í–ò–°–ê
–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏
"""

import os
from typing import List, Dict, Optional
from pydantic import BaseSettings, Field, validator
from pydantic_settings import BaseSettings


class BenchmarkSettings(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–Ω—á–º–∞—Ä–∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞."""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
    service_name: str = "benchmark-service"
    version: str = "1.0.0"
    debug: bool = Field(default=False, env="DEBUG")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    host: str = Field(default="0.0.0.0", env="HOST")
    port: int = Field(default=8002, env="PORT")
    workers: int = Field(default=4, env="WORKERS")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    max_concurrent_benchmarks: int = Field(default=10, env="MAX_CONCURRENT_BENCHMARKS")
    benchmark_timeout: int = Field(default=300, env="BENCHMARK_TIMEOUT")  # —Å–µ–∫—É–Ω–¥—ã
    cache_ttl: int = Field(default=3600, env="CACHE_TTL")  # —Å–µ–∫—É–Ω–¥—ã
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    database_url: str = Field(
        default="postgresql+asyncpg://benchmark:benchmark@localhost:5432/benchmark_db",
        env="DATABASE_URL"
    )
    database_pool_size: int = Field(default=20, env="DATABASE_POOL_SIZE")
    database_max_overflow: int = Field(default=30, env="DATABASE_MAX_OVERFLOW")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Redis
    redis_url: str = Field(default="redis://localhost:6379/1", env="REDIS_URL")
    redis_pool_size: int = Field(default=50, env="REDIS_POOL_SIZE")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Ollama
    ollama_url: str = Field(default="http://localhost:11434", env="OLLAMA_URL")
    ollama_timeout: int = Field(default=120, env="OLLAMA_TIMEOUT")
    ollama_models: List[str] = Field(
        default=["qwen2.5:7b-instruct-turbo", "llama2", "mistral", "codellama", "neural-chat"],
        env="OLLAMA_MODELS"
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–Ω—á–º–∞—Ä–∫–∞
    default_iterations: int = Field(default=3, env="DEFAULT_ITERATIONS")
    max_iterations: int = Field(default=10, env="MAX_ITERATIONS")
    min_response_time: float = Field(default=0.1, env="MIN_RESPONSE_TIME")
    max_response_time: float = Field(default=30.0, env="MAX_RESPONSE_TIME")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ç—Ä–∏–∫
    metrics_enabled: bool = Field(default=True, env="METRICS_ENABLED")
    metrics_port: int = Field(default=9090, env="METRICS_PORT")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_level: str = Field(default="INFO", env="LOG_LEVEL")
    log_format: str = Field(
        default="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        env="LOG_FORMAT"
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    secret_key: str = Field(default="your-secret-key-here", env="SECRET_KEY")
    access_token_expire_minutes: int = Field(default=30, env="ACCESS_TOKEN_EXPIRE_MINUTES")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    test_data_path: str = Field(default="/app/test_data", env="TEST_DATA_PATH")
    benchmark_results_path: str = Field(default="/app/results", env="BENCHMARK_RESULTS_PATH")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notifications_enabled: bool = Field(default=True, env="NOTIFICATIONS_ENABLED")
    webhook_url: Optional[str] = Field(default=None, env="WEBHOOK_URL")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
    export_formats: List[str] = Field(
        default=["json", "csv", "html", "pdf"],
        env="EXPORT_FORMATS"
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    cache_enabled: bool = Field(default=True, env="CACHE_ENABLED")
    cache_prefix: str = Field(default="benchmark:", env="CACHE_PREFIX")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    health_check_interval: int = Field(default=30, env="HEALTH_CHECK_INTERVAL")
    performance_monitoring: bool = Field(default=True, env="PERFORMANCE_MONITORING")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    auto_scaling: bool = Field(default=False, env="AUTO_SCALING")
    max_instances: int = Field(default=10, env="MAX_INSTANCES")
    min_instances: int = Field(default=1, env="MIN_INSTANCES")
    
    @validator("ollama_models", pre=True)
    def parse_ollama_models(cls, v):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π Ollama."""
        if isinstance(v, str):
            return [model.strip() for model in v.split(",")]
        return v
    
    @validator("export_formats", pre=True)
    def parse_export_formats(cls, v):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞."""
        if isinstance(v, str):
            return [fmt.strip() for fmt in v.split(",")]
        return v
    
    class Config:
        env_file = ".env"
        case_sensitive = False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings = BenchmarkSettings()


def get_settings() -> BenchmarkSettings:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    return settings


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–∞
BENCHMARK_TYPES = {
    "seo_basic": {
        "name": "SEO Basic Benchmark",
        "description": "–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç SEO-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
        "iterations": 3,
        "timeout": 60
    },
    "seo_advanced": {
        "name": "SEO Advanced Benchmark", 
        "description": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç–µ—Å—Ç SEO —Å RAG",
        "iterations": 5,
        "timeout": 120
    },
    "performance": {
        "name": "Performance Benchmark",
        "description": "–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏",
        "iterations": 10,
        "timeout": 180
    },
    "quality": {
        "name": "Quality Benchmark",
        "description": "–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤",
        "iterations": 3,
        "timeout": 90
    },
    "comprehensive": {
        "name": "Comprehensive Benchmark",
        "description": "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤",
        "iterations": 7,
        "timeout": 300
    }
}

METRICS_WEIGHTS = {
    "response_time": 0.25,
    "accuracy": 0.30,
    "quality": 0.25,
    "reliability": 0.20
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–æ–¥–µ–ª–µ–π
MODEL_CONFIGS = {
    "llama2": {
        "default_params": {
            "temperature": 0.7,
            "top_p": 0.9,
            "max_tokens": 2048
        },
        "benchmark_params": {
            "temperature": 0.5,
            "top_p": 0.8,
            "max_tokens": 1024
        }
    },
    "mistral": {
        "default_params": {
            "temperature": 0.6,
            "top_p": 0.9,
            "max_tokens": 2048
        },
        "benchmark_params": {
            "temperature": 0.4,
            "top_p": 0.8,
            "max_tokens": 1024
        }
    },
    "codellama": {
        "default_params": {
            "temperature": 0.3,
            "top_p": 0.95,
            "max_tokens": 2048
        },
        "benchmark_params": {
            "temperature": 0.2,
            "top_p": 0.9,
            "max_tokens": 1024
        }
    }
} 