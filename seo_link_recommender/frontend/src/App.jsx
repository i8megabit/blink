import React, { useState, useEffect, useCallback } from 'react'
import Header from './components/Header'
import DomainInput from './components/DomainInput'
import DomainsList from './components/DomainsList'
import AnalysisProgress from './components/AnalysisProgress'
import Recommendations from './components/Recommendations'
import Notifications from './components/Notifications'
import OllamaStatus from './components/OllamaStatus'
import AIAnalysisFlow from './components/AIAnalysisFlow'
import { useWebSocket } from './hooks/useWebSocket'
import { useNotifications } from './hooks/useNotifications'

function App() {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [domain, setDomain] = useState('')
  const [domains, setDomains] = useState([])
  const [recommendations, setRecommendations] = useState([])
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [analysisStats, setAnalysisStats] = useState(null)
  const [analysisError, setAnalysisError] = useState(null)
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è Ollama
  const [ollamaStatus, setOllamaStatus] = useState({
    status: 'unknown',
    message: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...',
    models_count: 0,
    available_models: []
  })
  
  // AI —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const [aiMessages, setAiMessages] = useState([])
  const [showAIAnalysis, setShowAIAnalysis] = useState(false)
  
  // –•—É–∫–∏
  const { 
    notifications, 
    selectedNotification,
    addNotification, 
    removeNotification,
    showNotificationDetails,
    hideNotificationDetails,
    pauseNotification,
    resumeNotification
  } = useNotifications()
  const { 
    connectionStatus, 
    connectWebSocket, 
    disconnectWebSocket 
  } = useWebSocket({
    onMessage: handleWebSocketMessage,
    onConnect: () => addNotification('success', 'WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'),
    onDisconnect: () => addNotification('warning', 'WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ'),
    onError: () => addNotification('error', '–û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è')
  })

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  useEffect(() => {
    console.log('üöÄ SEO Link Recommender (Vite) –∑–∞–≥—Ä—É–∂–µ–Ω')
    
    const clientId = 'client_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9)
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    loadDomains()
    checkOllamaStatus()
    connectWebSocket(clientId)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Ollama –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const ollamaInterval = setInterval(checkOllamaStatus, 30000)
    
    return () => {
      disconnectWebSocket()
      clearInterval(ollamaInterval)
    }
  }, [])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–º–µ–Ω–æ–≤
  async function loadDomains() {
    try {
      const response = await fetch('/api/v1/domains')
      const data = await response.json()
      setDomains(data.domains || [])
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–º–µ–Ω–æ–≤:', error)
      addNotification('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤')
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Ollama
  async function checkOllamaStatus() {
    try {
      const response = await fetch('/api/v1/ollama_status')
      const data = await response.json()
      setOllamaStatus(data)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Ollama:', error)
      setOllamaStatus({
        status: 'error',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Ollama',
        models_count: 0,
        available_models: []
      })
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
  function handleWebSocketMessage(data) {
    console.log('üì® WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:', data)
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ AI –ø–æ—Ç–æ–∫
    const messageWithId = {
      ...data,
      id: Date.now() + Math.random(),
      timestamp: data.timestamp || new Date().toISOString()
    }
    
    setAiMessages(prev => [...prev, messageWithId])
    
    switch (data.type) {
      case 'progress':
        setAnalysisStats({
          step: data.step,
          current: data.current,
          total: data.total,
          percentage: data.percentage,
          details: data.details
        })
        break
        
      case 'ai_thinking':
        // –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤—ã—à–µ
        break
        
      case 'enhanced_ai_thinking':
        // –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤—ã—à–µ
        break
        
      case 'ollama':
        if (data.info) {
          addNotification('info', 'Ollama —Å—Ç–∞—Ç—É—Å', data.info.status || '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞')
        }
        break
        
      case 'error':
        setAnalysisError(data.message)
        addNotification('error', '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞', data.details)
        setIsAnalyzing(false)
        break
        
      case 'ping':
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º ping —Å–æ–æ–±—â–µ–Ω–∏—è
        break
        
      default:
        console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', data.type)
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –¥–æ–º–µ–Ω–∞
  async function handleAnalyzeDomain() {
    const targetDomain = domain.trim()
    
    if (!targetDomain) {
      addNotification('warning', '–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
      return
    }

    setIsAnalyzing(true)
    setAnalysisError(null)
    setAnalysisStats(null)
    setRecommendations([])
    setAiMessages([]) // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ò–ò
    setShowAIAnalysis(true) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º AI –∞–Ω–∞–ª–∏–∑

    try {
      addNotification('info', `–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–æ–º–µ–Ω–∞ ${targetDomain}`)
      
      const response = await fetch('/api/v1/wp_index', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          domain: targetDomain,
          comprehensive: true,
          client_id: connectionStatus === 'connected' ? 'vite_client' : null
        })
      })

      const result = await response.json()

      if (result.status === 'success') {
        setRecommendations(result.recommendations || [])
        addNotification('success', '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω', 
          `–ù–∞–π–¥–µ–Ω–æ ${result.recommendations?.length || 0} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π`)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤
        loadDomains()
      } else {
        throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error)
      setAnalysisError(error.message)
      addNotification('error', '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞', error.message)
    } finally {
      setIsAnalyzing(false)
      setAnalysisStats(null)
    }
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ AI –∞–Ω–∞–ª–∏–∑–∞
  const handleCloseAIAnalysis = () => {
    setShowAIAnalysis(false)
    setAiMessages([])
  }

  return (
    <div>
      <Header />
      
      <nav className="nav-apple">
        <div className="apple-container">
          <div className="nav-buttons">
            <button 
              className="btn-apple btn-secondary" 
              onClick={checkOllamaStatus}
            >
              üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
            </button>
            <button 
              className="btn-apple btn-secondary" 
              onClick={loadDomains}
            >
              üìä –û–±–Ω–æ–≤–∏—Ç—å –¥–æ–º–µ–Ω—ã
            </button>
          </div>
        </div>
      </nav>

      <main className="apple-container" style={{ paddingTop: '40px', paddingBottom: '40px' }}>
        <OllamaStatus 
          ollamaStatus={ollamaStatus} 
          onRefresh={checkOllamaStatus} 
        />
        
        <DomainInput 
          domain={domain}
          setDomain={setDomain}
          onAnalyze={handleAnalyzeDomain}
          isAnalyzing={isAnalyzing}
        />
        
        <AnalysisProgress 
          analysisStats={analysisStats}
          isAnalyzing={isAnalyzing}
        />
        
        <DomainsList domains={domains} />
        
        <Recommendations recommendations={recommendations} />
        
        {analysisError && (
          <div className="step-card">
            <div className="step-number">!</div>
            <h3 className="step-title">–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞</h3>
            <div className="status-indicator status-error">
              {analysisError}
            </div>
          </div>
        )}
      </main>
      
      <Notifications 
        notifications={notifications} 
        removeNotification={removeNotification}
        selectedNotification={selectedNotification}
        showNotificationDetails={showNotificationDetails}
        hideNotificationDetails={hideNotificationDetails}
        pauseNotification={pauseNotification}
        resumeNotification={resumeNotification}
      />
      
      {/* –ù–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç AI –∞–Ω–∞–ª–∏–∑–∞ */}
      <AIAnalysisFlow
        isVisible={showAIAnalysis}
        messages={aiMessages}
        onClose={handleCloseAIAnalysis}
      />
    </div>
  )
}

export default App 