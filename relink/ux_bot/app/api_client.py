"""
üîå API –∫–ª–∏–µ–Ω—Ç –¥–ª—è UX –±–æ—Ç–∞-–∏–º–∏—Ç–∞—Ç–æ—Ä–∞

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å LLM —Ä–æ—É—Ç–µ—Ä–æ–º –∏ –±—ç–∫–µ–Ω–¥–æ–º reLink –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤
–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞.
"""

import aiohttp
import json
import logging
from typing import Dict, Any, Optional, List
from datetime import datetime
import asyncio

from .config import settings

logger = logging.getLogger(__name__)

class APIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API reLink"""
    
    def __init__(self):
        self.base_url = settings.BACKEND_URL
        self.llm_router_url = f"{self.base_url}/api/llm"
        self.rag_url = f"{self.base_url}/api/rag"
        self.testing_url = f"{self.base_url}/api/testing"
        self.session: Optional[aiohttp.ClientSession] = None
        self.timeout = aiohttp.ClientTimeout(total=30)
    
    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥"""
        self.session = aiohttp.ClientSession(timeout=self.timeout)
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥"""
        if self.session:
            await self.session.close()
    
    async def get_llm_guidance(self, request_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –æ—Ç LLM —Ä–æ—É—Ç–µ—Ä–∞
        
        Args:
            request_data: –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –≤–∫–ª—é—á–∞—è –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        """
        try:
            if not self.session:
                raise Exception("API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM —Ä–æ—É—Ç–µ—Ä—É
            llm_request = {
                "service_type": "ux_testing",
                "prompt": self._build_ux_prompt(request_data),
                "context": {
                    "session_id": request_data.get("session_id"),
                    "profile": request_data.get("profile"),
                    "current_context": request_data.get("current_context"),
                    "action_history": request_data.get("action_history", [])
                },
                "llm_model": "qwen2.5:7b-instruct-turbo",
                "temperature": 0.7,
                "max_tokens": 1024,
                "use_rag": True,
                "priority": "high"
            }
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM —Ä–æ—É—Ç–µ—Ä—É: {llm_request['service_type']}")
            
            async with self.session.post(
                f"{self.llm_router_url}/process",
                json=llm_request,
                headers={"Content-Type": "application/json"}
            ) as response:
                
                if response.status == 200:
                    result = await response.json()
                    logger.info("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç LLM —Ä–æ—É—Ç–µ—Ä–∞")
                    return self._parse_llm_response(result)
                else:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ LLM —Ä–æ—É—Ç–µ—Ä–∞: {response.status} - {error_text}")
                    return self._get_fallback_guidance()
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –æ—Ç LLM: {e}")
            return self._get_fallback_guidance()
    
    def _build_ux_prompt(self, request_data: Dict[str, Any]) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è UX —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        profile = request_data.get("profile", {})
        context = request_data.get("current_context", {})
        history = request_data.get("action_history", [])
        
        prompt = f"""
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ UX —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.

–ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
- –ò–º—è: {profile.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
- –í–æ–∑—Ä–∞—Å—Ç: {profile.get('age', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
- –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profile.get('occupation', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å: {profile.get('tech_level', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
- –°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {profile.get('browsing_speed', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
- –¢–µ—Ä–ø–µ–Ω–∏–µ: {profile.get('patience', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
- –°—Ç–∏–ª—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {profile.get('exploration_style', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

–¢–ï–ö–£–©–ò–ô –ö–û–ù–¢–ï–ö–°–¢:
- URL: {context.get('url', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
- –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {context.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
- –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {context.get('available_elements', [])}

–ò–°–¢–û–†–ò–Ø –î–ï–ô–°–¢–í–ò–ô (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 3):
{chr(10).join([f"- {action}" for action in history])}

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∏—Ç—É–∞—Ü–∏—é –∏ –¥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–∏—Ç —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.

–£–ß–¢–ò:
1. –•–∞—Ä–∞–∫—Ç–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ—Ä–ø–µ–Ω–∏–µ, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å)
2. –õ–æ–≥–∏–∫—É –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
3. –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏—è
4. –¶–µ–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞

–û–¢–í–ï–¢ –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –í JSON –§–û–†–ú–ê–¢–ï:
{{
    "action": "—Ç–∏–ø_–¥–µ–π—Å—Ç–≤–∏—è",
    "target": "—Å–µ–ª–µ–∫—Ç–æ—Ä_–∏–ª–∏_–æ–ø–∏—Å–∞–Ω–∏–µ_—Ü–µ–ª–∏",
    "reason": "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ_–¥–µ–π—Å—Ç–≤–∏—è",
    "expected_outcome": "–æ–∂–∏–¥–∞–µ–º—ã–π_—Ä–µ–∑—É–ª—å—Ç–∞—Ç",
    "confidence": 0.0-1.0,
    "human_delay": "–≤—Ä–µ–º—è_–∑–∞–¥–µ—Ä–∂–∫–∏_–≤_—Å–µ–∫—É–Ω–¥–∞—Ö"
}}

–î–û–°–¢–£–ü–ù–´–ï –¢–ò–ü–´ –î–ï–ô–°–¢–í–ò–ô:
- click: –∫–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É
- type: –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: "—Å–µ–ª–µ–∫—Ç–æ—Ä:—Ç–µ–∫—Å—Ç")
- scroll: –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ (up/down/top/bottom/—Å–µ–ª–µ–∫—Ç–æ—Ä)
- hover: –Ω–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç
- wait: –æ–∂–∏–¥–∞–Ω–∏–µ (–≤—Ä–µ–º—è_–≤_—Å–µ–∫—É–Ω–¥–∞—Ö)
- navigate: –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ
- extract: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (all_forms/all_links/—Å–µ–ª–µ–∫—Ç–æ—Ä)
- analyze: –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
- custom_js: –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ JS –∫–æ–¥–∞
- stop: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏

–ë–£–î–¨ –ö–û–ù–ö–†–ï–¢–ï–ù –ò –ü–†–ê–ö–¢–ò–ß–ï–ù!
"""
        
        return prompt
    
    def _parse_llm_response(self, response: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM"""
        try:
            content = response.get("content", "")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            if "{" in content and "}" in content:
                start = content.find("{")
                end = content.rfind("}") + 1
                json_str = content[start:end]
                
                try:
                    parsed = json.loads(json_str)
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω –æ—Ç–≤–µ—Ç LLM: {parsed.get('action')}")
                    return parsed
                except json.JSONDecodeError:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM")
            
            # Fallback - –ø–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            return self._extract_action_from_text(content)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ LLM: {e}")
            return self._get_fallback_guidance()
    
    def _extract_action_from_text(self, text: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        text_lower = text.lower()
        
        if "click" in text_lower:
            return {"action": "click", "target": "button", "reason": "–ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞", "confidence": 0.5}
        elif "type" in text_lower or "–≤–≤–æ–¥" in text_lower:
            return {"action": "type", "target": "input:test", "reason": "–ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞", "confidence": 0.5}
        elif "scroll" in text_lower or "–ø—Ä–æ–∫—Ä—É—Ç" in text_lower:
            return {"action": "scroll", "target": "down", "reason": "–ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞", "confidence": 0.5}
        elif "wait" in text_lower or "–∂–¥–∞—Ç—å" in text_lower:
            return {"action": "wait", "target": "2", "reason": "–ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞", "confidence": 0.5}
        else:
            return self._get_fallback_guidance()
    
    def _get_fallback_guidance(self) -> Dict[str, Any]:
        """Fallback —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        return {
            "action": "wait",
            "target": "3",
            "reason": "Fallback - –æ–∂–∏–¥–∞–Ω–∏–µ",
            "expected_outcome": "–ü–∞—É–∑–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
            "confidence": 0.3,
            "human_delay": 3
        }
    
    async def send_ui_analysis(self, analysis_data: Dict[str, Any]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞ UI –≤ RAG
        
        Args:
            analysis_data: –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        try:
            if not self.session:
                raise Exception("API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è RAG
            rag_data = {
                "type": "ui_analysis",
                "session_id": analysis_data.get("session_id"),
                "profile_id": analysis_data.get("profile_id"),
                "url": analysis_data.get("url"),
                "timestamp": analysis_data.get("timestamp"),
                "content": json.dumps(analysis_data.get("analysis", {}), ensure_ascii=False),
                "metadata": {
                    "source": "ux_bot",
                    "analysis_type": "ui_structure",
                    "profile": analysis_data.get("profile_id")
                }
            }
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ UI –≤ RAG: {analysis_data.get('url')}")
            
            async with self.session.post(
                f"{self.rag_url}/store",
                json=rag_data,
                headers={"Content-Type": "application/json"}
            ) as response:
                
                if response.status == 200:
                    logger.info("–ê–Ω–∞–ª–∏–∑ UI —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ RAG")
                    return True
                else:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ RAG: {response.status} - {error_text}")
                    return False
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ UI: {e}")
            return False
    
    async def send_test_report(self, report_data: Dict[str, Any]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        
        Args:
            report_data: –î–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        try:
            if not self.session:
                raise Exception("API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {report_data.get('session_id')}")
            
            async with self.session.post(
                f"{self.testing_url}/reports",
                json=report_data,
                headers={"Content-Type": "application/json"}
            ) as response:
                
                if response.status == 200:
                    logger.info("–û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    return True
                else:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {response.status} - {error_text}")
                    return False
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return False
    
    async def get_rag_context(self, query: str, session_id: str) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ RAG –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π
        
        Args:
            query: –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
            session_id: ID —Å–µ—Å—Å–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        """
        try:
            if not self.session:
                raise Exception("API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            search_data = {
                "query": query,
                "session_id": session_id,
                "limit": 5,
                "filters": {
                    "type": "ui_analysis",
                    "source": "ux_bot"
                }
            }
            
            logger.info(f"–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ RAG: {query}")
            
            async with self.session.post(
                f"{self.rag_url}/search",
                json=search_data,
                headers={"Content-Type": "application/json"}
            ) as response:
                
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(result.get('documents', []))} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ RAG")
                    return result.get("documents", [])
                else:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ RAG: {response.status} - {error_text}")
                    return []
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ RAG: {e}")
            return []
    
    async def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
        try:
            if not self.session:
                return False
            
            async with self.session.get(f"{self.base_url}/health") as response:
                return response.status == 200
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API: {e}")
            return False
    
    async def get_llm_router_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ LLM —Ä–æ—É—Ç–µ—Ä–∞"""
        try:
            if not self.session:
                raise Exception("API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            async with self.session.get(f"{self.llm_router_url}/stats") as response:
                
                if response.status == 200:
                    return await response.json()
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ LLM: {response.status}")
                    return {}
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ LLM: {e}")
            return {} 