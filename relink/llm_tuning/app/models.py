"""
üß† –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è LLM Tuning –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞
"""

from sqlalchemy import (
    Column, Integer, String, Text, Boolean, DateTime, Float, 
    ForeignKey, JSON, Enum as SQLEnum, Index, UniqueConstraint
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from datetime import datetime
from typing import Optional, List, Dict, Any
from enum import Enum

Base = declarative_base()


class ModelStatus(str, Enum):
    """–°—Ç–∞—Ç—É—Å—ã –º–æ–¥–µ–ª–µ–π LLM"""
    ACTIVE = "active"
    INACTIVE = "inactive"
    TRAINING = "training"
    ERROR = "error"
    OPTIMIZING = "optimizing"


class RouteStrategy(str, Enum):
    """–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏"""
    SMART = "smart"
    ROUND_ROBIN = "round_robin"
    LOAD_BASED = "load_based"
    QUALITY_BASED = "quality_based"
    AB_TESTING = "ab_testing"


class TuningStrategy(str, Enum):
    """–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ç—é–Ω–∏–Ω–≥–∞"""
    ADAPTIVE = "adaptive"
    AGGREGATE = "aggregate"
    HYBRID = "hybrid"
    MANUAL = "manual"
    CONTINUOUS = "continuous"


class ABTestStatus(str, Enum):
    """–°—Ç–∞—Ç—É—Å—ã A/B —Ç–µ—Å—Ç–æ–≤"""
    ACTIVE = "active"
    PAUSED = "paused"
    COMPLETED = "completed"
    FAILED = "failed"


class OptimizationType(str, Enum):
    """–¢–∏–ø—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    PERFORMANCE = "performance"
    QUALITY = "quality"
    MEMORY = "memory"
    LATENCY = "latency"
    HYBRID = "hybrid"


class QualityMetric(str, Enum):
    """–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
    RELEVANCE = "relevance"
    ACCURACY = "accuracy"
    COHERENCE = "coherence"
    FLUENCY = "fluency"
    COMPLETENESS = "completeness"
    RESPONSE_TIME = "response_time"


class LLMModel(Base):
    """–ú–æ–¥–µ–ª—å LLM"""
    __tablename__ = "llm_models"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(255), unique=True, index=True, nullable=False)
    provider = Column(String(50), nullable=False, default="ollama")
    version = Column(String(50), nullable=False, default="latest")
    description = Column(Text)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
    parameters = Column(JSON, default={})
    context_length = Column(Integer, default=4096)
    max_tokens = Column(Integer, default=2048)
    temperature = Column(Float, default=0.7)
    top_p = Column(Float, default=0.9)
    
    # –°—Ç–∞—Ç—É—Å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    status = Column(SQLEnum(ModelStatus), default=ModelStatus.ACTIVE)
    is_available = Column(Boolean, default=True)
    is_default = Column(Boolean, default=False)
    
    # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    avg_response_time = Column(Float, default=0.0)
    success_rate = Column(Float, default=1.0)
    quality_score = Column(Float, default=0.0)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
    
    # –°–≤—è–∑–∏
    routes = relationship("ModelRoute", back_populates="model", cascade="all, delete-orphan")
    tuning_sessions = relationship("TuningSession", back_populates="model", cascade="all, delete-orphan")
    metrics = relationship("PerformanceMetrics", back_populates="model", cascade="all, delete-orphan")
    ab_tests = relationship("ABTest", back_populates="model", cascade="all, delete-orphan")
    optimizations = relationship("ModelOptimization", back_populates="model", cascade="all, delete-orphan")
    
    __table_args__ = (
        Index('idx_model_provider_status', 'provider', 'status'),
        Index('idx_model_quality', 'quality_score'),
        Index('idx_model_response_time', 'avg_response_time'),
    )


class ModelRoute(Base):
    """–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –º–æ–¥–µ–ª–∏"""
    __tablename__ = "model_routes"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(255), unique=True, nullable=False)
    model_id = Column(Integer, ForeignKey("llm_models.id"), nullable=False)
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
    strategy = Column(SQLEnum(RouteStrategy), default=RouteStrategy.SMART)
    priority = Column(Integer, default=1)
    weight = Column(Float, default=1.0)
    
    # –£—Å–ª–æ–≤–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
    request_types = Column(JSON, default=[])  # –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
    keywords = Column(JSON, default=[])  # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
    complexity_threshold = Column(Float, default=0.0)  # –ü–æ—Ä–æ–≥ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    user_tiers = Column(JSON, default=[])  # –£—Ä–æ–≤–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    # –°—Ç–∞—Ç—É—Å
    is_active = Column(Boolean, default=True)
    is_default = Column(Boolean, default=False)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
    
    # –°–≤—è–∑–∏
    model = relationship("LLMModel", back_populates="routes")
    
    __table_args__ = (
        Index('idx_route_strategy_active', 'strategy', 'is_active'),
        Index('idx_route_priority', 'priority'),
    )


class TuningSession(Base):
    """–°–µ—Å—Å–∏—è —Ç—é–Ω–∏–Ω–≥–∞ –º–æ–¥–µ–ª–∏"""
    __tablename__ = "tuning_sessions"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(255), nullable=False)
    model_id = Column(Integer, ForeignKey("llm_models.id"), nullable=False)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—é–Ω–∏–Ω–≥–∞
    strategy = Column(SQLEnum(TuningStrategy), default=TuningStrategy.ADAPTIVE)
    training_data = Column(JSON, default=[])  # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    validation_data = Column(JSON, default=[])  # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    
    # –ì–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    learning_rate = Column(Float, default=0.001)
    batch_size = Column(Integer, default=32)
    epochs = Column(Integer, default=3)
    
    # –°—Ç–∞—Ç—É—Å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
    status = Column(String(50), default="pending")  # pending, running, completed, failed
    progress = Column(Float, default=0.0)  # 0.0 - 1.0
    current_epoch = Column(Integer, default=0)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    final_quality_score = Column(Float, default=0.0)
    improvement_metrics = Column(JSON, default={})
    error_log = Column(Text)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    started_at = Column(DateTime(timezone=True))
    completed_at = Column(DateTime(timezone=True))
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
    
    # –°–≤—è–∑–∏
    model = relationship("LLMModel", back_populates="tuning_sessions")
    
    __table_args__ = (
        Index('idx_tuning_status', 'status'),
        Index('idx_tuning_model', 'model_id'),
        Index('idx_tuning_created', 'created_at'),
    )


class RAGDocument(Base):
    """–î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è RAG —Å–∏—Å—Ç–µ–º—ã"""
    __tablename__ = "rag_documents"
    
    id = Column(Integer, primary_key=True, index=True)
    title = Column(String(500), nullable=False)
    content = Column(Text, nullable=False)
    source = Column(String(500))
    document_type = Column(String(100), default="general")
    
    # –í–µ–∫—Ç–æ—Ä–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    embedding = Column(JSON)  # –í–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    keywords = Column(JSON, default=[])  # –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    tags = Column(JSON, default=[])
    metadata = Column(JSON, default={})
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    usage_count = Column(Integer, default=0)
    last_used = Column(DateTime(timezone=True))
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
    
    __table_args__ = (
        Index('idx_rag_document_type', 'document_type'),
        Index('idx_rag_usage_count', 'usage_count'),
        Index('idx_rag_created', 'created_at'),
    )


class PerformanceMetrics(Base):
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    __tablename__ = "performance_metrics"
    
    id = Column(Integer, primary_key=True, index=True)
    model_id = Column(Integer, ForeignKey("llm_models.id"), nullable=False)
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    timestamp = Column(DateTime(timezone=True), server_default=func.now())
    response_time = Column(Float)  # –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    tokens_generated = Column(Integer)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    tokens_processed = Column(Integer)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    
    # –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    quality_metrics = Column(JSON, default={})  # –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    user_feedback = Column(Float)  # –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (1-5)
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    memory_usage = Column(Float)  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ MB
    cpu_usage = Column(Float)  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU –≤ %
    gpu_usage = Column(Float)  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU –≤ %
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    request_type = Column(String(100))
    request_size = Column(Integer)  # –†–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ç–æ–∫–µ–Ω–∞—Ö
    route_used = Column(String(255))
    
    # –°—Ç–∞—Ç—É—Å
    success = Column(Boolean, default=True)
    error_message = Column(Text)
    
    # –°–≤—è–∑–∏
    model = relationship("LLMModel", back_populates="metrics")
    
    __table_args__ = (
        Index('idx_metrics_model_timestamp', 'model_id', 'timestamp'),
        Index('idx_metrics_response_time', 'response_time'),
        Index('idx_metrics_quality', 'quality_metrics'),
    )


class APILog(Base):
    """–õ–æ–≥ API –∑–∞–ø—Ä–æ—Å–æ–≤"""
    __tablename__ = "api_logs"
    
    id = Column(Integer, primary_key=True, index=True)
    
    # –ó–∞–ø—Ä–æ—Å
    method = Column(String(10), nullable=False)
    path = Column(String(500), nullable=False)
    query_params = Column(JSON, default={})
    request_body = Column(Text)
    request_size = Column(Integer)
    
    # –û—Ç–≤–µ—Ç
    status_code = Column(Integer, nullable=False)
    response_body = Column(Text)
    response_size = Column(Integer)
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    request_time = Column(DateTime(timezone=True), server_default=func.now())
    processing_time = Column(Float)  # –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_id = Column(String(255))
    ip_address = Column(String(45))
    user_agent = Column(String(500))
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    headers = Column(JSON, default={})
    error_details = Column(Text)
    
    __table_args__ = (
        Index('idx_api_log_method_path', 'method', 'path'),
        Index('idx_api_log_status_code', 'status_code'),
        Index('idx_api_log_request_time', 'request_time'),
        Index('idx_api_log_user', 'user_id'),
    )


class ABTest(Base):
    """A/B —Ç–µ—Å—Ç –¥–ª—è –º–æ–¥–µ–ª–µ–π"""
    __tablename__ = "ab_tests"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(255), unique=True, nullable=False)
    model_id = Column(Integer, ForeignKey("llm_models.id"), nullable=False)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞
    control_model = Column(String(255), nullable=False)  # –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
    variant_model = Column(String(255), nullable=False)  # –¢–µ—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å
    traffic_split = Column(Float, default=0.5)  # –î–æ–ª—è —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ (0.0 - 1.0)
    
    # –£—Å–ª–æ–≤–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    request_types = Column(JSON, default=[])  # –¢–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    user_segments = Column(JSON, default=[])  # –°–µ–≥–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    start_date = Column(DateTime(timezone=True), nullable=False)
    end_date = Column(DateTime(timezone=True))
    
    # –°—Ç–∞—Ç—É—Å
    status = Column(SQLEnum(ABTestStatus), default=ABTestStatus.ACTIVE)
    is_active = Column(Boolean, default=True)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    control_metrics = Column(JSON, default={})
    variant_metrics = Column(JSON, default={})
    statistical_significance = Column(Float, default=0.0)
    winner = Column(String(10))  # "control", "variant", "none"
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
    
    # –°–≤—è–∑–∏
    model = relationship("LLMModel", back_populates="ab_tests")
    
    __table_args__ = (
        Index('idx_abtest_status_active', 'status', 'is_active'),
        Index('idx_abtest_dates', 'start_date', 'end_date'),
        Index('idx_abtest_model', 'model_id'),
    )


class ModelOptimization(Base):
    """–ó–∞–ø–∏—Å—å –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏"""
    __tablename__ = "model_optimizations"
    
    id = Column(Integer, primary_key=True, index=True)
    model_id = Column(Integer, ForeignKey("llm_models.id"), nullable=False)
    
    # –¢–∏–ø –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    optimization_type = Column(SQLEnum(OptimizationType), nullable=False)
    parameters = Column(JSON, default={})  # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    target_metrics = Column(JSON, default={})  # –¶–µ–ª–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    before_metrics = Column(JSON, default={})  # –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    after_metrics = Column(JSON, default={})  # –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    improvement = Column(JSON, default={})  # –£–ª—É—á—à–µ–Ω–∏—è
    
    # –°—Ç–∞—Ç—É—Å
    status = Column(String(50), default="pending")  # pending, running, completed, failed
    error_message = Column(Text)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    started_at = Column(DateTime(timezone=True), server_default=func.now())
    completed_at = Column(DateTime(timezone=True))
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    
    # –°–≤—è–∑–∏
    model = relationship("LLMModel", back_populates="optimizations")
    
    __table_args__ = (
        Index('idx_optimization_type_status', 'optimization_type', 'status'),
        Index('idx_optimization_model', 'model_id'),
        Index('idx_optimization_created', 'created_at'),
    )


class QualityAssessment(Base):
    """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤"""
    __tablename__ = "quality_assessments"
    
    id = Column(Integer, primary_key=True, index=True)
    model_id = Column(Integer, ForeignKey("llm_models.id"), nullable=False)
    
    # –ó–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç
    request_text = Column(Text, nullable=False)
    response_text = Column(Text, nullable=False)
    context_documents = Column(JSON, default=[])  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã RAG
    
    # –û—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    relevance_score = Column(Float)  # –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    accuracy_score = Column(Float)  # –¢–æ—á–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    coherence_score = Column(Float)  # –°–≤—è–∑–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
    fluency_score = Column(Float)  # –ë–µ–≥–ª–æ—Å—Ç—å —è–∑—ã–∫–∞
    completeness_score = Column(Float)  # –ü–æ–ª–Ω–æ—Ç–∞ –æ—Ç–≤–µ—Ç–∞
    
    # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    overall_score = Column(Float, nullable=False)
    
    # –î–µ—Ç–∞–ª–∏ –æ—Ü–µ–Ω–∫–∏
    assessment_details = Column(JSON, default={})
    feedback_notes = Column(Text)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    assessed_by = Column(String(255))  # –ö—Ç–æ –æ—Ü–µ–Ω–∏–≤–∞–ª (user, system, expert)
    assessment_method = Column(String(100))  # –ú–µ—Ç–æ–¥ –æ—Ü–µ–Ω–∫–∏
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    
    __table_args__ = (
        Index('idx_quality_model_score', 'model_id', 'overall_score'),
        Index('idx_quality_assessed_by', 'assessed_by'),
        Index('idx_quality_created', 'created_at'),
    )


class SystemHealth(Base):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
    __tablename__ = "system_health"
    
    id = Column(Integer, primary_key=True, index=True)
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    timestamp = Column(DateTime(timezone=True), server_default=func.now())
    cpu_usage = Column(Float)  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU –≤ %
    memory_usage = Column(Float)  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ %
    disk_usage = Column(Float)  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ –≤ %
    network_io = Column(JSON, default={})  # –°–µ—Ç–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    
    # Ollama –º–µ—Ç—Ä–∏–∫–∏
    ollama_status = Column(String(50))  # running, stopped, error
    active_models = Column(Integer, default=0)
    total_requests = Column(Integer, default=0)
    error_rate = Column(Float, default=0.0)
    
    # RAG –º–µ—Ç—Ä–∏–∫–∏
    rag_status = Column(String(50))  # active, inactive, error
    documents_count = Column(Integer, default=0)
    vector_db_status = Column(String(50))
    
    # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    response_time_avg = Column(Float, default=0.0)
    requests_per_minute = Column(Float, default=0.0)
    active_connections = Column(Integer, default=0)
    
    # –ê–ª–µ—Ä—Ç—ã
    alerts = Column(JSON, default=[])
    
    __table_args__ = (
        Index('idx_health_timestamp', 'timestamp'),
        Index('idx_health_ollama_status', 'ollama_status'),
        Index('idx_health_rag_status', 'rag_status'),
    ) 