// @ts-nocheck
import React, { useState, useEffect } from 'react'
import Header from './components/Header'
import { DomainInput } from './components/DomainInput'
import { DomainsList } from './components/DomainsList'
import { AnalysisProgress } from './components/AnalysisProgress'
import { Recommendations } from './components/Recommendations'
import { Notifications } from './components/Notifications'
import { OllamaStatus } from './components/OllamaStatus'
import { AIAnalysisFlow } from './components/AIAnalysisFlow'
import Metrics from './components/Metrics'
import Charts from './components/Charts'
import Export from './components/Export'
import { AnalysisHistory } from './components/AnalysisHistory'
import { Benchmarks } from './components/Benchmarks'
import { BenchmarkDetails } from './components/BenchmarkDetails'
import { Settings } from './components/Settings'
import Insights from './components/Insights'
import Analytics from './components/Analytics'
import { useWebSocket } from './hooks/useWebSocket'
import { useNotifications } from './hooks/useNotifications'
import { Domain, Recommendation, AnalysisStats, AIThought, OllamaStatus as OllamaStatusType, WebSocketMessage, BenchmarkHistory } from './types'

function App() {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [domain] = useState('')
  const [domains, setDomains] = useState<Domain[]>([])
  const [recommendations, setRecommendations] = useState<Recommendation[]>([])
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [analysisStats, setAnalysisStats] = useState<AnalysisStats | null>(null)
  const [analysisStep, setAnalysisStep] = useState('')
  const [analysisProgress, setAnalysisProgress] = useState(0)
  const [aiThoughts, setAiThoughts] = useState<AIThought[]>([])
  const [showAIAnalysis, setShowAIAnalysis] = useState(false)
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  const [activeTab, setActiveTab] = useState('dashboard')
  const [sidebarOpen, setSidebarOpen] = useState(true)
  const [selectedBenchmark, setSelectedBenchmark] = useState<BenchmarkHistory | null>(null)
  const [ollamaStatus, setOllamaStatus] = useState<OllamaStatusType>({
    ready_for_work: false,
    server_available: false,
    model_loaded: false,
    message: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...',
    status: 'connecting',
    connection: '',
    models_count: 0,
    available_models: [],
    timestamp: '',
    last_check: ''
  })

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –º–µ—Ç—Ä–∏–∫
  const [metrics, setMetrics] = useState({
    totalDomains: 0,
    totalAnalyses: 0,
    totalRecommendations: 0,
    avgAnalysisTime: 0,
    successRate: 0,
    activeModels: 0
  })

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∫–ª–∏–µ–Ω—Ç–∞
  const clientId = React.useMemo(() => `client_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`, [])

  // WebSocket –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const { lastMessage } = useWebSocket({
    url: 'ws://localhost:8000/ws',
    clientId,
    reconnectInterval: 5000
  })
  const { notifications, addNotification, removeNotification } = useNotifications()

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–º–µ–Ω–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadDomains()
    checkOllamaStatus()
    loadMetrics()
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Ollama
    const interval = setInterval(checkOllamaStatus, 30000)
    return () => clearInterval(interval)
  }, [])

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    if (lastMessage) {
      handleWebSocketMessage(lastMessage)
    }
  }, [lastMessage])

  function handleWebSocketMessage(data: WebSocketMessage) {
    console.log('üì° WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:', data.type, data)

    switch (data.type) {
      case 'progress':
        setAnalysisStep(data.step || '')
        setAnalysisProgress(data.percentage || 0)
        setAnalysisStats({
          current: data.current || 0,
          total: data.total || 0,
          details: data.details || ''
        })
        break

      case 'ai_thinking':
        setAiThoughts(prev => [...prev, {
          id: Date.now().toString(),
          type: 'ai_thinking',
          thought: data.thought || '',
          thinking_stage: data.thinking_stage || '',
          emoji: data.emoji || '',
          stage: data.stage || '',
          content: data.content || '',
          confidence: data.confidence || 0,
          semantic_weight: data.semantic_weight || 0,
          related_concepts: data.related_concepts || [],
          reasoning_chain: data.reasoning_chain || [],
          timestamp: data.timestamp || new Date().toISOString()
        }])
        break

      case 'enhanced_ai_thinking':
        setAiThoughts(prev => [...prev, {
          id: data.thought_id || Date.now().toString(),
          type: 'enhanced_ai_thinking',
          stage: data.stage || '',
          content: data.content || '',
          confidence: data.confidence || 0,
          semantic_weight: data.semantic_weight || 0,
          related_concepts: data.related_concepts || [],
          reasoning_chain: data.reasoning_chain || [],
          timestamp: data.timestamp || new Date().toISOString()
        }])
        break

      case 'ollama':
        console.log('ü§ñ Ollama —Å—Ç–∞—Ç—É—Å:', data.info)
        break

      case 'error':
        addNotification('error', data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞')
        setIsAnalyzing(false)
        break

      case 'ping':
        // –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        break

      default:
        console.log('üì° –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', data.type)
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–º–µ–Ω–æ–≤
  async function loadDomains() {
    try {
      const response = await fetch('/api/v1/domains')
      if (response.ok) {
        const data = await response.json()
        setDomains(data.domains || [])
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–º–µ–Ω–æ–≤:', error)
      addNotification('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏')
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫
  async function loadMetrics() {
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π API –¥–ª—è –º–µ—Ç—Ä–∏–∫
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      setMetrics({
        totalDomains: domains.length,
        totalAnalyses: 42,
        totalRecommendations: 156,
        avgAnalysisTime: 2.3,
        successRate: 94,
        activeModels: 2
      })
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫:', error)
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Ollama
  async function checkOllamaStatus() {
    try {
      const response = await fetch('/api/v1/ollama_status')
      if (response.ok) {
        const status = await response.json()
        setOllamaStatus(status)
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Ollama:', error)
      setOllamaStatus({
        ready_for_work: false,
        server_available: false,
        model_loaded: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama',
        status: 'error',
        connection: '',
        models_count: 0,
        available_models: [],
        timestamp: '',
        last_check: ''
      })
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –¥–æ–º–µ–Ω–∞
  async function handleAnalyzeDomain(domainToAnalyze: string, comprehensive: boolean = true) {
    if (!domainToAnalyze.trim()) {
      addNotification('warning', '–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞', '–í–Ω–∏–º–∞–Ω–∏–µ')
      return
    }

    if (!ollamaStatus.ready_for_work) {
      addNotification('warning', 'Ollama –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ', '–°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞')
      return
    }

    setIsAnalyzing(true)
    setAnalysisStep('–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞...')
    setAnalysisProgress(0)
    setAnalysisStats(null)
    setAiThoughts([])
    setShowAIAnalysis(true)
    setRecommendations([])

    try {
      const response = await fetch('/api/v1/wp_index', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          domain: domainToAnalyze.trim(),
          client_id: clientId,
          comprehensive: comprehensive
        })
      })

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`)
      }

      const data = await response.json()
      
      if (data.status === 'success') {
        setRecommendations(data.recommendations || [])
        addNotification('success', `–ù–∞–π–¥–µ–Ω–æ ${data.recommendations?.length || 0} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è ${data.posts_found || 0} —Å—Ç–∞—Ç–µ–π`, '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω')
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        loadMetrics()
      } else {
        throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error)
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      addNotification('error', errorMessage, '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞')
    } finally {
      setIsAnalyzing(false)
      setAnalysisStep('')
      setAnalysisProgress(100)
    }
  }

  const handleCloseAIAnalysis = () => {
    setShowAIAnalysis(false)
  }

  const handleExport = (format: string) => {
    addNotification('success', `–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${format.toUpperCase()}`, '–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω')
  }

  // –†–µ–Ω–¥–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
  const renderContent = () => {
    switch (activeTab) {
      case 'dashboard':
        return (
          <div className="space-y-6">
            {/* –ú–µ—Ç—Ä–∏–∫–∏ */}
            <Metrics metrics={metrics} />
            
            {/* –ê–Ω–∞–ª–∏–∑ –¥–æ–º–µ–Ω–∞ */}
            <div className="card">
              <div className="card-header">
                <div className="card-title">–ê–Ω–∞–ª–∏–∑ –¥–æ–º–µ–Ω–∞</div>
              </div>
              <div className="card-content">
                <DomainInput 
                  onAnalyze={handleAnalyzeDomain}
                  isLoading={isAnalyzing}
                />
              </div>
            </div>

            {isAnalyzing && (
              <div className="card">
                <div className="card-header">
                  <div className="card-title">–ü—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞</div>
                </div>
                <div className="card-content">
                  <AnalysisProgress
                    isVisible={isAnalyzing}
                    onClose={() => setIsAnalyzing(false)}
                    currentStep={analysisStep}
                    progress={analysisProgress}
                    current={analysisStats?.current || 0}
                    total={analysisStats?.total || 0}
                    details={analysisStats?.details || ''}
                  />
                </div>
              </div>
            )}

            {recommendations.length > 0 && (
              <div className="card">
                <div className="card-header">
                  <div className="card-title">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</div>
                </div>
                <div className="card-content">
                  <Recommendations 
                    recommendations={recommendations}
                    domain={domain}
                  />
                </div>
              </div>
            )}

            {/* –ì—Ä–∞—Ñ–∏–∫–∏ */}
            <Charts 
              analysisHistory={[
                { date: '2024-01-01', value: 12 },
                { date: '2024-01-02', value: 18 },
                { date: '2024-01-03', value: 15 },
                { date: '2024-01-04', value: 22 },
                { date: '2024-01-05', value: 28 }
              ]}
              domainStats={[
                { label: 'example.com', value: 45 },
                { label: 'test.ru', value: 32 },
                { label: 'demo.org', value: 28 },
                { label: 'sample.net', value: 19 }
              ]}
              modelPerformance={[
                { label: 'qwen2.5:7b-turbo', value: 65 },
                { label: 'qwen2.5:7b-instruct', value: 35 }
              ]}
            />
          </div>
        )

      case 'domains':
        return (
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h2 className="text-2xl font-semibold">–î–æ–º–µ–Ω—ã</h2>
              <button 
                className="btn btn-primary"
                onClick={loadDomains}
              >
                –û–±–Ω–æ–≤–∏—Ç—å
              </button>
            </div>
            <DomainsList 
              domains={domains} 
              onAnalyze={handleAnalyzeDomain}
            />
          </div>
        )

      case 'history':
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-semibold">–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤</h2>
            <AnalysisHistory />
          </div>
        )

      case 'benchmarks':
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-semibold">–ë–µ–Ω—á–º–∞—Ä–∫–∏ –º–æ–¥–µ–ª–µ–π</h2>
            <Benchmarks 
              onViewBenchmark={setSelectedBenchmark}
            />
          </div>
        )

      case 'export':
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-semibold">–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</h2>
            <Export 
              recommendations={recommendations.map(rec => ({
                from: rec.source_post?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                to: rec.target_post?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                anchor: rec.anchor_text,
                comment: rec.reasoning
              }))}
              domain={domain}
              onExport={handleExport}
            />
          </div>
        )

      case 'status':
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-semibold">–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h2>
            <OllamaStatus 
              status={ollamaStatus} 
              onRefresh={checkOllamaStatus} 
            />
          </div>
        )

      case 'settings':
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-semibold">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
            <Settings />
          </div>
        )

      case 'insights':
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-semibold">AI –ò–Ω—Å–∞–π—Ç—ã</h2>
            <Insights domain={domain} />
          </div>
        )

      case 'analytics':
        return (
          <div className="space-y-6">
            <Analytics domain={domain} />
          </div>
        )

      default:
        return (
          <div className="text-center py-12">
            <h2 className="text-2xl font-semibold mb-4">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</h2>
            <p className="text-muted">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏</p>
          </div>
        )
    }
  }

  const getTabTitle = () => {
    const titles: Record<string, string> = {
      dashboard: '–î–∞—à–±–æ—Ä–¥',
      domains: '–î–æ–º–µ–Ω—ã',
      history: '–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤',
      benchmarks: '–ë–µ–Ω—á–º–∞—Ä–∫–∏',
      export: '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö',
      status: '–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã',
      settings: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
      insights: 'AI –ò–Ω—Å–∞–π—Ç—ã',
      analytics: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'
    }
    return titles[activeTab] || 'Blink'
  }

  return (
    <div className="app-container">
      {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
      <aside className={`sidebar ${!sidebarOpen ? 'hidden' : ''}`}>
        <div className="sidebar-header">
          <div 
            className="flex items-center gap-3 cursor-pointer hover:opacity-80 transition-opacity"
            onClick={() => setActiveTab('dashboard')}
          >
            <div className="w-8 h-8 bg-primary rounded-lg flex items-center justify-center text-white font-semibold">
              üîó
            </div>
            <h1 className="text-lg font-semibold">Blink</h1>
          </div>
        </div>
        
        <div className="sidebar-content">
          <nav className="space-y-2">
            {[
              { id: 'dashboard', label: 'üìä –î–∞—à–±–æ—Ä–¥', icon: 'üìä' },
              { id: 'domains', label: 'üåê –î–æ–º–µ–Ω—ã', icon: 'üåê' },
              { id: 'history', label: 'üìã –ò—Å—Ç–æ—Ä–∏—è', icon: 'üìã' },
              { id: 'benchmarks', label: '‚ö° –ë–µ–Ω—á–º–∞—Ä–∫–∏', icon: '‚ö°' },
              { id: 'export', label: 'üì§ –≠–∫—Å–ø–æ—Ä—Ç', icon: 'üì§' },
              { id: 'status', label: '‚öôÔ∏è –°—Ç–∞—Ç—É—Å', icon: '‚öôÔ∏è' },
              { id: 'settings', label: 'üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏', icon: 'üîß' },
              { id: 'insights', label: 'üìä AI –ò–Ω—Å–∞–π—Ç—ã', icon: 'üìä' },
              { id: 'analytics', label: 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', icon: 'üìä' }
            ].map((tab) => (
              <button
                key={tab.id}
                className={`w-full text-left px-3 py-2 rounded-md transition-colors ${
                  activeTab === tab.id 
                    ? 'bg-accent text-accent-foreground' 
                    : 'hover:bg-accent hover:text-accent-foreground'
                }`}
                onClick={() => setActiveTab(tab.id)}
              >
                {tab.label}
              </button>
            ))}
          </nav>
        </div>
      </aside>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <main className="main-content">
        <Header 
          title={getTabTitle()}
          onMenuClick={() => setSidebarOpen(!sidebarOpen)}
          actions={
            activeTab === 'dashboard' && recommendations.length > 0 ? (
              <button 
                className="btn btn-secondary"
                onClick={() => setActiveTab('export')}
              >
                üì§ –≠–∫—Å–ø–æ—Ä—Ç
              </button>
            ) : undefined
          }
        />
        
        <div className="content-body">
          {renderContent()}
        </div>
      </main>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      <Notifications 
        notifications={notifications} 
        onRemove={removeNotification}
        onClear={() => {
          // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
          notifications.forEach(notification => removeNotification(notification.id))
        }}
      />

      {/* AI Analysis Flow */}
      <AIAnalysisFlow
        isOpen={showAIAnalysis}
        onClose={handleCloseAIAnalysis}
        aiThoughts={aiThoughts}
        analysisProgress={analysisProgress}
        analysisStep={analysisStep}
      />

      {/* Benchmark Details Modal */}
      <BenchmarkDetails
        benchmark={selectedBenchmark}
        onClose={() => setSelectedBenchmark(null)}
      />
    </div>
  )
}

export default App 