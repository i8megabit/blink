"""
üß™ –¢–ï–°–¢–´ API –ë–ï–ù–ß–ú–ê–†–ö –ú–ò–ö–†–û–°–ï–†–í–ò–°–ê
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FastAPI —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
"""

import pytest
import asyncio
from unittest.mock import Mock, patch, AsyncMock
from datetime import datetime
from typing import List, Dict, Any

import httpx
from fastapi.testclient import TestClient

from app.main import app
from app.models import BenchmarkRequest, BenchmarkType, BenchmarkStatus
from app.config import settings


@pytest.fixture
def client():
    """–§–∏–∫—Å—Ç—É—Ä–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
    return TestClient(app)


@pytest.fixture
def benchmark_request_data():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞."""
    return {
        "name": "Test Benchmark",
        "description": "Test description",
        "benchmark_type": "seo_basic",
        "models": ["llama2", "mistral"],
        "iterations": 3,
        "parameters": {
            "temperature": 0.7,
            "max_tokens": 1024
        }
    }


class TestRootEndpoint:
    """–¢–µ—Å—Ç—ã –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞."""
    
    def test_root_endpoint(self, client):
        """–¢–µ—Å—Ç –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞."""
        response = client.get("/")
        
        assert response.status_code == 200
        data = response.json()
        assert data["service"] == "Benchmark Service"
        assert data["version"] == settings.version
        assert data["status"] == "running"
        assert "docs" in data
        assert "health" in data


class TestHealthEndpoint:
    """–¢–µ—Å—Ç—ã —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –∑–¥–æ—Ä–æ–≤—å—è."""
    
    def test_health_check(self, client):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è."""
        response = client.get("/health")
        
        assert response.status_code == 200
        data = response.json()
        assert "status" in data
        assert "timestamp" in data
        assert "version" in data
        assert "uptime" in data
        assert "services" in data
        assert data["version"] == settings.version


class TestBenchmarkEndpoints:
    """–¢–µ—Å—Ç—ã —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –±–µ–Ω—á–º–∞—Ä–∫–∞."""
    
    @patch('app.main.get_benchmark_service')
    @patch('app.main.get_cache')
    def test_create_benchmark_success(self, mock_get_cache, mock_get_service, client, benchmark_request_data):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–Ω—á–º–∞—Ä–∫–∞."""
        # –ú–æ–∫–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        mock_cache = AsyncMock()
        mock_get_cache.return_value = mock_cache
        mock_cache.get.return_value = None  # –ù–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        
        mock_service = AsyncMock()
        mock_get_service.return_value = mock_service
        
        response = client.post("/benchmark", json=benchmark_request_data)
        
        assert response.status_code == 200
        data = response.json()
        assert data["success"] is True
        assert "–∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ" in data["message"]
    
    @patch('app.main.get_cache')
    def test_create_benchmark_cached_result(self, mock_get_cache, client, benchmark_request_data):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–Ω—á–º–∞—Ä–∫–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º."""
        # –ú–æ–∫–∞–µ–º –∫—ç—à —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        mock_cache = AsyncMock()
        mock_get_cache.return_value = mock_cache
        mock_cache.get.return_value = {
            "benchmark_id": "test-id",
            "name": "Test Benchmark",
            "status": "completed"
        }
        
        response = client.post("/benchmark", json=benchmark_request_data)
        
        assert response.status_code == 200
        data = response.json()
        assert data["success"] is True
        assert "–ø–æ–ª—É—á–µ–Ω –∏–∑ –∫—ç—à–∞" in data["message"]
        assert data["data"] is not None
    
    def test_create_benchmark_invalid_data(self, client):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–Ω—á–º–∞—Ä–∫–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
        invalid_data = {
            "name": "",  # –ü—É—Å—Ç–æ–µ –∏–º—è
            "benchmark_type": "invalid_type",
            "models": [],  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
            "iterations": 0  # –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
        }
        
        response = client.post("/benchmark", json=invalid_data)
        
        assert response.status_code == 422  # Validation Error
    
    @patch('app.main.get_cache')
    def test_get_benchmark_success(self, mock_get_cache, client):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ–Ω—á–º–∞—Ä–∫–∞."""
        benchmark_id = "test-id"
        mock_result = {
            "benchmark_id": benchmark_id,
            "name": "Test Benchmark",
            "status": "completed"
        }
        
        mock_cache = AsyncMock()
        mock_get_cache.return_value = mock_cache
        mock_cache.get_benchmark_result.return_value = mock_result
        
        response = client.get(f"/benchmark/{benchmark_id}")
        
        assert response.status_code == 200
        data = response.json()
        assert data["success"] is True
        assert data["data"]["benchmark_id"] == benchmark_id
    
    @patch('app.main.get_cache')
    def test_get_benchmark_not_found(self, mock_get_cache, client):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫–∞."""
        benchmark_id = "non-existent-id"
        
        mock_cache = AsyncMock()
        mock_get_cache.return_value = mock_cache
        mock_cache.get_benchmark_result.return_value = None
        
        response = client.get(f"/benchmark/{benchmark_id}")
        
        assert response.status_code == 404
        data = response.json()
        assert data["success"] is False
        assert "–Ω–µ –Ω–∞–π–¥–µ–Ω" in data["message"]
    
    @patch('app.main.get_benchmark_service')
    def test_list_benchmarks_success(self, mock_get_service, client):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤."""
        mock_results = [
            {
                "benchmark_id": "1",
                "name": "Test 1",
                "status": "completed"
            },
            {
                "benchmark_id": "2",
                "name": "Test 2",
                "status": "completed"
            }
        ]
        
        mock_service = AsyncMock()
        mock_get_service.return_value = mock_service
        mock_service.get_benchmark_history.return_value = mock_results
        
        response = client.get("/benchmarks?limit=10&offset=0")
        
        assert response.status_code == 200
        data = response.json()
        assert data["success"] is True
        assert len(data["data"]) == 2
        assert data["total"] == 2
    
    @patch('app.main.get_benchmark_service')
    def test_list_benchmarks_with_filters(self, mock_get_service, client):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏."""
        mock_service = AsyncMock()
        mock_get_service.return_value = mock_service
        mock_service.get_benchmark_history.return_value = []
        
        response = client.get("/benchmarks?benchmark_type=seo_basic&model_name=llama2&status=completed")
        
        assert response.status_code == 200
        data = response.json()
        assert data["success"] is True
    
    @patch('app.main.get_benchmark_service')
    def test_cancel_benchmark_success(self, mock_get_service, client):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–º–µ–Ω—ã –±–µ–Ω—á–º–∞—Ä–∫–∞."""
        benchmark_id = "test-id"
        
        mock_service = AsyncMock()
        mock_get_service.return_value = mock_service
        mock_service.cancel_benchmark.return_value = True
        
        response = client.delete(f"/benchmark/{benchmark_id}")
        
        assert response.status_code == 200
        data = response.json()
        assert data["success"] is True
        assert "–æ—Ç–º–µ–Ω–µ–Ω" in data["message"]
    
    @patch('app.main.get_benchmark_service')
    def test_cancel_benchmark_not_found(self, mock_get_service, client):
        """–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫–∞."""
        benchmark_id = "non-existent-id"
        
        mock_service = AsyncMock()
        mock_get_service.return_value = mock_service
        mock_service.cancel_benchmark.return_value = False
        
        response = client.delete(f"/benchmark/{benchmark_id}")
        
        assert response.status_code == 404
        data = response.json()
        assert data["success"] is False
        assert "–Ω–µ –Ω–∞–π–¥–µ–Ω" in data["message"]


class TestModelsEndpoints:
    """–¢–µ—Å—Ç—ã —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –º–æ–¥–µ–ª–µ–π."""
    
    def test_list_models(self, client):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π."""
        response = client.get("/models")
        
        assert response.status_code == 200
        data = response.json()
        assert data["success"] is True
        assert "data" in data
        assert isinstance(data["data"], list)
        assert len(data["data"]) > 0
    
    @patch('app.main.get_benchmark_service')
    def test_get_model_performance_success(self, mock_get_service, client):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏."""
        model_name = "llama2"
        mock_performance = {
            "model": model_name,
            "avg_response_time": 1.5,
            "accuracy": 0.85
        }
        
        mock_service = AsyncMock()
        mock_get_service.return_value = mock_service
        mock_service.get_model_performance.return_value = mock_performance
        
        response = client.get(f"/models/{model_name}/performance")
        
        assert response.status_code == 200
        data = response.json()
        assert data["success"] is True
        assert data["data"]["model"] == model_name
    
    @patch('app.main.get_benchmark_service')
    def test_get_model_performance_not_found(self, mock_get_service, client):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏."""
        model_name = "unknown_model"
        
        mock_service = AsyncMock()
        mock_get_service.return_value = mock_service
        mock_service.get_model_performance.return_value = None
        
        response = client.get(f"/models/{model_name}/performance")
        
        assert response.status_code == 404
        data = response.json()
        assert data["success"] is False
        assert "–Ω–µ –Ω–∞–π–¥–µ–Ω—ã" in data["message"]


class TestBenchmarkTypesEndpoint:
    """–¢–µ—Å—Ç—ã —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —Ç–∏–ø–æ–≤ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤."""
    
    def test_get_benchmark_types(self, client):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤."""
        response = client.get("/benchmark-types")
        
        assert response.status_code == 200
        data = response.json()
        assert data["success"] is True
        assert "data" in data
        assert isinstance(data["data"], dict)
        assert len(data["data"]) > 0


class TestStatsEndpoints:
    """–¢–µ—Å—Ç—ã —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    
    @patch('app.main.get_cache_stats')
    def test_get_cache_statistics(self, mock_get_cache_stats, client):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞."""
        mock_stats = {
            "enabled": True,
            "total_keys": 100,
            "memory_usage": "50MB",
            "hit_rate": 85.5,
            "connected_clients": 5,
            "uptime": 3600
        }
        mock_get_cache_stats.return_value = mock_stats
        
        response = client.get("/stats/cache")
        
        assert response.status_code == 200
        data = response.json()
        assert data["enabled"] is True
        assert data["total_keys"] == 100
        assert data["hit_rate"] == 85.5
    
    def test_get_performance_statistics(self, client):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        response = client.get("/stats/performance")
        
        assert response.status_code == 200
        data = response.json()
        assert "active_benchmarks" in data
        assert "completed_today" in data
        assert "avg_response_time" in data
        assert "memory_usage_mb" in data
        assert "cpu_usage_percent" in data


class TestCacheEndpoints:
    """–¢–µ—Å—Ç—ã —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∫—ç—à–∞."""
    
    @patch('app.main.get_cache')
    def test_clear_cache_success(self, mock_get_cache, client):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞."""
        mock_cache = AsyncMock()
        mock_get_cache.return_value = mock_cache
        mock_cache.clear.return_value = 50
        
        response = client.delete("/cache?pattern=test*")
        
        assert response.status_code == 200
        data = response.json()
        assert data["success"] is True
        assert data["deleted_count"] == 50
        assert "—É–¥–∞–ª–µ–Ω–æ" in data["message"]


class TestExportEndpoints:
    """–¢–µ—Å—Ç—ã —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞."""
    
    def test_export_benchmarks(self, client):
        """–¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤."""
        export_request = {
            "benchmark_ids": ["1", "2", "3"],
            "format": "json",
            "include_raw_data": False,
            "include_metrics": True
        }
        
        response = client.post("/export", json=export_request)
        
        assert response.status_code == 200
        data = response.json()
        assert data["success"] is True
        assert "filename" in data
        assert "download_url" in data
        assert data["format"] == "json"
    
    def test_export_benchmarks_invalid_format(self, client):
        """–¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º."""
        export_request = {
            "benchmark_ids": ["1"],
            "format": "invalid_format",
            "include_raw_data": False,
            "include_metrics": True
        }
        
        response = client.post("/export", json=export_request)
        
        assert response.status_code == 422  # Validation Error


class TestCompareEndpoints:
    """–¢–µ—Å—Ç—ã —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."""
    
    @patch('app.main.get_cache')
    def test_compare_benchmarks_success(self, mock_get_cache, client):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –±–µ–Ω—á–º–∞—Ä–∫–æ–≤."""
        benchmark_ids = ["1", "2"]
        mock_results = [
            {"benchmark_id": "1", "name": "Test 1"},
            {"benchmark_id": "2", "name": "Test 2"}
        ]
        
        mock_cache = AsyncMock()
        mock_get_cache.return_value = mock_cache
        mock_cache.get_benchmark_result.side_effect = mock_results
        
        response = client.post("/compare", json=benchmark_ids)
        
        assert response.status_code == 200
        data = response.json()
        assert data["success"] is True
        assert "—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ" in data["message"]
    
    def test_compare_benchmarks_insufficient_data(self, client):
        """–¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
        benchmark_ids = ["1"]  # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω ID
        
        response = client.post("/compare", json=benchmark_ids)
        
        assert response.status_code == 400
        data = response.json()
        assert data["success"] is False
        assert "–º–∏–Ω–∏–º—É–º 2" in data["message"]


class TestWebSocketEndpoints:
    """–¢–µ—Å—Ç—ã WebSocket —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤."""
    
    @pytest.mark.asyncio
    async def test_websocket_connection(self):
        """–¢–µ—Å—Ç WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
        async with httpx.AsyncClient(app=app, base_url="http://test") as ac:
            with ac.websocket_connect("/ws/test-client") as websocket:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
                assert websocket is not None
    
    @pytest.mark.asyncio
    async def test_websocket_message_echo(self):
        """–¢–µ—Å—Ç —ç—Ö–æ —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket."""
        async with httpx.AsyncClient(app=app, base_url="http://test") as ac:
            with ac.websocket_connect("/ws/test-client") as websocket:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await websocket.send_text("Hello, WebSocket!")
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
                response = await websocket.receive_text()
                assert "Echo: Hello, WebSocket!" in response


class TestErrorHandling:
    """–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫."""
    
    def test_http_exception_handler(self, client):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º 404 –æ—à–∏–±–∫—É
        response = client.get("/non-existent-endpoint")
        
        assert response.status_code == 404
        data = response.json()
        assert data["success"] is False
        assert data["error"] == "HTTPException"
    
    def test_general_exception_handler(self, client):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ–±—â–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
        # –≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω—ã–º –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        # —Ç–∞–∫ –∫–∞–∫ –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        pass


class TestValidation:
    """–¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö."""
    
    def test_benchmark_request_validation(self, client):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞."""
        # –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        invalid_request = {
            "name": "",  # –ü—É—Å—Ç–æ–µ –∏–º—è
            "benchmark_type": "invalid_type",  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–∏–ø
            "models": [],  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            "iterations": -1  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        }
        
        response = client.post("/benchmark", json=invalid_request)
        
        assert response.status_code == 422
    
    def test_benchmark_request_valid_data(self, client, benchmark_request_data):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        response = client.post("/benchmark", json=benchmark_request_data)
        
        # –î–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é (–º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å –Ω–∞ –¥—Ä—É–≥–∏—Ö —ç—Ç–∞–ø–∞—Ö)
        assert response.status_code in [200, 500]  # 500 –µ—Å–ª–∏ –Ω–µ—Ç –º–æ–∫–æ–≤


class TestPerformance:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API."""
    
    def test_health_check_performance(self, client):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ health check."""
        import time
        
        start_time = time.time()
        response = client.get("/health")
        end_time = time.time()
        
        assert response.status_code == 200
        assert end_time - start_time < 1.0  # –ú–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã
    
    def test_root_endpoint_performance(self, client):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞."""
        import time
        
        start_time = time.time()
        response = client.get("/")
        end_time = time.time()
        
        assert response.status_code == 200
        assert end_time - start_time < 0.1  # –ú–µ–Ω–µ–µ 100ms


# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
class TestIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã API."""
    
    @patch('app.main.get_benchmark_service')
    @patch('app.main.get_cache')
    def test_full_benchmark_workflow(self, mock_get_cache, mock_get_service, client, benchmark_request_data):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow –±–µ–Ω—á–º–∞—Ä–∫–∞ —á–µ—Ä–µ–∑ API."""
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–Ω—á–º–∞—Ä–∫–∞
        mock_cache = AsyncMock()
        mock_get_cache.return_value = mock_cache
        mock_cache.get.return_value = None
        
        mock_service = AsyncMock()
        mock_get_service.return_value = mock_service
        
        create_response = client.post("/benchmark", json=benchmark_request_data)
        assert create_response.status_code == 200
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
        mock_service.get_benchmark_history.return_value = []
        list_response = client.get("/benchmarks")
        assert list_response.status_code == 200
        
        # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_response = client.get("/stats/cache")
        assert stats_response.status_code == 200
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        health_response = client.get("/health")
        assert health_response.status_code == 200 