"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
"""

import time
from contextlib import asynccontextmanager
from fastapi import FastAPI, HTTPException, Query, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
import structlog

from .config import settings
from .cache import cache
from .services import docs_service
from .models import (
    DocumentType, DocumentationResponse, VersionResponse, 
    FAQResponse, AboutResponse, HowItWorksResponse,
    HealthResponse, CacheStatsResponse
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.processors.JSONRenderer()
    ],
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

logger = structlog.get_logger(__name__)

# –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ uptime
start_time = time.time()


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ó–∞–ø—É—Å–∫
    logger.info("–ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    try:
        await cache.connect()
        logger.info("Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis", error=str(e))
    
    yield
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    await cache.disconnect()


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title=settings.app_name,
    description="–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏ –¥–ª—è SEO Link Recommender",
    version=settings.app_version,
    docs_url="/docs",
    redoc_url="/redoc",
    lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.cors_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.get("/", response_class=HTMLResponse)
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–≤–∏—Å–µ"""
    return """
    <!DOCTYPE html>
    <html>
    <head>
        <title>SEO Link Recommender - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</title>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
            .container { max-width: 800px; margin: 0 auto; background: white; padding: 40px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            h1 { color: #333; text-align: center; }
            .endpoints { margin-top: 30px; }
            .endpoint { background: #f8f9fa; padding: 15px; margin: 10px 0; border-radius: 5px; border-left: 4px solid #007bff; }
            .method { font-weight: bold; color: #007bff; }
            .url { font-family: monospace; color: #666; }
            .description { margin-top: 5px; color: #555; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üöÄ SEO Link Recommender - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</h1>
            <p>–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏</p>
            
            <div class="endpoints">
                <h2>–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:</h2>
                
                <div class="endpoint">
                    <div class="method">GET</div>
                    <div class="url">/api/v1/health</div>
                    <div class="description">–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞</div>
                </div>
                
                <div class="endpoint">
                    <div class="method">GET</div>
                    <div class="url">/api/v1/version</div>
                    <div class="description">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏</div>
                </div>
                
                <div class="endpoint">
                    <div class="method">GET</div>
                    <div class="url">/api/v1/docs/{type}</div>
                    <div class="description">–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (readme, roadmap, cicd, faq, about, how_it_works)</div>
                </div>
                
                <div class="endpoint">
                    <div class="method">GET</div>
                    <div class="url">/api/v1/cache/stats</div>
                    <div class="description">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ Redis</div>
                </div>
                
                <div class="endpoint">
                    <div class="method">DELETE</div>
                    <div class="url">/api/v1/cache/clear</div>
                    <div class="description">–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞</div>
                </div>
            </div>
            
            <p style="text-align: center; margin-top: 30px; color: #666;">
                <a href="/docs">üìñ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</a> | 
                <a href="/redoc">üìã ReDoc –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</a>
            </p>
        </div>
    </body>
    </html>
    """


@app.get(f"{settings.api_prefix}/health", response_model=HealthResponse)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
        redis_status = "connected" if cache.redis else "disconnected"
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º uptime
        uptime = time.time() - start_time
        
        return HealthResponse(
            status="healthy",
            version=settings.app_version,
            redis_status=redis_status,
            uptime=uptime
        )
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è", error=str(e))
        raise HTTPException(status_code=500, detail="Service unhealthy")


@app.get(f"{settings.api_prefix}/version", response_model=VersionResponse)
async def get_version(
    force_refresh: bool = Query(False, description="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞")
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏–∏"""
    try:
        version_info = await docs_service.get_version_info(force_refresh=force_refresh)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∫—ç—à-—Ö–∏—Ç
        cache_hit = await cache.exists("version_info") and not force_refresh
        
        return VersionResponse(
            success=True,
            data=version_info,
            cache_hit=cache_hit
        )
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏", error=str(e))
        return VersionResponse(
            success=False,
            error=str(e)
        )


@app.get(f"{settings.api_prefix}/docs/{{doc_type}}", response_model=DocumentationResponse)
async def get_document(
    doc_type: DocumentType,
    force_refresh: bool = Query(False, description="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞")
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É"""
    try:
        document = await docs_service.get_document(doc_type, force_refresh=force_refresh)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∫—ç—à-—Ö–∏—Ç
        cache_hit = await cache.exists(f"document_{doc_type.value}") and not force_refresh
        
        return DocumentationResponse(
            success=True,
            data=document,
            cache_hit=cache_hit
        )
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞", doc_type=doc_type, error=str(e))
        return DocumentationResponse(
            success=False,
            error=str(e)
        )


@app.get(f"{settings.api_prefix}/docs", response_model=DocumentationResponse)
async def get_document_by_type(
    type: str = Query(..., description="–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞"),
    force_refresh: bool = Query(False, description="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞")
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É —Ç–∏–ø—É"""
    try:
        doc_type = DocumentType(type.lower())
        return await get_document(doc_type, force_refresh)
    except ValueError:
        raise HTTPException(
            status_code=400, 
            detail=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {type}. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: {[t.value for t in DocumentType]}"
        )


@app.get(f"{settings.api_prefix}/cache/stats", response_model=CacheStatsResponse)
async def get_cache_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞"""
    try:
        stats = await cache.get_stats()
        return CacheStatsResponse(
            success=True,
            data=stats
        )
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞", error=str(e))
        return CacheStatsResponse(
            success=False,
            error=str(e)
        )


@app.delete(f"{settings.api_prefix}/cache/clear")
async def clear_cache():
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
    try:
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º docs:
        cleared = await cache.clear_pattern("*")
        logger.info("–ö—ç—à –æ—á–∏—â–µ–Ω", cleared_keys=cleared)
        return {"success": True, "cleared_keys": cleared}
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞", error=str(e))
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {str(e)}")


@app.get(f"{settings.api_prefix}/docs/readme", response_model=DocumentationResponse)
async def get_readme(
    force_refresh: bool = Query(False, description="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞")
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ README –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    return await get_document(DocumentType.README, force_refresh)


@app.get(f"{settings.api_prefix}/docs/roadmap", response_model=DocumentationResponse)
async def get_roadmap(
    force_refresh: bool = Query(False, description="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞")
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    return await get_document(DocumentType.ROADMAP, force_refresh)


@app.get(f"{settings.api_prefix}/docs/cicd", response_model=DocumentationResponse)
async def get_cicd(
    force_refresh: bool = Query(False, description="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞")
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ CI/CD –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    return await get_document(DocumentType.CICD, force_refresh)


@app.get(f"{settings.api_prefix}/docs/faq", response_model=DocumentationResponse)
async def get_faq(
    force_refresh: bool = Query(False, description="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞")
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ FAQ"""
    return await get_document(DocumentType.FAQ, force_refresh)


@app.get(f"{settings.api_prefix}/docs/about", response_model=DocumentationResponse)
async def get_about(
    force_refresh: bool = Query(False, description="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞")
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
    return await get_document(DocumentType.ABOUT, force_refresh)


@app.get(f"{settings.api_prefix}/docs/how-it-works", response_model=DocumentationResponse)
async def get_how_it_works(
    force_refresh: bool = Query(False, description="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞")
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
    return await get_document(DocumentType.HOW_IT_WORKS, force_refresh)


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app.main:app",
        host=settings.host,
        port=settings.port,
        reload=settings.debug
    ) 