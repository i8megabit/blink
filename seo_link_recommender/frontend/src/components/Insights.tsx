import React, { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from './ui/Card'
import { Button } from './ui/Button'
import { Badge } from './ui/Badge'

interface Insight {
  id: string
  type: string
  title: string
  description: string
  severity: 'info' | 'warning' | 'error' | 'success'
  recommendation: string
  impact_score?: number
  confidence_level?: number
  actionability?: number
  evidence?: any
  created_at?: string
  category?: string
}

interface InsightsProps {
  domain?: string
  onApplyInsight?: (insight: Insight) => void
}

const Insights: React.FC<InsightsProps> = ({ domain, onApplyInsight }) => {
  const [insights, setInsights] = useState<Insight[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [selectedCategory, setSelectedCategory] = useState<string>('all')
  const [selectedSeverity, setSelectedSeverity] = useState<string>('all')
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid')
  const [expandedInsight, setExpandedInsight] = useState<string | null>(null)

  // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  const mockInsights: Insight[] = [
    {
      id: '1',
      type: 'semantic_network',
      title: '–ù–∏–∑–∫–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å–µ—Ç–∏',
      description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ç–æ–ª—å–∫–æ 15 —Å–≤—è–∑–µ–π –º–µ–∂–¥—É 45 —Å—Ç–∞—Ç—å—è–º–∏. –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫—É.',
      severity: 'warning',
      recommendation: '–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –º–µ–∂–¥—É —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—å—è–º–∏',
      impact_score: 0.85,
      confidence_level: 0.92,
      actionability: 0.78,
      category: 'semantic',
      evidence: {
        total_connections: 15,
        total_posts: 45,
        connection_density: 0.33,
        avg_connections_per_post: 0.67
      }
    },
    {
      id: '2',
      type: 'content_gaps',
      title: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–µ–ª—ã',
      description: '–ê–Ω–∞–ª–∏–∑ –≤—ã—è–≤–∏–ª 8 —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–∏.',
      severity: 'info',
      recommendation: '–°–æ–∑–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤',
      impact_score: 0.72,
      confidence_level: 0.88,
      actionability: 0.65,
      category: 'content',
      evidence: {
        clusters_with_gaps: 8,
        total_clusters: 12,
        gap_percentage: 67,
        suggested_topics: ['SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', '–ö–æ–Ω—Ç–µ–Ω—Ç –º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞']
      }
    },
    {
      id: '3',
      type: 'performance_optimization',
      title: '–í—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏',
      description: '–ú–æ–¥–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 94% —Ç–æ—á–Ω–æ—Å—Ç—å –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö, –Ω–æ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏.',
      severity: 'success',
      recommendation: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏',
      impact_score: 0.68,
      confidence_level: 0.95,
      actionability: 0.82,
      category: 'performance',
      evidence: {
        accuracy: 0.94,
        avg_response_time: 2.3,
        optimization_potential: 0.15,
        suggested_improvements: ['–£–≤–µ–ª–∏—á–∏—Ç—å batch_size', '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç']
      }
    },
    {
      id: '4',
      type: 'user_experience',
      title: '–û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∫–æ—Ä–æ–≤',
      description: '–ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑–∞–ª, —á—Ç–æ 87% —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∞–Ω–∫–æ—Ä–æ–≤ –∏–º–µ—é—Ç –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å.',
      severity: 'success',
      recommendation: '–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∫–æ—Ä–æ–≤',
      impact_score: 0.91,
      confidence_level: 0.89,
      actionability: 0.95,
      category: 'ux',
      evidence: {
        high_quality_anchors: 87,
        total_anchors: 100,
        avg_anchor_length: 4.2,
        semantic_relevance: 0.89
      }
    },
    {
      id: '5',
      type: 'seo_strategy',
      title: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ LSI –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤',
      description: '–¢–æ–ª—å–∫–æ 23% —Å—Ç–∞—Ç–µ–π —Å–æ–¥–µ—Ä–∂–∞—Ç LSI –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –∞–Ω–∫–æ—Ä–∞—Ö, —á—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç SEO —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.',
      severity: 'warning',
      recommendation: '–í–∫–ª—é—á–∏—Ç—å –±–æ–ª—å—à–µ LSI –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –∞–Ω–∫–æ—Ä—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è SEO',
      impact_score: 0.76,
      confidence_level: 0.84,
      actionability: 0.71,
      category: 'seo',
      evidence: {
        lsi_usage: 23,
        total_articles: 100,
        suggested_lsi_keywords: ['–ø–æ–∏—Å–∫–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', '–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏', '—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —è–¥—Ä–æ']
      }
    },
    {
      id: '6',
      type: 'content_quality',
      title: '–í—ã—Å–æ–∫–∞—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑–Ω–æ—Å—Ç—å',
      description: '–ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑–∞–ª –æ—Ç–ª–∏—á–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é —Å–≤—è–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—å—è–º–∏ (92%).',
      severity: 'success',
      recommendation: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è',
      impact_score: 0.88,
      confidence_level: 0.91,
      actionability: 0.85,
      category: 'semantic',
      evidence: {
        semantic_coherence: 92,
        avg_similarity_score: 0.87,
        coherence_trend: 'increasing'
      }
    }
  ]

  useEffect(() => {
    loadInsights()
  }, [domain])

  const loadInsights = async () => {
    setIsLoading(true)
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã API –∑–∞–ø—Ä–æ—Å
      // const response = await fetch(`/api/v1/ai_insights/semantic_network?domain=${domain}`)
      // const data = await response.json()
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      setInsights(mockInsights)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å–∞–π—Ç–æ–≤:', error)
    } finally {
      setIsLoading(false)
    }
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'error': return 'bg-red-100 text-red-800 border-red-200'
      case 'warning': return 'bg-yellow-100 text-yellow-800 border-yellow-200'
      case 'success': return 'bg-green-100 text-green-800 border-green-200'
      case 'info': return 'bg-blue-100 text-blue-800 border-blue-200'
      default: return 'bg-gray-100 text-gray-800 border-gray-200'
    }
  }

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'semantic': return 'üß†'
      case 'content': return 'üìù'
      case 'performance': return '‚ö°'
      case 'ux': return 'üë•'
      case 'seo': return 'üéØ'
      default: return 'üìä'
    }
  }

  const getCategoryName = (category: string) => {
    switch (category) {
      case 'semantic': return '–°–µ–º–∞–Ω—Ç–∏–∫–∞'
      case 'content': return '–ö–æ–Ω—Ç–µ–Ω—Ç'
      case 'performance': return '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'
      case 'ux': return 'UX'
      case 'seo': return 'SEO'
      default: return '–û–±—â–µ–µ'
    }
  }

  const filteredInsights = insights.filter(insight => {
    const categoryMatch = selectedCategory === 'all' || insight.category === selectedCategory
    const severityMatch = selectedSeverity === 'all' || insight.severity === selectedSeverity
    return categoryMatch && severityMatch
  })

  const categories = ['all', 'semantic', 'content', 'performance', 'ux', 'seo']
  const severities = ['all', 'info', 'warning', 'error', 'success']

  const handleApplyInsight = (insight: Insight) => {
    if (onApplyInsight) {
      onApplyInsight(insight)
    }
  }

  const toggleInsightExpansion = (insightId: string) => {
    setExpandedInsight(expandedInsight === insightId ? null : insightId)
  }

  if (isLoading) {
    return (
      <div className="space-y-4">
        {Array.from({ length: 3 }).map((_, i) => (
          <Card key={i}>
            <CardHeader>
              <div className="h-4 bg-muted rounded animate-pulse" />
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <div className="h-4 bg-muted rounded animate-pulse" />
                <div className="h-4 bg-muted rounded animate-pulse w-3/4" />
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">AI –ò–Ω—Å–∞–π—Ç—ã</h2>
          <p className="text-muted-foreground">
            –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è SEO
          </p>
        </div>
        <div className="flex items-center gap-2">
          <Button variant="outline" onClick={loadInsights}>
            –û–±–Ω–æ–≤–∏—Ç—å
          </Button>
          <Button 
            variant="outline" 
            onClick={() => setViewMode(viewMode === 'grid' ? 'list' : 'grid')}
          >
            {viewMode === 'grid' ? 'üìã –°–ø–∏—Å–æ–∫' : 'üìä –°–µ—Ç–∫–∞'}
          </Button>
        </div>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div className="flex flex-wrap gap-4 p-4 bg-muted/50 rounded-lg">
        <div className="flex items-center gap-2">
          <span className="text-sm font-medium">–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</span>
          <select 
            value={selectedCategory} 
            onChange={(e) => setSelectedCategory(e.target.value)}
            className="px-3 py-1 text-sm border rounded-md bg-background"
          >
            {categories.map(cat => (
              <option key={cat} value={cat}>
                {cat === 'all' ? '–í—Å–µ' : getCategoryName(cat)}
              </option>
            ))}
          </select>
        </div>
        
        <div className="flex items-center gap-2">
          <span className="text-sm font-medium">–í–∞–∂–Ω–æ—Å—Ç—å:</span>
          <select 
            value={selectedSeverity} 
            onChange={(e) => setSelectedSeverity(e.target.value)}
            className="px-3 py-1 text-sm border rounded-md bg-background"
          >
            {severities.map(sev => (
              <option key={sev} value={sev}>
                {sev === 'all' ? '–í—Å–µ' : sev.charAt(0).toUpperCase() + sev.slice(1)}
              </option>
            ))}
          </select>
        </div>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="text-2xl font-bold text-primary">{insights.length}</div>
            <div className="text-sm text-muted-foreground">–í—Å–µ–≥–æ –∏–Ω—Å–∞–π—Ç–æ–≤</div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="text-2xl font-bold text-green-600">
              {insights.filter(i => i.severity === 'success').length}
            </div>
            <div className="text-sm text-muted-foreground">–£—Å–ø–µ—à–Ω—ã—Ö</div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="text-2xl font-bold text-yellow-600">
              {insights.filter(i => i.severity === 'warning').length}
            </div>
            <div className="text-sm text-muted-foreground">–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π</div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="text-2xl font-bold text-blue-600">
              {Math.round(insights.reduce((acc, i) => acc + (i.impact_score || 0), 0) / insights.length * 100)}%
            </div>
            <div className="text-sm text-muted-foreground">–°—Ä–µ–¥–Ω–µ–µ –≤–ª–∏—è–Ω–∏–µ</div>
          </CardContent>
        </Card>
      </div>

      {/* –ò–Ω—Å–∞–π—Ç—ã */}
      <div className={viewMode === 'grid' ? 'grid grid-cols-1 md:grid-cols-2 gap-6' : 'space-y-4'}>
        {filteredInsights.map((insight) => (
          <Card key={insight.id} className="hover:shadow-lg transition-shadow">
            <CardHeader>
              <div className="flex items-start justify-between">
                <div className="flex items-center gap-3">
                  <span className="text-2xl">{getCategoryIcon(insight.category || '')}</span>
                  <div>
                    <CardTitle className="text-lg">{insight.title}</CardTitle>
                    <div className="flex items-center gap-2 mt-1">
                      <Badge className={getSeverityColor(insight.severity)}>
                        {insight.severity.toUpperCase()}
                      </Badge>
                      {insight.category && (
                        <Badge variant="outline">
                          {getCategoryName(insight.category)}
                        </Badge>
                      )}
                    </div>
                  </div>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => toggleInsightExpansion(insight.id)}
                >
                  {expandedInsight === insight.id ? 'üìñ' : 'üìÑ'}
                </Button>
              </div>
            </CardHeader>
            
            <CardContent>
              <p className="text-muted-foreground mb-4">{insight.description}</p>
              
              {/* –ú–µ—Ç—Ä–∏–∫–∏ –∏–Ω—Å–∞–π—Ç–∞ */}
              {insight.impact_score && (
                <div className="grid grid-cols-3 gap-4 mb-4">
                  <div className="text-center">
                    <div className="text-2xl font-bold text-primary">
                      {Math.round(insight.impact_score * 100)}%
                    </div>
                    <div className="text-xs text-muted-foreground">–í–ª–∏—è–Ω–∏–µ</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-blue-600">
                      {Math.round((insight.confidence_level || 0) * 100)}%
                    </div>
                    <div className="text-xs text-muted-foreground">–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-green-600">
                      {Math.round((insight.actionability || 0) * 100)}%
                    </div>
                    <div className="text-xs text-muted-foreground">–ü—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å</div>
                  </div>
                </div>
              )}

              {/* –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ */}
              {expandedInsight === insight.id && insight.evidence && (
                <div className="mt-4 p-3 bg-muted/50 rounded-lg">
                  <h4 className="font-medium mb-2">üìä –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:</h4>
                  <div className="text-sm space-y-1">
                    {Object.entries(insight.evidence).map(([key, value]) => (
                      <div key={key} className="flex justify-between">
                        <span className="text-muted-foreground">
                          {key.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}:
                        </span>
                        <span className="font-medium">
                          {typeof value === 'number' ? value.toFixed(2) : String(value)}
                        </span>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è */}
              <div className="mt-4 p-3 bg-primary/5 border border-primary/20 rounded-lg">
                <h4 className="font-medium text-primary mb-1">üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</h4>
                <p className="text-sm">{insight.recommendation}</p>
              </div>

              {/* –î–µ–π—Å—Ç–≤–∏—è */}
              <div className="flex items-center gap-2 mt-4">
                <Button 
                  size="sm" 
                  onClick={() => handleApplyInsight(insight)}
                  className="flex-1"
                >
                  –ü—Ä–∏–º–µ–Ω–∏—Ç—å
                </Button>
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => toggleInsightExpansion(insight.id)}
                >
                  {expandedInsight === insight.id ? '–°–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏' : '–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏'}
                </Button>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {filteredInsights.length === 0 && (
        <div className="text-center py-12">
          <div className="text-4xl mb-4">üìä</div>
          <h3 className="text-lg font-medium mb-2">–ù–µ—Ç –∏–Ω—Å–∞–π—Ç–æ–≤</h3>
          <p className="text-muted-foreground">
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –¥–æ–º–µ–Ω–∞
          </p>
        </div>
      )}
    </div>
  )
}

export default Insights 