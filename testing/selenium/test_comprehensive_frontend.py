#!/usr/bin/env python3
"""
üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –§–†–û–ù–¢–ï–ù–î–ê reLink
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Selenium + RAG + LLM –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è UI
"""

import pytest
import asyncio
import time
import json
import httpx
from typing import Dict, Any, List
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys
from webdriver_manager.chrome import ChromeDriverManager
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('frontend_test.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
FRONTEND_URL = "http://localhost:3000"
BACKEND_URL = "http://localhost:8000"
RAG_URL = "http://localhost:8001"
LLM_ROUTER_URL = "http://localhost:8002"

# –ü—É—Ç—å –∫ –±—Ä–∞—É–∑–µ—Ä—É
BRAVE_PATH = "/Applications/Brave Browser.app/Contents/MacOS/Brave Browser"

class FrontendTester:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
    
    def __init__(self, driver: webdriver.Chrome):
        self.driver = driver
        self.wait = WebDriverWait(driver, 10)
        self.actions = ActionChains(driver)
        self.test_results = []
        
    async def test_page_load_performance(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        
        start_time = time.time()
        self.driver.get(FRONTEND_URL)
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        self.wait.until(EC.presence_of_element_located((By.TAG_NAME, "body")))
        
        load_time = time.time() - start_time
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_metrics = self.driver.execute_script("""
            return {
                navigationStart: performance.timing.navigationStart,
                loadEventEnd: performance.timing.loadEventEnd,
                domContentLoadedEventEnd: performance.timing.domContentLoadedEventEnd,
                firstPaint: performance.getEntriesByType('paint')[0]?.startTime,
                firstContentfulPaint: performance.getEntriesByType('paint')[1]?.startTime
            }
        """)
        
        result = {
            "test": "page_load_performance",
            "load_time": load_time,
            "performance_metrics": performance_metrics,
            "success": load_time < 5.0  # –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥
        }
        
        self.test_results.append(result)
        logger.info(f"‚úÖ –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {load_time:.2f}s")
        return result
    
    async def test_ui_elements_accessibility(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        logger.info("‚ôø –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        accessibility_issues = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ ARIA –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        elements_without_aria = self.driver.find_elements(
            By.CSS_SELECTOR, 
            "button, input, select, textarea, a[href]"
        )
        
        for element in elements_without_aria:
            aria_label = element.get_attribute("aria-label")
            aria_labelledby = element.get_attribute("aria-labelledby")
            role = element.get_attribute("role")
            
            if not any([aria_label, aria_labelledby, role]):
                accessibility_issues.append({
                    "element": element.tag_name,
                    "issue": "Missing ARIA attributes",
                    "html": element.get_attribute("outerHTML")[:100]
                })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ —Ü–≤–µ—Ç–æ–≤ (–±–∞–∑–æ–≤–∞—è)
        text_elements = self.driver.find_elements(By.CSS_SELECTOR, "p, h1, h2, h3, h4, h5, h6, span, div")
        for element in text_elements[:10]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            color = element.value_of_css_property("color")
            background_color = element.value_of_css_property("background-color")
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏
            if color == background_color:
                accessibility_issues.append({
                    "element": element.tag_name,
                    "issue": "Low color contrast",
                    "color": color,
                    "background": background_color
                })
        
        result = {
            "test": "ui_elements_accessibility",
            "accessibility_issues": accessibility_issues,
            "success": len(accessibility_issues) == 0
        }
        
        self.test_results.append(result)
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {len(accessibility_issues)}")
        return result
    
    async def test_user_interactions(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π"""
        logger.info("üëÜ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")
        
        interaction_results = []
        
        # –¢–µ—Å—Ç –∫–ª–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º
        buttons = self.driver.find_elements(By.TAG_NAME, "button")
        for button in buttons[:5]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫–Ω–æ–ø–æ–∫
            try:
                # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∫–Ω–æ–ø–∫–µ
                self.driver.execute_script("arguments[0].scrollIntoView();", button)
                time.sleep(0.5)
                
                # –ö–ª–∏–∫
                button.click()
                time.sleep(1)
                
                interaction_results.append({
                    "element": "button",
                    "action": "click",
                    "success": True
                })
                
            except Exception as e:
                interaction_results.append({
                    "element": "button",
                    "action": "click",
                    "success": False,
                    "error": str(e)
                })
        
        # –¢–µ—Å—Ç –≤–≤–æ–¥–∞ –≤ –ø–æ–ª—è
        inputs = self.driver.find_elements(By.TAG_NAME, "input")
        for input_field in inputs[:3]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø–æ–ª—è
            try:
                input_field.clear()
                input_field.send_keys("test input")
                time.sleep(0.5)
                
                interaction_results.append({
                    "element": "input",
                    "action": "type",
                    "success": True
                })
                
            except Exception as e:
                interaction_results.append({
                    "element": "input",
                    "action": "type",
                    "success": False,
                    "error": str(e)
                })
        
        # –¢–µ—Å—Ç –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        try:
            self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(1)
            self.driver.execute_script("window.scrollTo(0, 0);")
            time.sleep(1)
            
            interaction_results.append({
                "element": "page",
                "action": "scroll",
                "success": True
            })
            
        except Exception as e:
            interaction_results.append({
                "element": "page",
                "action": "scroll",
                "success": False,
                "error": str(e)
            })
        
        result = {
            "test": "user_interactions",
            "interactions": interaction_results,
            "success": all(r["success"] for r in interaction_results)
        }
        
        self.test_results.append(result)
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {sum(1 for r in interaction_results if r['success'])}/{len(interaction_results)}")
        return result
    
    async def test_responsive_design(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞"""
        logger.info("üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞")
        
        screen_sizes = [
            (1920, 1080, "desktop"),
            (1366, 768, "laptop"),
            (768, 1024, "tablet"),
            (375, 667, "mobile")
        ]
        
        responsive_results = []
        
        for width, height, device in screen_sizes:
            try:
                self.driver.set_window_size(width, height)
                time.sleep(1)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                overflow_elements = self.driver.find_elements(
                    By.CSS_SELECTOR, 
                    "*[style*='overflow: hidden'], *[style*='overflow: auto']"
                )
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                body = self.driver.find_element(By.TAG_NAME, "body")
                is_visible = body.is_displayed()
                
                responsive_results.append({
                    "device": device,
                    "size": f"{width}x{height}",
                    "overflow_elements": len(overflow_elements),
                    "body_visible": is_visible,
                    "success": is_visible
                })
                
            except Exception as e:
                responsive_results.append({
                    "device": device,
                    "size": f"{width}x{height}",
                    "error": str(e),
                    "success": False
                })
        
        result = {
            "test": "responsive_design",
            "devices": responsive_results,
            "success": all(r["success"] for r in responsive_results)
        }
        
        self.test_results.append(result)
        logger.info(f"‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(responsive_results)}")
        return result
    
    async def test_api_integration(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API"""
        logger.info("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API")
        
        api_results = []
        
        # –¢–µ—Å—Ç health check
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{BACKEND_URL}/health")
                api_results.append({
                    "endpoint": "health",
                    "status_code": response.status_code,
                    "success": response.status_code == 200
                })
        except Exception as e:
            api_results.append({
                "endpoint": "health",
                "error": str(e),
                "success": False
            })
        
        # –¢–µ—Å—Ç RAG —Å–µ—Ä–≤–∏—Å–∞
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{RAG_URL}/health")
                api_results.append({
                    "endpoint": "rag_health",
                    "status_code": response.status_code,
                    "success": response.status_code == 200
                })
        except Exception as e:
            api_results.append({
                "endpoint": "rag_health",
                "error": str(e),
                "success": False
            })
        
        # –¢–µ—Å—Ç LLM —Ä–æ—É—Ç–µ—Ä–∞
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{LLM_ROUTER_URL}/health")
                api_results.append({
                    "endpoint": "llm_router_health",
                    "status_code": response.status_code,
                    "success": response.status_code == 200
                })
        except Exception as e:
            api_results.append({
                "endpoint": "llm_router_health",
                "error": str(e),
                "success": False
            })
        
        result = {
            "test": "api_integration",
            "endpoints": api_results,
            "success": all(r["success"] for r in api_results)
        }
        
        self.test_results.append(result)
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤: {sum(1 for r in api_results if r['success'])}/{len(api_results)}")
        return result
    
    async def test_llm_rag_integration(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å LLM –∏ RAG"""
        logger.info("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å LLM –∏ RAG")
        
        llm_rag_results = []
        
        # –¢–µ—Å—Ç RAG –ø–æ–∏—Å–∫–∞
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{RAG_URL}/api/v1/search",
                    json={
                        "query": "SEO analysis",
                        "collection": "default",
                        "top_k": 3
                    }
                )
                
                if response.status_code == 200:
                    results = response.json()
                    llm_rag_results.append({
                        "service": "rag_search",
                        "success": True,
                        "results_count": len(results.get("results", []))
                    })
                else:
                    llm_rag_results.append({
                        "service": "rag_search",
                        "success": False,
                        "status_code": response.status_code
                    })
                    
        except Exception as e:
            llm_rag_results.append({
                "service": "rag_search",
                "success": False,
                "error": str(e)
            })
        
        # –¢–µ—Å—Ç LLM —Ä–æ—É—Ç–µ—Ä–∞
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{LLM_ROUTER_URL}/api/v1/route",
                    json={
                        "prompt": "What is SEO?",
                        "model": "auto",
                        "context": {}
                    }
                )
                
                if response.status_code == 200:
                    result = response.json()
                    llm_rag_results.append({
                        "service": "llm_router",
                        "success": True,
                        "has_response": "response" in result
                    })
                else:
                    llm_rag_results.append({
                        "service": "llm_router",
                        "success": False,
                        "status_code": response.status_code
                    })
                    
        except Exception as e:
            llm_rag_results.append({
                "service": "llm_router",
                "success": False,
                "error": str(e)
            })
        
        result = {
            "test": "llm_rag_integration",
            "services": llm_rag_results,
            "success": all(r["success"] for r in llm_rag_results)
        }
        
        self.test_results.append(result)
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤: {sum(1 for r in llm_rag_results if r['success'])}/{len(llm_rag_results)}")
        return result
    
    async def run_comprehensive_test(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞")
        
        start_time = time.time()
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        await self.test_page_load_performance()
        await self.test_ui_elements_accessibility()
        await self.test_user_interactions()
        await self.test_responsive_design()
        await self.test_api_integration()
        await self.test_llm_rag_integration()
        
        total_time = time.time() - start_time
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_tests = len(self.test_results)
        successful_tests = sum(1 for r in self.test_results if r["success"])
        
        comprehensive_result = {
            "test_suite": "comprehensive_frontend_test",
            "total_tests": total_tests,
            "successful_tests": successful_tests,
            "failed_tests": total_tests - successful_tests,
            "success_rate": (successful_tests / total_tests) * 100 if total_tests > 0 else 0,
            "total_time": total_time,
            "results": self.test_results,
            "overall_success": successful_tests == total_tests
        }
        
        logger.info(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        logger.info(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        logger.info(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
        logger.info(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {total_tests - successful_tests}")
        logger.info(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {comprehensive_result['success_rate']:.1f}%")
        logger.info(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}s")
        
        return comprehensive_result

@pytest.fixture(scope="module")
def driver():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ –±—Ä–∞—É–∑–µ—Ä–∞"""
    options = Options()
    options.add_argument('--headless')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--disable-gpu')
    options.add_argument('--window-size=1920,1080')
    options.binary_location = BRAVE_PATH
    
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=options)
    
    yield driver
    driver.quit()

@pytest.mark.asyncio
async def test_comprehensive_frontend(driver):
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
    tester = FrontendTester(driver)
    result = await tester.run_comprehensive_test()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª
    with open('frontend_test_results.json', 'w') as f:
        json.dump(result, f, indent=2, default=str)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ —É—Å–ø–µ—Ö–∞
    assert result["overall_success"], f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ. –£—Å–ø–µ—Ö: {result['success_rate']:.1f}%"

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
    pytest.main([__file__, "-v"]) 