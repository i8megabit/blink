"""FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫."""

from __future__ import annotations

import asyncio
import os
import re
import json
from pathlib import Path
from typing import Dict, List, Optional
from collections import defaultdict

import httpx
import nltk
import numpy as np
import chromadb
import ollama
from bs4 import BeautifulSoup
from fastapi import FastAPI, HTTPException, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from sqlalchemy import Integer, Text, JSON, select, DateTime, ARRAY, Float
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, sessionmaker
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ NLTK –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
try:
    nltk.data.find('tokenizers/punkt')
except LookupError:
    nltk.download('punkt')

try:
    nltk.data.find('corpora/stopwords')
except LookupError:
    nltk.download('stopwords')

from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize

# –†—É—Å—Å–∫–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
RUSSIAN_STOP_WORDS = set(stopwords.words('russian'))


class WebSocketManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    
    def __init__(self):
        self.active_connections: Dict[str, WebSocket] = {}
    
    async def connect(self, websocket: WebSocket, client_id: str):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
        await websocket.accept()
        self.active_connections[client_id] = websocket
        print(f"üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω: {client_id}")
    
    def disconnect(self, client_id: str):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞."""
        if client_id in self.active_connections:
            del self.active_connections[client_id]
            print(f"üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω: {client_id}")
    
    async def send_progress(self, client_id: str, message: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É."""
        if client_id in self.active_connections:
            try:
                await self.active_connections[client_id].send_json(message)
                print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {client_id}: {message}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ {client_id}: {e}")
    
    async def send_error(self, client_id: str, error: str, details: str = ""):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –∫–ª–∏–µ–Ω—Ç—É."""
        await self.send_progress(client_id, {
            "type": "error",
            "message": error,
            "details": details,
            "timestamp": datetime.now().isoformat()
        })
    
    async def send_step(self, client_id: str, step: str, current: int, total: int, details: str = ""):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ."""
        await self.send_progress(client_id, {
            "type": "progress",
            "step": step,
            "current": current,
            "total": total,
            "percentage": round((current / total) * 100) if total > 0 else 0,
            "details": details,
            "timestamp": datetime.now().isoformat()
        })
    
    async def send_ollama_info(self, client_id: str, info: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–±–æ—Ç–µ Ollama."""
        await self.send_progress(client_id, {
            "type": "ollama",
            "info": info,
            "timestamp": datetime.now().isoformat()
        })


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä WebSocket
websocket_manager = WebSocketManager()

app = FastAPI()

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


class Base(DeclarativeBase):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –º–æ–¥–µ–ª–µ–π."""


class Recommendation(Base):
    """–ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""

    __tablename__ = "recommendations"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    text: Mapped[str] = mapped_column(Text)
    links: Mapped[list[str]] = mapped_column(JSON)


class WordPressPost(Base):
    """–ú–æ–¥–µ–ª—å —Å—Ç–∞—Ç–µ–π WordPress —Å–∞–π—Ç–∞."""

    __tablename__ = "wordpress_posts"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    domain: Mapped[str] = mapped_column(Text)
    wp_post_id: Mapped[int] = mapped_column(Integer)
    title: Mapped[str] = mapped_column(Text)
    content: Mapped[str] = mapped_column(Text)
    excerpt: Mapped[str] = mapped_column(Text, nullable=True)
    link: Mapped[str] = mapped_column(Text)
    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow)


class AnalysisHistory(Base):
    """–ú–æ–¥–µ–ª—å –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤ WordPress —Å–∞–π—Ç–æ–≤."""

    __tablename__ = "analysis_history"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    domain: Mapped[str] = mapped_column(Text)
    posts_count: Mapped[int] = mapped_column(Integer)
    recommendations_count: Mapped[int] = mapped_column(Integer) 
    recommendations: Mapped[list[dict]] = mapped_column(JSON)
    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow)
    summary: Mapped[str] = mapped_column(Text, nullable=True)


class ArticleEmbedding(Base):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —Å—Ç–∞—Ç–µ–π."""

    __tablename__ = "article_embeddings"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    domain: Mapped[str] = mapped_column(Text)
    wp_post_id: Mapped[int] = mapped_column(Integer)
    title: Mapped[str] = mapped_column(Text)
    content_snippet: Mapped[str] = mapped_column(Text)
    link: Mapped[str] = mapped_column(Text)
    embedding_vector: Mapped[str] = mapped_column(Text)  # JSON —Å—Ç—Ä–æ–∫–∞ —Å –≤–µ–∫—Ç–æ—Ä–æ–º
    themes: Mapped[list[str]] = mapped_column(JSON)
    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow)


class RecommendRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫."""

    text: str


class WPRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ WordPress-—Å–∞–π—Ç–∞."""

    domain: str
    client_id: Optional[str] = None


OLLAMA_URL = os.getenv("OLLAMA_URL", "http://localhost:11434/api/generate")
# –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è SEO –∑–∞–¥–∞—á: qwen2.5:7b - –æ—Ç–ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–∞—á–µ—Å—Ç–≤–∞/—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏/—Ä–µ—Å—É—Ä—Å–æ–≤
OLLAMA_MODEL = os.getenv("OLLAMA_MODEL", "qwen2.5:7b")

DATABASE_URL = os.getenv(
    "DATABASE_URL",
    "postgresql+asyncpg://seo_user:seo_pass@localhost/seo_db",
)

engine = create_async_engine(DATABASE_URL)
AsyncSessionLocal = sessionmaker(engine, expire_on_commit=False, class_=AsyncSession)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG-—Å–∏—Å—Ç–µ–º—ã
chroma_client = None
tfidf_vectorizer = None

def initialize_rag_system():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç TF-IDF –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä –∏ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î."""
    global chroma_client, tfidf_vectorizer
    try:
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π RAG-—Å–∏—Å—Ç–µ–º—ã...")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º TF-IDF –≤–º–µ—Å—Ç–æ sentence-transformers
        tfidf_vectorizer = TfidfVectorizer(
            max_features=1000,
            ngram_range=(1, 2),
            min_df=1,
            max_df=0.8,
            stop_words='english'
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ChromaDB –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        chroma_client = chromadb.PersistentClient(path="./chroma_db")
        print("‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è RAG-—Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG: {e}")
        chroma_client = None
        tfidf_vectorizer = None


class SmartRAGManager:
    """–£–º–Ω—ã–π RAG-–º–µ–Ω–µ–¥–∂–µ—Ä —Å TF-IDF –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π."""
    
    def __init__(self):
        self.domain_collections = {}
        self.domain_articles = {}  # –ö–µ—à —Å—Ç–∞—Ç–µ–π –¥–ª—è TF-IDF
    
    async def create_domain_knowledge_base(self, domain: str, posts: List[Dict]) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞ —Å TF-IDF."""
        if not chroma_client:
            print("‚ùå RAG-—Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return False
            
        try:
            print(f"üîÆ –°–æ–∑–¥–∞–Ω–∏–µ TF-IDF –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –¥–ª—è –¥–æ–º–µ–Ω–∞ {domain}...")
            
            # –û—á–∏—â–∞–µ–º –∏–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è ChromaDB
            collection_name = domain.replace(".", "_").replace("-", "_")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            try:
                old_collection = chroma_client.get_collection(name=collection_name)
                chroma_client.delete_collection(name=collection_name)
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è {collection_name}")
            except:
                pass
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
            collection = chroma_client.create_collection(
                name=collection_name,
                metadata={"domain": domain, "created_at": datetime.now().isoformat()}
            )
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è TF-IDF
            documents = []
            metadatas = []
            ids = []
            
            for i, post in enumerate(posts):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—å—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω–∞—à–µ–º—É –¥–æ–º–µ–Ω—É
                if domain.lower() not in post.get('link', '').lower():
                    continue
                
                title = post.get('title', '')[:200]
                content = post.get('content', '')[:800]
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                full_text = f"{title} {content}"
                
                documents.append(full_text)
                metadatas.append({
                    "title": title,
                    "link": post.get('link', ''),
                    "content_snippet": content[:200],
                    "domain": domain,
                    "post_index": i
                })
                ids.append(f"{collection_name}_{i}")
            
            if not documents:
                print(f"‚ùå –ù–µ—Ç —Å—Ç–∞—Ç–µ–π –¥–ª—è –¥–æ–º–µ–Ω–∞ {domain}")
                return False
            
            # –í—ã—á–∏—Å–ª—è–µ–º TF-IDF –≤–µ–∫—Ç–æ—Ä—ã –¥–ª—è –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            vectorizer = TfidfVectorizer(
                max_features=500,
                ngram_range=(1, 2),
                min_df=1,
                stop_words='english'
            )
            
            tfidf_matrix = vectorizer.fit_transform(documents)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É –≤ –ø–ª–æ—Ç–Ω—É—é –¥–ª—è ChromaDB
            dense_embeddings = tfidf_matrix.toarray().tolist()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
            collection.add(
                documents=documents,
                metadatas=metadatas,
                ids=ids,
                embeddings=dense_embeddings
            )
            
            self.domain_collections[domain] = collection_name
            self.domain_articles[domain] = posts  # –ö–µ—à–∏—Ä—É–µ–º –¥–ª—è –ø–æ–∏—Å–∫–∞
            
            print(f"‚úÖ TF-IDF –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∞: {len(documents)} —Å—Ç–∞—Ç–µ–π –¥–ª—è {domain}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
            return False
    
    def get_domain_articles_overview(self, domain: str, limit: int = 20) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±–∑–æ—Ä —Å—Ç–∞—Ç–µ–π –¥–æ–º–µ–Ω–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º."""
        if domain not in self.domain_collections:
            return []
        
        try:
            collection = chroma_client.get_collection(name=self.domain_collections[domain])
            results = collection.get(
                limit=limit,
                include=['metadatas']
            )
            
            articles = []
            for metadata in results['metadatas']:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞
                if domain.lower() in metadata['link'].lower():
                    articles.append({
                        'title': metadata['title'],
                        'link': metadata['link'],
                        'content': metadata['content_snippet'],
                        'domain': metadata['domain']
                    })
            
            print(f"üìã –ü–æ–ª—É—á–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ–±–∑–æ—Ä–∞")
            return articles
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–∑–æ—Ä–∞: {e}")
            return []


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π RAG-–º–µ–Ω–µ–¥–∂–µ—Ä
rag_manager = SmartRAGManager()


async def generate_links(text: str) -> list[str]:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç Ollama –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã—Ö —Å—Å—ã–ª–æ–∫."""
    prompt = (
        "–ü—Ä–µ–¥–ª–æ–∂–∏ –¥–æ –ø—è—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
        "–ö–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É –≤—ã–≤–µ–¥–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ /article/–Ω–∞–∑–≤–∞–Ω–∏–µ-—Å—Ç–∞—Ç—å–∏, "
        "–æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö –∏–∑ —Ç–µ–∫—Å—Ç–∞. "
        "–ù–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è. "
        f"–¢–µ–∫—Å—Ç: {text}"
    )
    async with httpx.AsyncClient(timeout=60.0) as client:
        response = await client.post(
            OLLAMA_URL,
            json={"model": OLLAMA_MODEL, "prompt": prompt, "stream": False},
            timeout=60,
        )
    response.raise_for_status()
    data = response.json()
    lines = [line.strip("- \n") for line in data.get("response", "").splitlines()]
    links = [line for line in lines if line]
    return links[:5]


async def fetch_and_store_wp_posts(domain: str) -> list[dict[str, str]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç—å–∏ WordPress –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π."""
    print(f"üåê –ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å—Ç—ã —Å —Å–∞–π—Ç–∞ {domain}")
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ—Å—Ç—ã —ç—Ç–æ–≥–æ –¥–æ–º–µ–Ω–∞
    async with AsyncSessionLocal() as session:
        await session.execute(
            select(WordPressPost).where(WordPressPost.domain == domain)
        )
        await session.commit()
    
    url = f"https://{domain}/wp-json/wp/v2/posts?per_page=50"  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 50 –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    async with httpx.AsyncClient(timeout=120.0) as client:
        response = await client.get(url)
    if response.status_code >= 400:
        raise HTTPException(status_code=400, detail="–°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ WordPress")
    data = response.json()
    if not isinstance(data, list):
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç WordPress")
    
    posts = []
    seen_urls = set()  # –î–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –ø–æ URL
    seen_titles = set()  # –î–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
    
    async with AsyncSessionLocal() as session:
        for item in data:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                content = item.get("content", {}).get("rendered", "")
                excerpt = item.get("excerpt", {}).get("rendered", "")
                
                # –û—á–∏—â–∞–µ–º HTML
                clean_content = BeautifulSoup(content, 'html.parser').get_text()
                clean_excerpt = BeautifulSoup(excerpt, 'html.parser').get_text() if excerpt else ""
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω–∞—à–µ–º—É –¥–æ–º–µ–Ω—É
                post_link = item["link"]
                if domain.lower() not in post_link.lower():
                    print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —Å—Ç–∞—Ç—å—é —Å —á—É–∂–æ–≥–æ –¥–æ–º–µ–Ω–∞: {post_link}")
                    continue
                
                # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ URL
                if post_link in seen_urls:
                    print(f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç URL –ø—Ä–æ–ø—É—â–µ–Ω: {post_link}")
                    continue
                seen_urls.add(post_link)
                
                # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
                title = item["title"]["rendered"]
                title_normalized = title.lower().strip()
                if title_normalized in seen_titles:
                    print(f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω: {title}")
                    continue
                seen_titles.add(title_normalized)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                wp_post = WordPressPost(
                    domain=domain,
                    wp_post_id=item["id"],
                    title=title,
                    content=clean_content,
                    excerpt=clean_excerpt,
                    link=post_link
                )
                session.add(wp_post)
                
                # –î–ª—è RAG –±–µ—Ä–µ–º –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                posts.append({
                    "title": title, 
                    "link": post_link,
                    "content": clean_content[:800].strip()  # –ü–µ—Ä–≤—ã–µ 800 —Å–∏–º–≤–æ–ª–æ–≤
                })
                
                print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç: {title}")
                
            except Exception as exc:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞ {item.get('id', 'unknown')}: {exc}")
                continue
        
        await session.commit()
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(posts)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ –¥–æ–º–µ–Ω–∞ {domain}")
    
    return posts


async def generate_rag_recommendations(domain: str, client_id: Optional[str] = None) -> list[dict[str, str]]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—è RAG-–ø–æ–¥—Ö–æ–¥ —Å –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î."""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ RAG-–∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –¥–æ–º–µ–Ω–∞ {domain} (client: {client_id})")
    
    try:
        # –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–µ–π –∏–∑ –ë–î
        if client_id:
            await websocket_manager.send_step(client_id, "–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–µ–π", 1, 7, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(WordPressPost).where(WordPressPost.domain == domain)
            )
            db_posts = result.scalars().all()
        
        if not db_posts:
            error_msg = "‚ùå –ù–µ—Ç —Å—Ç–∞—Ç–µ–π –¥–ª—è RAG-–∞–Ω–∞–ª–∏–∑–∞"
            print(error_msg)
            if client_id:
                await websocket_manager.send_error(client_id, error_msg, f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π –¥–ª—è –¥–æ–º–µ–Ω–∞ {domain}")
            return []
        
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(db_posts)} —Å—Ç–∞—Ç–µ–π –∏–∑ –ë–î")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è RAG
        posts_data = []
        for post in db_posts:
            posts_data.append({
                "title": post.title,
                "link": post.link,
                "content": post.content[:1000]  # –ü–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤
            })
        
        # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã
        if client_id:
            await websocket_manager.send_step(client_id, "–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã", 2, 7, "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–µ–π –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
        
        success = await rag_manager.create_domain_knowledge_base(domain, posts_data)
        if not success:
            error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"
            print(error_msg)
            if client_id:
                await websocket_manager.send_error(client_id, error_msg, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è TF-IDF –≤–µ–∫—Ç–æ—Ä–æ–≤")
            return []
        
        # –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–∑–æ—Ä–∞ —Å—Ç–∞—Ç–µ–π
        if client_id:
            await websocket_manager.send_step(client_id, "–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", 3, 7, "–í—ã–±–æ—Ä –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π...")
        
        articles = rag_manager.get_domain_articles_overview(domain, limit=8)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
        if not articles:
            error_msg = "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–∞—Ç—å–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"
            print(error_msg)
            if client_id:
                await websocket_manager.send_error(client_id, error_msg, "–ü—É—Å—Ç–∞—è –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")
            return []
        
        print(f"üìã –í—ã–±—Ä–∞–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        # –®–∞–≥ 4: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        if client_id:
            await websocket_manager.send_step(client_id, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ò–ò", 4, 7, "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è Ollama...")
        
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        articles_context = ""
        for i, article in enumerate(articles, 1):
            title = article['title'][:80]
            content_snippet = article['content'][:150] if article.get('content') else ""
            articles_context += f"–°—Ç–∞—Ç—å—è {i}: {title}\nURL: {article['link']}\n–ö—Ä–∞—Ç–∫–æ: {content_snippet}...\n\n"
        
        # –ü—Ä–æ–º–ø—Ç, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è qwen2.5 - —á–µ—Ç–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        qwen_optimized_prompt = f"""# SEO –ê–ù–ê–õ–ò–ó –°–ê–ô–¢–ê {domain}

## –ö–û–ù–¢–ï–ö–°–¢ ({len(articles)} —Å—Ç–∞—Ç–µ–π):
{articles_context}

## –¶–ï–õ–¨:
–°–æ–∑–¥–∞—Ç—å 5-7 –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö SEO-—Å—Å—ã–ª–æ–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–∏ —Å–∞–π—Ç–∞.

## –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
```
–ò–°–¢–û–ß–ù–ò–ö -> –¶–ï–õ–¨ | –∞–Ω–∫–æ—Ä-—Ç–µ–∫—Å—Ç | –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–∏
```

## –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –ê–Ω–∫–æ—Ä: –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç 3-8 —Å–ª–æ–≤, —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
2. –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑—å –º–µ–∂–¥—É —Å—Ç–∞—Ç—å—è–º–∏ (8-15 —Å–ª–æ–≤)
3. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û URL –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ
4. –°–æ–∑–¥–∞–≤–∞–π —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
5. –ò–∑–±–µ–≥–∞–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –æ–¥–Ω–∏—Ö –∏ —Ç–µ—Ö –∂–µ URL

## –ü–†–ò–ú–ï–†:
```
{articles[0]['link']} -> {articles[1]['link'] if len(articles) > 1 else articles[0]['link']} | —á–∏—Ç–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ | —Å—Ç–∞—Ç—å–∏ –¥–æ–ø–æ–ª–Ω—è—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –ø–æ —Ç–µ–º–µ
```

## –¢–í–û–ô –û–¢–í–ï–¢:
```"""

        # –®–∞–≥ 5: –ó–∞–ø—Ä–æ—Å –∫ Ollama
        if client_id:
            await websocket_manager.send_step(client_id, "–ó–∞–ø—Ä–æ—Å –∫ Ollama", 5, 7, "–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ –ò–ò...")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞
            await websocket_manager.send_ollama_info(client_id, {
                "status": "starting",
                "model": OLLAMA_MODEL,
                "model_info": "qwen2.5:7b - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è SEO",
                "articles_count": len(articles),
                "prompt_length": len(qwen_optimized_prompt),
                "timeout": 45,
                "settings": "temperature=0.2, ctx=4096, predict=350"
            })
        
        print("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è qwen2.5...")
        print(f"üìù –†–∞–∑–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞: {len(qwen_optimized_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è qwen2.5:7b - –±–∞–ª–∞–Ω—Å –∫–∞—á–µ—Å—Ç–≤–∞/—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏/—Å–∫–æ—Ä–æ—Å—Ç–∏
        start_time = datetime.now()
        async with httpx.AsyncClient(timeout=45.0) as client:  # –°–æ–∫—Ä–∞—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è qwen - –±—ã—Å—Ç—Ä–µ–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            response = await client.post(
                OLLAMA_URL,
                json={
                    "model": OLLAMA_MODEL,
                    "prompt": qwen_optimized_prompt,
                    "stream": False,
                    "options": {
                        "temperature": 0.2,    # –ù–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è qwen
                        "num_ctx": 4096,       # qwen2.5 —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –±–æ–ª—å—à–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                        "num_predict": 350,    # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è SEO
                        "top_p": 0.8,         # qwen –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º top_p
                        "top_k": 50,          # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                        "repeat_penalty": 1.15, # qwen —Å–∫–ª–æ–Ω–Ω–∞ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º
                        "seed": 42,           # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–µ—Ä–Ω–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
                        "stop": ["\n\n–†–ï–ó–£–õ–¨–¢–ê–¢:", "–ö–û–ù–ï–¶", "---", "```"]
                    }
                },
                timeout=45
            )
        
        request_time = (datetime.now() - start_time).total_seconds()
        
        if client_id:
            await websocket_manager.send_ollama_info(client_id, {
                "status": "completed",
                "response_code": response.status_code,
                "request_time": f"{request_time:.1f}s",
                "response_length": len(response.text) if response.status_code == 200 else 0
            })
        
        if response.status_code != 200:
            error_msg = f"‚ùå Ollama –≤–µ—Ä–Ω—É–ª–∞ –∫–æ–¥ {response.status_code}"
            print(error_msg)
            if client_id:
                await websocket_manager.send_error(client_id, error_msg, f"HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            return []
        
        data = response.json()
        content = data.get("response", "")
        print(f"üìù –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Ollama: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ {request_time:.1f}—Å")
        
        # –®–∞–≥ 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if client_id:
            await websocket_manager.send_step(client_id, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞", 6, 7, "–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç –ò–ò...")
        
        recommendations = parse_ollama_recommendations(content, domain, articles)
        
        # –®–∞–≥ 7: –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
        if client_id:
            await websocket_manager.send_step(client_id, "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ", 7, 7, f"–ì–æ—Ç–æ–≤–æ! –ü–æ–ª—É—á–µ–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        
        print(f"‚úÖ RAG-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∑–∞ {request_time:.1f}—Å")
        return recommendations[:15]  # –¢–æ–ø-15 –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ RAG-–∞–Ω–∞–ª–∏–∑–∞: {e}"
        print(error_msg)
        if client_id:
            await websocket_manager.send_error(client_id, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞", str(e))
        return []


def parse_ollama_recommendations(text: str, domain: str, articles: List[Dict]) -> List[Dict]:
    """–ü–∞—Ä—Å–∏—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ Ollama —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ–º–µ–Ω–∞."""
    recommendations = []
    
    # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤–∞–ª–∏–¥–Ω—ã—Ö URL –¥–ª—è –¥–æ–º–µ–Ω–∞
    valid_urls = set()
    for article in articles:
        url = article['link']
        if domain.lower() in url.lower():
            valid_urls.add(url)
    
    print(f"üîç –í–∞–ª–∏–¥–Ω—ã–µ URL –¥–ª—è –¥–æ–º–µ–Ω–∞ {domain}: {len(valid_urls)}")
    
    lines = text.splitlines()
    for line in lines:
        line = line.strip()
        
        if '->' in line and '|' in line:
            try:
                parts = line.split('|', 2)
                if len(parts) < 3:
                    continue
                
                link_part = parts[0].strip()
                anchor = parts[1].strip()
                comment = parts[2].strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
                if len(anchor) < 5 or len(comment) < 40:
                    continue
                
                if '->' in link_part:
                    source, target = link_part.split('->', 1)
                    source = source.strip()
                    target = target.strip()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –Ω–∞—à–µ–º—É –¥–æ–º–µ–Ω—É
                    if (source in valid_urls and 
                        target in valid_urls and 
                        source != target and
                        domain.lower() in source.lower() and
                        domain.lower() in target.lower()):
                        
                        recommendations.append({
                            "from": source,
                            "to": target,
                            "anchor": anchor,
                            "comment": comment
                        })
                        print(f"‚úÖ –í–∞–ª–∏–¥–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {source[:50]}... -> {target[:50]}...")
                    else:
                        print(f"‚ö†Ô∏è –û—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ URL –∏–ª–∏ –¥–æ–º–µ–Ω")
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏: {e}")
                continue
    
    return recommendations


@app.on_event("startup")
async def on_startup() -> None:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç RAG-—Å–∏—Å—Ç–µ–º—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."""
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG-—Å–∏—Å—Ç–µ–º—É
    initialize_rag_system()


@app.post("/api/v1/test")
async def test(req: RecommendRequest) -> dict[str, str]:
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint."""
    return {"message": f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: {req.text[:50]}..."}


@app.post("/api/v1/recommend")
async def recommend(req: RecommendRequest) -> dict[str, list[str]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫."""
    links = await generate_links(req.text)

    async with AsyncSessionLocal() as session:
        rec = Recommendation(text=req.text, links=links)
        session.add(rec)
        await session.commit()
    return {"links": links}


@app.websocket("/ws/{client_id}")
async def websocket_endpoint(websocket: WebSocket, client_id: str):
    """WebSocket —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    await websocket_manager.connect(websocket, client_id)
    try:
        while True:
            # –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
            data = await websocket.receive_text()
            if data == "ping":
                await websocket.send_text("pong")
    except WebSocketDisconnect:
        websocket_manager.disconnect(client_id)


@app.post("/api/v1/wp_recommend")
async def wp_recommend(req: WPRequest) -> dict[str, list[dict[str, str]]]:
    """RAG-–∞–Ω–∞–ª–∏–∑ WordPress —Å–∞–π—Ç–∞ —Å –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    try:
        if req.client_id:
            await websocket_manager.send_step(req.client_id, "–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞", 0, 3, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ WordPress...")
        
        # –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç—ã
        if req.client_id:
            await websocket_manager.send_step(req.client_id, "–ó–∞–≥—Ä—É–∑–∫–∞ WordPress", 1, 3, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π —Å —Å–∞–π—Ç–∞...")
        
        posts = await fetch_and_store_wp_posts(req.domain)
        
        # –≠—Ç–∞–ø 2: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ RAG
        if req.client_id:
            await websocket_manager.send_step(req.client_id, "RAG –∞–Ω–∞–ª–∏–∑", 2, 3, "–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        
        recs = await generate_rag_recommendations(req.domain, req.client_id)
        
        # –≠—Ç–∞–ø 3: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if req.client_id:
            await websocket_manager.send_step(req.client_id, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", 3, 3, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        
        summary = f"RAG-–∞–Ω–∞–ª–∏–∑ {req.domain}: {len(posts)} —Å—Ç–∞—Ç–µ–π, {len(recs)} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
        
        async with AsyncSessionLocal() as session:
            analysis = AnalysisHistory(
                domain=req.domain,
                posts_count=len(posts),
                recommendations_count=len(recs),
                recommendations=recs,
                summary=summary
            )
            session.add(analysis)
            await session.commit()
        
        if req.client_id:
            await websocket_manager.send_progress(req.client_id, {
                "type": "complete",
                "message": "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!",
                "recommendations_count": len(recs),
                "posts_count": len(posts),
                "timestamp": datetime.now().isoformat()
            })
        
        return {"recommendations": recs}
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ WordPress: {str(e)}"
        print(f"‚ùå {error_msg}")
        
        if req.client_id:
            await websocket_manager.send_error(req.client_id, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", error_msg)
        
        raise HTTPException(status_code=500, detail=error_msg)


@app.get("/api/v1/health")
async def health() -> dict[str, str]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏."""
    return {"status": "ok"}


@app.get("/api/v1/recommendations")
async def list_recommendations() -> list[dict[str, object]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Recommendation).order_by(Recommendation.id.desc())
        )
        items = [
            {"id": rec.id, "text": rec.text, "links": rec.links}
            for rec in result.scalars()
        ]
    return items


@app.get("/api/v1/analysis_history")
async def list_analysis_history() -> list[dict[str, object]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–æ–≤ WordPress —Å–∞–π—Ç–æ–≤."""
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(AnalysisHistory).order_by(AnalysisHistory.created_at.desc())
        )
        items = [
            {
                "id": analysis.id,
                "domain": analysis.domain,
                "posts_count": analysis.posts_count,
                "recommendations_count": analysis.recommendations_count,
                "summary": analysis.summary,
                "created_at": analysis.created_at.isoformat(),
                "recommendations": analysis.recommendations
            }
            for analysis in result.scalars()
        ]
    return items


@app.get("/api/v1/analysis_history/{analysis_id}")
async def get_analysis_details(analysis_id: int) -> dict[str, object]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(AnalysisHistory).where(AnalysisHistory.id == analysis_id)
        )
        analysis = result.scalar_one_or_none()
        if not analysis:
            raise HTTPException(status_code=404, detail="–ê–Ω–∞–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return {
            "id": analysis.id,
            "domain": analysis.domain,
            "posts_count": analysis.posts_count,
            "recommendations_count": analysis.recommendations_count,
            "summary": analysis.summary,
            "created_at": analysis.created_at.isoformat(),
            "recommendations": analysis.recommendations
        }


@app.delete("/api/v1/clear_data")
async def clear_all_data() -> dict[str, str]:
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)."""
    try:
        from sqlalchemy import text
        
        async with AsyncSessionLocal() as session:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw SQL –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ - –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ
            await session.execute(text("DELETE FROM analysis_history"))
            await session.execute(text("DELETE FROM article_embeddings")) 
            await session.execute(text("DELETE FROM wordpress_posts"))
            await session.execute(text("DELETE FROM recommendations"))
            
            # –°–±—Ä–æ—Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π (–∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç)
            await session.execute(text("ALTER SEQUENCE analysis_history_id_seq RESTART WITH 1"))
            await session.execute(text("ALTER SEQUENCE article_embeddings_id_seq RESTART WITH 1"))
            await session.execute(text("ALTER SEQUENCE wordpress_posts_id_seq RESTART WITH 1"))
            await session.execute(text("ALTER SEQUENCE recommendations_id_seq RESTART WITH 1"))
            
            await session.commit()
        
        # –û—á–∏—â–∞–µ–º ChromaDB
        try:
            if chroma_client:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏ —É–¥–∞–ª—è–µ–º –∏—Ö
                collections = chroma_client.list_collections()
                for collection in collections:
                    chroma_client.delete_collection(name=collection.name)
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ ChromaDB –∫–æ–ª–ª–µ–∫—Ü–∏—è: {collection.name}")
                
                # –û—á–∏—â–∞–µ–º –∫–µ—à RAG –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                rag_manager.domain_collections.clear()
                rag_manager.domain_articles.clear()
                print("üóëÔ∏è –û—á–∏—â–µ–Ω –∫–µ—à RAG –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        except Exception as chroma_error:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ ChromaDB: {chroma_error}")
        
        print("üßπ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã")
        return {"status": "ok", "message": "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã"}
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}")


@app.get("/")
async def root():
    """–†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥."""
    from fastapi.responses import RedirectResponse
    return RedirectResponse(url="http://localhost:3000")
