#!/usr/bin/env python3
"""
‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ WordPress –∏ LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:
1. –†–∞–±–æ—Ç—ã API
2. –ò–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ WordPress
3. LLM Router –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import asyncio
import httpx
import json
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã"""
    base_url = "http://localhost:8000"
    
    async with httpx.AsyncClient(timeout=30.0) as client:
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞")
            
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
            logger.info("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API...")
            response = await client.get(f"{base_url}/health")
            if response.status_code == 200:
                logger.info("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                logger.error(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return
            
            # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            response = await client.post(f"{base_url}/api/v1/test/setup")
            if response.status_code != 200:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response.status_code}")
                return
            logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω")
            
            # 3. –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
            logger.info("üìã –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É...")
            response = await client.post(f"{base_url}/api/v1/test/login")
            if response.status_code != 200:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {response.status_code}")
                return
            
            data = response.json()
            token = data.get("access_token")
            if not token:
                logger.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                return
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥")
            
            headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Ollama
            logger.info("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Ollama...")
            response = await client.get(f"{base_url}/api/v1/ollama_status", headers=headers)
            if response.status_code == 200:
                ollama_data = response.json()
                logger.info(f"‚úÖ Ollama —Ä–∞–±–æ—Ç–∞–µ—Ç: {ollama_data.get('model', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            else:
                logger.warning(f"‚ö†Ô∏è Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            
            # 5. –¢–µ—Å—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ WordPress
            test_domain = "https://wordpress.org"
            logger.info(f"üìã –¢–µ—Å—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {test_domain}")
            
            payload = {"domain": test_domain, "comprehensive": False}
            response = await client.post(
                f"{base_url}/api/v1/wordpress/index",
                json=payload,
                headers=headers
            )
            
            if response.status_code == 200:
                index_data = response.json()
                posts_count = index_data.get("posts_count", 0)
                logger.info(f"‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {posts_count} —Å—Ç–∞—Ç–µ–π")
                
                # 6. –¢–µ—Å—Ç SEO —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                if posts_count > 0:
                    logger.info("üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SEO —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
                    seo_payload = {"domain": test_domain}
                    response = await client.post(
                        f"{base_url}/api/v1/seo/recommendations",
                        json=seo_payload,
                        headers=headers
                    )
                    
                    if response.status_code == 200:
                        seo_data = response.json()
                        recommendations = seo_data.get("recommendations", [])
                        llm_recs = [r for r in recommendations if r.get("source") == "llm_router"]
                        
                        logger.info(f"‚úÖ SEO —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã: {len(recommendations)} –≤—Å–µ–≥–æ, {len(llm_recs)} –æ—Ç AI")
                        
                        if llm_recs:
                            logger.info("üéâ LLM Router —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω!")
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                            ai_rec = llm_recs[0]
                            logger.info(f"   –ü—Ä–∏–º–µ—Ä AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {ai_rec.get('title')}")
                        else:
                            logger.warning("‚ö†Ô∏è LLM Router –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ SEO —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {response.status_code}")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å—Ç–∞—Ç–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {response.status_code}")
                logger.error(f"   –û—Ç–≤–µ—Ç: {response.text}")
            
            logger.info("üèÅ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(quick_test()) 