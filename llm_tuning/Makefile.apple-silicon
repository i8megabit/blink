# üçé Makefile –¥–ª—è Apple Silicon - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è M1/M2/M3
# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM Tuning –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–º –Ω–∞ ARM64

.PHONY: help install build run test clean docker-build docker-run docker-stop docker-logs docker-shell migrate seed monitor health check-ollama optimize-models

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
SERVICE_NAME = llm-tuning-apple-silicon
COMPOSE_FILE = docker-compose.apple-silicon.yml
DOCKERFILE = Dockerfile.apple-silicon
PYTHON_VERSION = 3.11
ARCH = arm64

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
BLUE = \033[0;34m
NC = \033[0m # No Color

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
	@echo "$(BLUE)üçé LLM Tuning –¥–ª—è Apple Silicon - –ö–æ–º–∞–Ω–¥—ã$(NC)"
	@echo ""
	@echo "$(GREEN)–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(YELLOW)%-20s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo ""
	@echo "$(GREEN)–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:$(NC)"
	@echo "  make install          # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
	@echo "  make docker-build     # –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞ –¥–ª—è ARM64"
	@echo "  make docker-run       # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo "  make health           # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤"

install: ## –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python
	@echo "$(BLUE)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è Apple Silicon...$(NC)"
	python$(PYTHON_VERSION) -m pip install --upgrade pip
	python$(PYTHON_VERSION) -m pip install -r requirements.txt
	@echo "$(GREEN)‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

build: ## –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
	@echo "$(BLUE)üî® –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...$(NC)"
	python$(PYTHON_VERSION) -m pip install -e .
	@echo "$(GREEN)‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–±—Ä–∞–Ω$(NC)"

run: ## –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(BLUE)üöÄ –ó–∞–ø—É—Å–∫ LLM Tuning –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞...$(NC)"
	uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --workers 2

test: ## –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
	@echo "$(BLUE)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...$(NC)"
	pytest tests/ -v --tb=short --cov=app --cov-report=html
	@echo "$(GREEN)‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã$(NC)"

clean: ## –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
	@echo "$(BLUE)üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...$(NC)"
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	rm -rf .pytest_cache/
	rm -rf htmlcov/
	rm -rf .coverage
	@echo "$(GREEN)‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

docker-build: ## –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞ –¥–ª—è Apple Silicon
	@echo "$(BLUE)üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞ –¥–ª—è ARM64...$(NC)"
	docker build -f $(DOCKERFILE) -t $(SERVICE_NAME):latest --platform linux/arm64 .
	@echo "$(GREEN)‚úÖ Docker –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω$(NC)"

docker-run: ## –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —á–µ—Ä–µ–∑ Docker Compose
	@echo "$(BLUE)üöÄ –ó–∞–ø—É—Å–∫ LLM Tuning –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ —Å Apple Silicon –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏...$(NC)"
	docker-compose -f $(COMPOSE_FILE) up -d
	@echo "$(GREEN)‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã$(NC)"
	@echo "$(YELLOW)üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: http://localhost:3000 (Grafana)$(NC)"
	@echo "$(YELLOW)üìà –ú–µ—Ç—Ä–∏–∫–∏: http://localhost:9090 (Prometheus)$(NC)"
	@echo "$(YELLOW)üîç –¢—Ä–µ–π—Å–∏–Ω–≥: http://localhost:16686 (Jaeger)$(NC)"
	@echo "$(YELLOW)üìö API Docs: http://localhost:8001/docs$(NC)"

docker-stop: ## –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(BLUE)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	docker-compose -f $(COMPOSE_FILE) down
	@echo "$(GREEN)‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

docker-logs: ## –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
	@echo "$(BLUE)üìã –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:$(NC)"
	docker-compose -f $(COMPOSE_FILE) logs -f

docker-shell: ## –í—Ö–æ–¥ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–µ—Ä–≤–∏—Å–∞
	@echo "$(BLUE)üêö –í—Ö–æ–¥ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...$(NC)"
	docker-compose -f $(COMPOSE_FILE) exec llm-tuning /bin/bash

migrate: ## –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	@echo "$(BLUE)üóÑÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...$(NC)"
	docker-compose -f $(COMPOSE_FILE) exec llm-tuning alembic upgrade head
	@echo "$(GREEN)‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã$(NC)"

seed: ## –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
	@echo "$(BLUE)üå± –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...$(NC)"
	docker-compose -f $(COMPOSE_FILE) exec llm-tuning python -c "
from app.services import ModelService, RAGService
import asyncio

async def seed_data():
    # –ó–¥–µ—Å—å –∫–æ–¥ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    print('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã')

asyncio.run(seed_data())
"
	@echo "$(GREEN)‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã$(NC)"

monitor: ## –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
	@echo "$(BLUE)üìä –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...$(NC)"
	docker-compose -f $(COMPOSE_FILE) --profile monitoring up -d prometheus grafana jaeger
	@echo "$(GREEN)‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω$(NC)"
	@echo "$(YELLOW)üìä Grafana: http://localhost:3000 (admin/admin)$(NC)"
	@echo "$(YELLOW)üìà Prometheus: http://localhost:9090$(NC)"
	@echo "$(YELLOW)üîç Jaeger: http://localhost:16686$(NC)"

health: ## –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(BLUE)üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	@echo "$(YELLOW)LLM Tuning API:$(NC)"
	@curl -s http://localhost:8001/health | jq . || echo "$(RED)‚ùå LLM Tuning –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω$(NC)"
	@echo "$(YELLOW)Ollama:$(NC)"
	@curl -s http://localhost:11434/api/tags | jq . || echo "$(RED)‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω$(NC)"
	@echo "$(YELLOW)ChromaDB:$(NC)"
	@curl -s http://localhost:8000/api/v1/heartbeat | jq . || echo "$(RED)‚ùå ChromaDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω$(NC)"
	@echo "$(YELLOW)Redis:$(NC)"
	@docker-compose -f $(COMPOSE_FILE) exec redis redis-cli ping || echo "$(RED)‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω$(NC)"
	@echo "$(YELLOW)PostgreSQL:$(NC)"
	@docker-compose -f $(COMPOSE_FILE) exec llm-tuning-db pg_isready -U llm_tuning_user -d llm_tuning_db || echo "$(RED)‚ùå PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω$(NC)"

check-ollama: ## –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Ollama –∏ –º–æ–¥–µ–ª–µ–π
	@echo "$(BLUE)ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama –∏ –º–æ–¥–µ–ª–µ–π...$(NC)"
	@echo "$(YELLOW)–°—Ç–∞—Ç—É—Å Ollama:$(NC)"
	@curl -s http://localhost:11434/api/tags | jq '.models[] | {name: .name, size: .size, modified_at: .modified_at}' || echo "$(RED)‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω$(NC)"
	@echo "$(YELLOW)–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:$(NC)"
	@docker stats --no-stream llm-tuning-ollama-apple-silicon || echo "$(RED)‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É$(NC)"

optimize-models: ## –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è Apple Silicon
	@echo "$(BLUE)‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è Apple Silicon...$(NC)"
	@echo "$(YELLOW)–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Ollama:$(NC)"
	@docker-compose -f $(COMPOSE_FILE) exec ollama env | grep OLLAMA_ || echo "$(RED)‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã$(NC)"
	@echo "$(YELLOW)–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è M1/M2/M3:$(NC)"
	@echo "  OLLAMA_METAL=1"
	@echo "  OLLAMA_FLASH_ATTENTION=1"
	@echo "  OLLAMA_KV_CACHE_TYPE=q8_0"
	@echo "  OLLAMA_CONTEXT_LENGTH=4096"
	@echo "  OLLAMA_BATCH_SIZE=512"
	@echo "  OLLAMA_NUM_PARALLEL=2"
	@echo "  OLLAMA_MEM_FRACTION=0.9"

load-test: ## –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
	@echo "$(BLUE)üìà –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...$(NC)"
	@echo "$(YELLOW)–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints:$(NC)"
	@for i in {1..10}; do \
		echo "–ó–∞–ø—Ä–æ—Å $$i:"; \
		curl -s -w "–í—Ä–µ–º—è: %{time_total}s, –ö–æ–¥: %{http_code}\n" http://localhost:8001/health; \
	done
	@echo "$(YELLOW)–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG –∑–∞–ø—Ä–æ—Å–æ–≤:$(NC)"
	@curl -s -X POST http://localhost:8001/api/v1/rag/query \
		-H "Content-Type: application/json" \
		-d '{"query": "–ß—Ç–æ —Ç–∞–∫–æ–µ SEO?", "model": "qwen2.5:7b-instruct-turbo"}' | jq .

backup: ## –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö
	@echo "$(BLUE)üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...$(NC)"
	@mkdir -p backups/$(shell date +%Y%m%d_%H%M%S)
	@docker-compose -f $(COMPOSE_FILE) exec llm-tuning-db pg_dump -U llm_tuning_user llm_tuning_db > backups/$(shell date +%Y%m%d_%H%M%S)/database.sql
	@docker cp llm-tuning-chromadb:/chroma/chroma backups/$(shell date +%Y%m%d_%H%M%S)/chromadb
	@echo "$(GREEN)‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞$(NC)"

restore: ## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
	@echo "$(BLUE)üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...$(NC)"
	@echo "$(YELLOW)–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:$(NC)"
	@read -p "–ü—É—Ç—å: " backup_path; \
	docker-compose -f $(COMPOSE_FILE) exec -T llm-tuning-db psql -U llm_tuning_user llm_tuning_db < $$backup_path/database.sql
	@echo "$(GREEN)‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ$(NC)"

update-models: ## –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π Ollama
	@echo "$(BLUE)üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) exec ollama ollama pull qwen2.5:7b-instruct-turbo
	@docker-compose -f $(COMPOSE_FILE) exec ollama ollama pull llama3.1:8b
	@echo "$(GREEN)‚úÖ –ú–æ–¥–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

logs-tail: ## –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
	@echo "$(BLUE)üìã –õ–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:$(NC)"
	@docker-compose -f $(COMPOSE_FILE) logs -f --tail=100

restart: ## –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(BLUE)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	@make docker-stop
	@make docker-run
	@echo "$(GREEN)‚úÖ –°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã$(NC)"

setup-dev: ## –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(BLUE)üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	@make install
	@make build
	@cp .env.example .env
	@echo "$(GREEN)‚úÖ –°—Ä–µ–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞$(NC)"
	@echo "$(YELLOW)–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å .env —Ñ–∞–π–ª$(NC)"

setup-prod: ## –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å—Ä–µ–¥—ã
	@echo "$(BLUE)üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å—Ä–µ–¥—ã...$(NC)"
	@make docker-build
	@make docker-run
	@make migrate
	@make monitor
	@echo "$(GREEN)‚úÖ –ü—Ä–æ–¥–∞–∫—à–Ω —Å—Ä–µ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞$(NC)"

cleanup: ## –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
	@echo "$(BLUE)üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...$(NC)"
	@make docker-stop
	@docker-compose -f $(COMPOSE_FILE) down -v
	@docker system prune -f
	@make clean
	@echo "$(GREEN)‚úÖ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Apple Silicon
apple-silicon-optimize: ## –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è Apple Silicon
	@echo "$(BLUE)üçé –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è Apple Silicon...$(NC)"
	@echo "$(YELLOW)–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:$(NC)"
	@uname -m
	@echo "$(YELLOW)–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–∞–º—è—Ç–∏:$(NC)"
	@sysctl hw.memsize | awk '{print $$2/1024/1024/1024 " GB"}'
	@echo "$(YELLOW)–ü—Ä–æ–≤–µ—Ä–∫–∞ CPU:$(NC)"
	@sysctl -n hw.ncpu
	@echo "$(YELLOW)–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:$(NC)"
	@echo "  - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ OLLAMA_METAL=1 –¥–ª—è GPU —É—Å–∫–æ—Ä–µ–Ω–∏—è"
	@echo "  - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OLLAMA_FLASH_ATTENTION=1"
	@echo "  - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ (q8_0)"
	@echo "  - –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–¥ –≤–∞—à—É –ø–∞–º—è—Ç—å"

performance-test: ## –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	@echo "$(BLUE)‚ö° –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...$(NC)"
	@echo "$(YELLOW)–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API:$(NC)"
	@ab -n 100 -c 10 http://localhost:8001/health || echo "$(RED)‚ùå Apache Bench –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω$(NC)"
	@echo "$(YELLOW)–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Ollama:$(NC)"
	@curl -s -X POST http://localhost:11434/api/generate \
		-H "Content-Type: application/json" \
		-d '{"model": "qwen2.5:7b-instruct-turbo", "prompt": "Hello", "stream": false}' \
		-w "–í—Ä–µ–º—è: %{time_total}s\n" || echo "$(RED)‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω$(NC)"

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
info: ## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
	@echo "$(BLUE)‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:$(NC)"
	@echo "$(YELLOW)–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:$(NC) $(shell uname -m)"
	@echo "$(YELLOW)–û–°:$(NC) $(shell uname -s)"
	@echo "$(YELLOW)–í–µ—Ä—Å–∏—è Python:$(NC) $(shell python$(PYTHON_VERSION) --version)"
	@echo "$(YELLOW)Docker –≤–µ—Ä—Å–∏—è:$(NC) $(shell docker --version)"
	@echo "$(YELLOW)Docker Compose –≤–µ—Ä—Å–∏—è:$(NC) $(shell docker-compose --version)"

status: ## –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(BLUE)üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:$(NC)"
	@docker-compose -f $(COMPOSE_FILE) ps
	@echo "$(YELLOW)–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:$(NC)"
	@docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}"

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
dev-run: ## –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å hot reload
	@echo "$(BLUE)üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	@uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --workers 1

dev-test: ## –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(BLUE)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	@pytest tests/ -v --tb=short -s

lint: ## –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
	@echo "$(BLUE)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞...$(NC)"
	@flake8 app/ tests/
	@black --check app/ tests/
	@isort --check-only app/ tests/
	@echo "$(GREEN)‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

format: ## –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
	@echo "$(BLUE)üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞...$(NC)"
	@black app/ tests/
	@isort app/ tests/
	@echo "$(GREEN)‚úÖ –ö–æ–¥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω$(NC)" 