"""
üîå API –∫–ª–∏–µ–Ω—Ç –¥–ª—è UX –±–æ—Ç–∞-–∏–º–∏—Ç–∞—Ç–æ—Ä–∞

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å LLM —Ä–æ—É—Ç–µ—Ä–æ–º –∏ –±—ç–∫–µ–Ω–¥–æ–º reLink –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤
–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞.
"""

import aiohttp
import json
import logging
from typing import Dict, Any, Optional, List
from datetime import datetime
import asyncio

from .config import settings
from .models import APIConfig, TestReport, PageAnalysis, Issue

logger = logging.getLogger(__name__)

class APIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API —Å–µ—Ä–≤–∏—Å–æ–≤ reLink"""
    
    def __init__(self, config: APIConfig):
        self.config = config
        self.session: Optional[aiohttp.ClientSession] = None
        self.auth_token: Optional[str] = None
    
    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥"""
        await self.connect()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥"""
        await self.disconnect()
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API"""
        try:
            connector = aiohttp.TCPConnector(verify_ssl=self.config.verify_ssl)
            timeout = aiohttp.ClientTimeout(total=self.config.timeout)
            
            self.session = aiohttp.ClientSession(
                base_url=self.config.base_url,
                headers=self.config.headers,
                connector=connector,
                timeout=timeout
            )
            
            logger.info(f"API –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ {self.config.base_url}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
            raise
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç API"""
        if self.session:
            await self.session.close()
            self.session = None
            logger.info("API –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
    
    async def _make_request(self, method: str, endpoint: str, 
                          data: Optional[Dict[str, Any]] = None,
                          headers: Optional[Dict[str, str]] = None) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞"""
        if not self.session:
            raise RuntimeError("API –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        url = f"{self.config.base_url}{endpoint}"
        request_headers = self.config.headers.copy()
        
        if self.auth_token:
            request_headers["Authorization"] = f"Bearer {self.auth_token}"
        
        if headers:
            request_headers.update(headers)
        
        for attempt in range(self.config.retry_count):
            try:
                async with self.session.request(
                    method=method,
                    url=url,
                    json=data,
                    headers=request_headers
                ) as response:
                    
                    if response.status == 200:
                        return await response.json()
                    elif response.status == 401:
                        logger.warning("–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –ø–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                        await self._authenticate()
                        continue
                    else:
                        error_text = await response.text()
                        logger.error(f"HTTP {response.status}: {error_text}")
                        return {"error": f"HTTP {response.status}: {error_text}"}
                        
            except aiohttp.ClientError as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
                if attempt == self.config.retry_count - 1:
                    raise
                await asyncio.sleep(1)
        
        return {"error": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫"}
    
    async def _authenticate(self):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ API"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            if self.config.auth_token:
                self.auth_token = self.config.auth_token
                logger.info("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—ç–∫–µ–Ω–¥–æ–º reLink
    
    async def send_page_analysis(self, analysis: PageAnalysis) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –±—ç–∫–µ–Ω–¥"""
        try:
            data = {
                "url": analysis.url,
                "title": analysis.title,
                "elements": [
                    {
                        "selector": elem.selector,
                        "type": elem.element_type.value,
                        "text": elem.text,
                        "attributes": elem.attributes,
                        "is_visible": elem.is_visible,
                        "is_enabled": elem.is_enabled,
                        "position": elem.position,
                        "size": elem.size
                    }
                    for elem in analysis.elements
                ],
                "accessibility_issues": analysis.accessibility_issues,
                "responsiveness_issues": analysis.responsiveness_issues,
                "performance_metrics": analysis.performance_metrics,
                "screenshot_path": analysis.screenshot_path,
                "analysis_time": analysis.analysis_time.isoformat()
            }
            
            result = await self._make_request("POST", "/api/analysis/page", data)
            logger.info(f"–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {analysis.url}")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return {"error": str(e)}
    
    async def send_test_report(self, report: TestReport) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ –±—ç–∫–µ–Ω–¥"""
        try:
            data = {
                "report_id": report.report_id,
                "session_id": report.session_id,
                "start_time": report.start_time.isoformat(),
                "end_time": report.end_time.isoformat() if report.end_time else None,
                "duration": report.duration,
                "total_tests": report.total_tests,
                "successful_tests": report.successful_tests,
                "failed_tests": report.failed_tests,
                "skipped_tests": report.skipped_tests,
                "success_rate": report.success_rate,
                "issues": [
                    {
                        "issue_id": issue.issue_id,
                        "type": issue.type,
                        "severity": issue.severity.value,
                        "description": issue.description,
                        "location": issue.location,
                        "screenshot_path": issue.screenshot_path,
                        "recommendation": issue.recommendation,
                        "detected_at": issue.detected_at.isoformat()
                    }
                    for issue in report.issues
                ],
                "recommendations": [
                    {
                        "recommendation_id": rec.recommendation_id,
                        "issue_id": rec.issue_id,
                        "priority": rec.priority.value,
                        "issue": rec.issue,
                        "solution": rec.solution,
                        "impact": rec.impact,
                        "effort": rec.effort,
                        "category": rec.category
                    }
                    for rec in report.recommendations
                ],
                "user_profile": {
                    "name": report.user_profile.name,
                    "behavior": report.user_profile.behavior,
                    "speed": report.user_profile.speed
                } if report.user_profile else None,
                "test_environment": report.test_environment,
                "notes": report.notes
            }
            
            result = await self._make_request("POST", "/api/reports/test", data)
            logger.info(f"–û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {report.report_id}")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            return {"error": str(e)}
    
    async def send_issue(self, issue: Issue) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã –≤ –±—ç–∫–µ–Ω–¥"""
        try:
            data = {
                "issue_id": issue.issue_id,
                "type": issue.type,
                "severity": issue.severity.value,
                "description": issue.description,
                "location": issue.location,
                "screenshot_path": issue.screenshot_path,
                "recommendation": issue.recommendation,
                "detected_at": issue.detected_at.isoformat()
            }
            
            result = await self._make_request("POST", "/api/issues", data)
            logger.info(f"–ü—Ä–æ–±–ª–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {issue.issue_id}")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã: {e}")
            return {"error": str(e)}
    
    async def get_test_scenarios(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏–∑ –±—ç–∫–µ–Ω–¥–∞"""
        try:
            result = await self._make_request("GET", "/api/scenarios")
            return result.get("scenarios", [])
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {e}")
            return []
    
    async def get_user_profiles(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±—ç–∫–µ–Ω–¥–∞"""
        try:
            result = await self._make_request("GET", "/api/profiles")
            return result.get("profiles", [])
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")
            return []
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM-—Ä–æ—É—Ç–µ—Ä–æ–º
    
    async def send_context_to_llm(self, context_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ LLM-—Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"""
        try:
            data = {
                "context": context_data,
                "timestamp": datetime.now().isoformat(),
                "session_id": context_data.get("session_id")
            }
            
            result = await self._make_request("POST", "/api/llm/context", data)
            logger.info("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ LLM-—Ä–æ—É—Ç–µ—Ä")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ LLM: {e}")
            return {"error": str(e)}
    
    async def get_llm_instruction(self, session_id: str, current_context: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç LLM-—Ä–æ—É—Ç–µ—Ä–∞"""
        try:
            data = {
                "session_id": session_id,
                "current_context": current_context,
                "request_type": "instruction"
            }
            
            result = await self._make_request("POST", "/api/llm/instruction", data)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ—Ç LLM –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç LLM: {e}")
            return {"error": str(e)}
    
    async def send_action_result(self, session_id: str, action: str, 
                               result: Dict[str, Any]) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ LLM-—Ä–æ—É—Ç–µ—Ä"""
        try:
            data = {
                "session_id": session_id,
                "action": action,
                "result": result,
                "timestamp": datetime.now().isoformat()
            }
            
            result = await self._make_request("POST", "/api/llm/action-result", data)
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ LLM: {action}")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
            return {"error": str(e)}
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RAG-—Å–µ—Ä–≤–∏—Å–æ–º
    
    async def send_to_rag(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ RAG-—Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            result = await self._make_request("POST", "/api/rag/analyze", data)
            logger.info("–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ RAG-—Å–µ—Ä–≤–∏—Å")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ RAG: {e}")
            return {"error": str(e)}
    
    async def get_rag_insights(self, query: str, context: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å–∞–π—Ç–æ–≤ –æ—Ç RAG-—Å–µ—Ä–≤–∏—Å–∞"""
        try:
            data = {
                "query": query,
                "context": context,
                "timestamp": datetime.now().isoformat()
            }
            
            result = await self._make_request("POST", "/api/rag/insights", data)
            logger.info("–ü–æ–ª—É—á–µ–Ω—ã –∏–Ω—Å–∞–π—Ç—ã –æ—Ç RAG-—Å–µ—Ä–≤–∏—Å–∞")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ –æ—Ç RAG: {e}")
            return {"error": str(e)}
    
    # –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    async def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
        try:
            result = await self._make_request("GET", "/health")
            return "status" in result and result["status"] == "ok"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API: {e}")
            return False
    
    async def get_api_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± API"""
        try:
            result = await self._make_request("GET", "/api/info")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± API: {e}")
            return {"error": str(e)} 