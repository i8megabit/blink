#!/usr/bin/env python3
"""
üß† –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
- –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
- LLM-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
- –ê–¥–∞–ø—Ç–∏–≤–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- RAG-–ø–æ–¥—Ö–æ–¥ –∫ –ø—Ä–∏–Ω—è—Ç–∏—é —Ä–µ—à–µ–Ω–∏–π
"""

import asyncio
import json
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

from app.llm_router import system_analyzer, llm_router, LLMRequest, LLMServiceType

async def test_system_analysis():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–∏—Å—Ç–µ–º—ã"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏—Å—Ç–µ–º—ã...")
    
    specs = await system_analyzer.analyze_system()
    print(f"‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã:")
    print(f"   –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {specs.platform}")
    print(f"   –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {specs.architecture}")
    print(f"   CPU —è–¥–µ—Ä: {specs.cpu_count}")
    print(f"   –ü–∞–º—è—Ç—å: {specs.memory_gb:.1f} GB")
    print(f"   GPU –¥–æ—Å—Ç—É–ø–µ–Ω: {specs.gpu_available}")
    print(f"   –¢–∏–ø GPU: {specs.gpu_type}")
    print(f"   Apple Silicon: {specs.apple_silicon}")
    print(f"   M1/M2/M4: {specs.m1_m2_m4}")
    print()

async def test_optimization():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
    
    config = await system_analyzer.optimize_config()
    print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"   –ú–æ–¥–µ–ª—å: {config.model}")
    print(f"   GPU: {config.num_gpu}")
    print(f"   –ü–æ—Ç–æ–∫–∏: {config.num_thread}")
    print(f"   –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {config.batch_size}")
    print(f"   F16 KV: {config.f16_kv}")
    print(f"   –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {config.context_length}")
    print(f"   –õ–∏–º–∏—Ç —Å–µ–º–∞—Ñ–æ—Ä–∞: {config.semaphore_limit}")
    print(f"   –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {config.temperature}")
    print(f"   –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤: {config.max_tokens}")
    print()

async def test_llm_router():
    """–¢–µ—Å—Ç LLM —Ä–æ—É—Ç–µ—Ä–∞ —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LLM —Ä–æ—É—Ç–µ—Ä–∞...")
    
    try:
        await llm_router.start()
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        request = LLMRequest(
            service_type=LLMServiceType.SEO_RECOMMENDATIONS,
            prompt="–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è —Å–∞–π—Ç–∞ –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö",
            context={"domain": "tech-example.com"},
            temperature=0.7,
            max_tokens=512
        )
        
        print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
        response = await llm_router.process_request(request)
        
        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {response.response_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {response.tokens_used}")
        print(f"   –ú–æ–¥–µ–ª—å: {response.model_used}")
        print(f"   –ö—ç—à–∏—Ä–æ–≤–∞–Ω: {response.cached}")
        print(f"   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {response.metadata}")
        print()
        
        await llm_router.stop()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LLM —Ä–æ—É—Ç–µ—Ä–∞: {e}")
        print()

async def test_performance_monitoring():
    """–¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    # –°–∏–º—É–ª—è—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    for i in range(5):
        await system_analyzer.record_performance(
            response_time=1.5 + (i * 0.1),
            success=True,
            tokens_used=100 + (i * 10)
        )
        print(f"   –ó–∞–ø–∏—Å—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ {i+1}/5")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    report = await system_analyzer.get_optimization_report()
    print(f"‚úÖ –û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {report['performance_history']['total_records']}")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {report['performance_history']['recent_avg_response_time']:.2f}s")
    print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {report['performance_history']['recent_success_rate']:.1%}")
    print()

async def test_environment_variables():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    env_vars = await system_analyzer.get_environment_variables()
    print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    for key, value in env_vars.items():
        print(f"   {key}: {value}")
    print()

async def test_adaptive_optimization():
    """–¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
    
    # –°–∏–º—É–ª—è—Ü–∏—è —É—Ö—É–¥—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print("   –°–∏–º—É–ª—è—Ü–∏—è —É—Ö—É–¥—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    for i in range(10):
        await system_analyzer.record_performance(
            response_time=6.0 + (i * 0.5),  # –í—ã—Å–æ–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
            success=i < 7,  # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ—É–¥–∞—á–∏
            tokens_used=200
        )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª–∞—Å—å
    print("   –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏...")
    new_config = await system_analyzer.optimize_config()
    print(f"   –ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏:")
    print(f"     –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {new_config.batch_size}")
    print(f"     –õ–∏–º–∏—Ç —Å–µ–º–∞—Ñ–æ—Ä–∞: {new_config.semaphore_limit}")
    print()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    print("=" * 60)
    
    try:
        await test_system_analysis()
        await test_optimization()
        await test_llm_router()
        await test_performance_monitoring()
        await test_environment_variables()
        await test_adaptive_optimization()
        
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("=" * 60)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        print("üìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢:")
        final_report = await system_analyzer.get_optimization_report()
        print(json.dumps(final_report, indent=2, ensure_ascii=False))
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 