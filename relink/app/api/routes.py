"""
üîó API —Ä–æ—É—Ç—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–∏
"""

from fastapi import APIRouter, Depends, HTTPException, status, BackgroundTasks
from fastapi.responses import JSONResponse
from typing import List, Optional, Dict, Any
from datetime import datetime
import logging
import json
import asyncio

from ..models import (
    InternalLink, 
    LinkRecommendation, 
    DomainAnalysisRequest,
    SEOAnalysisResult,
    LinkType,
    DomainAnalysisResponse,
    SEORecommendationRequest,
    SEORecommendationResponse,
    InternalLinkAnalysis,
    PostAnalysis,
    IndexingStatus
)
from ..services.internal_linking import InternalLinkingService
from ..services.seo_analyzer import SEOAnalyzerService
from ..services.content_analyzer import ContentAnalyzerService
from bootstrap.llm_router import get_llm_router
from bootstrap.rag_service import get_rag_service
from bootstrap.ollama_client import get_ollama_client
from bootstrap.monitoring import get_service_monitor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

router = APIRouter(tags=["reLink Internal Linking"], prefix="/api/v1")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
internal_linking_service = InternalLinkingService()
seo_analyzer_service = SEOAnalyzerService()
content_analyzer_service = ContentAnalyzerService()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
_linking_service: Optional[InternalLinkingService] = None

def get_linking_service() -> InternalLinkingService:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–∏"""
    global _linking_service
    if _linking_service is None:
        _linking_service = InternalLinkingService()
    return _linking_service

@router.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "service": "reLink Internal Linking",
        "description": "–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è SEO",
        "timestamp": datetime.now().isoformat(),
        "version": "1.0.0"
    }

@router.post("/internal-links/analyze")
async def analyze_internal_links(
    request: DomainAnalysisRequest,
    llm_router = Depends(get_llm_router),
    rag_service = Depends(get_rag_service),
    ollama_client = Depends(get_ollama_client),
    monitor = Depends(get_service_monitor)
):
    """–ê–Ω–∞–ª–∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è –¥–æ–º–µ–Ω–∞"""
    
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    request_data = await monitor.track_request("/internal-links/analyze", f"req_{datetime.now().timestamp()}")
    
    try:
        # –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–µ—Ä–≤–∏—Å
        analysis_result = await internal_linking_service.analyze_domain(
            domain=request.domain,
            llm_router=llm_router,
            rag_service=rag_service,
            ollama_client=ollama_client
        )
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        await monitor.complete_request(request_data["request_id"], "success", analysis_result)
        
        return analysis_result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫: {e}")
        await monitor.complete_request(request_data["request_id"], "error")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫: {str(e)}"
        )

@router.post("/internal-links/recommendations")
async def get_link_recommendations(
    request: DomainAnalysisRequest,
    llm_router = Depends(get_llm_router),
    rag_service = Depends(get_rag_service),
    ollama_client = Depends(get_ollama_client),
    monitor = Depends(get_service_monitor)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º —Å—Å—ã–ª–∫–∞–º"""
    
    request_data = await monitor.track_request("/internal-links/recommendations", f"req_{datetime.now().timestamp()}")
    
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        recommendations = await internal_linking_service.generate_recommendations(
            domain=request.domain,
            llm_router=llm_router,
            rag_service=rag_service,
            ollama_client=ollama_client
        )
        
        await monitor.complete_request(request_data["request_id"], "success", {"recommendations": recommendations})
        
        return {
            "status": "success",
            "domain": request.domain,
            "recommendations": recommendations,
            "generated_at": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        await monitor.complete_request(request_data["request_id"], "error")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}"
        )

@router.post("/seo/analyze", response_model=SEOAnalysisResult)
async def analyze_seo(
    request: DomainAnalysisRequest,
    llm_router = Depends(get_llm_router),
    rag_service = Depends(get_rag_service),
    ollama_client = Depends(get_ollama_client),
    monitor = Depends(get_service_monitor)
):
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π SEO –∞–Ω–∞–ª–∏–∑ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏"""
    
    request_data = await monitor.track_request("/seo/analyze", f"req_{datetime.now().timestamp()}")
    
    try:
        # SEO –∞–Ω–∞–ª–∏–∑
        seo_result = await seo_analyzer_service.analyze_domain(
            domain=request.domain,
            comprehensive=request.comprehensive,
            llm_router=llm_router,
            rag_service=rag_service,
            ollama_client=ollama_client
        )
        
        await monitor.complete_request(request_data["request_id"], "success", seo_result)
        
        return seo_result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ SEO –∞–Ω–∞–ª–∏–∑–µ: {e}")
        await monitor.complete_request(request_data["request_id"], "error")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ SEO –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"
        )

@router.post("/content/analyze")
async def analyze_content(
    domain: str,
    llm_router = Depends(get_llm_router),
    rag_service = Depends(get_rag_service),
    ollama_client = Depends(get_ollama_client),
    monitor = Depends(get_service_monitor)
):
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫"""
    
    request_data = await monitor.track_request("/content/analyze", f"req_{datetime.now().timestamp()}")
    
    try:
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_analysis = await content_analyzer_service.analyze_content(
            domain=domain,
            llm_router=llm_router,
            rag_service=rag_service,
            ollama_client=ollama_client
        )
        
        await monitor.complete_request(request_data["request_id"], "success", content_analysis)
        
        return content_analysis
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
        await monitor.complete_request(request_data["request_id"], "error")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {str(e)}"
        )

@router.get("/metrics")
async def get_service_metrics(monitor = Depends(get_service_monitor)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "service": "reLink Internal Linking",
        "metrics": monitor.get_effectiveness_report(),
        "timestamp": datetime.now().isoformat()
    }

@router.get("/endpoints")
async def get_endpoints():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    return {
        "service": "reLink Internal Linking",
        "endpoints": [
            "/health",
            "/api/v1/internal-links/analyze",
            "/api/v1/internal-links/recommendations", 
            "/api/v1/seo/analyze",
            "/api/v1/content/analyze",
            "/api/v1/metrics",
            "/api/v1/endpoints"
        ]
    }

@router.post("/index-domain", response_model=IndexingStatus)
async def index_domain(
    domain: str = "dagorod.ru",
    background_tasks: BackgroundTasks = None
):
    """–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–º–µ–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        service = get_linking_service()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
        if background_tasks:
            background_tasks.add_task(service.index_domain, domain)
            return IndexingStatus(
                status="started",
                message=f"–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–º–µ–Ω–∞ {domain} –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ",
                domain=domain,
                timestamp=datetime.now().isoformat()
            )
        else:
            # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            result = await service.index_domain(domain)
            return IndexingStatus(
                status="completed",
                message=f"–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–º–µ–Ω–∞ {domain} –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                domain=domain,
                timestamp=datetime.now().isoformat(),
                data=result
            )
            
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {str(e)}")

@router.get("/indexing-status/{domain}")
async def get_indexing_status(domain: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏"""
    try:
        service = get_linking_service()
        status = await service.get_indexing_status(domain)
        return status
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

@router.post("/analyze-domain", response_model=DomainAnalysisResponse)
async def analyze_domain(request: DomainAnalysisRequest):
    """–ê–Ω–∞–ª–∏–∑ –¥–æ–º–µ–Ω–∞ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫"""
    try:
        service = get_linking_service()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–º–µ–Ω
        analysis = await service.analyze_domain(
            domain=request.domain,
            include_posts=request.include_posts,
            include_recommendations=request.include_recommendations
        )
        
        return DomainAnalysisResponse(
            domain=request.domain,
            analysis=analysis,
            timestamp=datetime.now().isoformat()
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

@router.post("/generate-recommendations", response_model=SEORecommendationResponse)
async def generate_seo_recommendations(request: SEORecommendationRequest):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SEO —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        service = get_linking_service()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = await service.generate_recommendations(
            domain=request.domain,
            focus_areas=request.focus_areas,
            priority=request.priority
        )
        
        return SEORecommendationResponse(
            domain=request.domain,
            recommendations=recommendations,
            generated_at=datetime.now().isoformat()
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}")

@router.get("/internal-links/{domain}")
async def get_internal_links(domain: str, limit: int = 50):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –¥–æ–º–µ–Ω–∞"""
    try:
        service = get_linking_service()
        links = await service.get_internal_links(domain, limit=limit)
        return {
            "domain": domain,
            "internal_links": links,
            "total_count": len(links),
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫: {str(e)}")

@router.get("/posts/{domain}")
async def get_posts(domain: str, limit: int = 20):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–æ–º–µ–Ω–∞"""
    try:
        service = get_linking_service()
        posts = await service.get_posts(domain, limit=limit)
        return {
            "domain": domain,
            "posts": posts,
            "total_count": len(posts),
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {str(e)}")

@router.post("/analyze-seo")
async def analyze_seo_content(request: Dict[str, Any]):
    """–ê–Ω–∞–ª–∏–∑ SEO –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        service = get_linking_service()
        
        analysis = await service.analyze_seo_content(
            url=request.get("url"),
            title=request.get("title"),
            content=request.get("content"),
            meta_description=request.get("meta_description")
        )
        
        return {
            "url": request.get("url"),
            "analysis": analysis,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ SEO –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

@router.get("/dashboard/{domain}")
async def get_dashboard_data(domain: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
    try:
        service = get_linking_service()
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
        dashboard_data = await service.get_dashboard_data(domain)
        
        return {
            "domain": domain,
            "dashboard": dashboard_data,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞: {str(e)}")

@router.post("/export-analysis/{domain}")
async def export_analysis(domain: str, format: str = "json"):
    """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        service = get_linking_service()
        
        if format.lower() == "json":
            data = await service.export_analysis_json(domain)
            return JSONResponse(
                content=data,
                media_type="application/json",
                headers={
                    "Content-Disposition": f"attachment; filename={domain}_analysis.json"
                }
            )
        elif format.lower() == "csv":
            data = await service.export_analysis_csv(domain)
            return JSONResponse(
                content=data,
                media_type="text/csv",
                headers={
                    "Content-Disposition": f"attachment; filename={domain}_analysis.csv"
                }
            )
        else:
            raise HTTPException(status_code=400, detail="–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞")
            
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è dagorod.ru
@router.post("/analyze-dagorod")
async def analyze_dagorod_special():
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è dagorod.ru"""
    try:
        service = get_linking_service()
        
        # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –¥–æ–º–µ–Ω
        await service.index_domain("dagorod.ru")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        analysis = await service.analyze_domain("dagorod.ru", include_posts=True, include_recommendations=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = await service.generate_recommendations(
            domain="dagorod.ru",
            focus_areas=["internal_linking", "content_optimization", "technical_seo"],
            priority="high"
        )
        
        return {
            "domain": "dagorod.ru",
            "analysis": analysis,
            "recommendations": recommendations,
            "timestamp": datetime.now().isoformat(),
            "message": "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ dagorod.ru –∑–∞–≤–µ—Ä—à–µ–Ω"
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ dagorod.ru: {str(e)}") 