import React, { useState, useEffect, useCallback, useRef } from 'react'
import Header from './components/Header'
import DomainInput from './components/DomainInput'
import DomainsList from './components/DomainsList'
import AnalysisProgress from './components/AnalysisProgress'
import Recommendations from './components/Recommendations'
import Notifications from './components/Notifications'
import OllamaStatus from './components/OllamaStatus'
import { useWebSocket } from './hooks/useWebSocket'
import { useNotifications } from './hooks/useNotifications'

function App() {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [domain, setDomain] = useState('')
  const [currentView, setCurrentView] = useState('domains')
  const [domains, setDomains] = useState([])
  const [selectedDomain, setSelectedDomain] = useState(null)
  const [recommendations, setRecommendations] = useState([])
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [analysisStats, setAnalysisStats] = useState(null)
  const [analysisError, setAnalysisError] = useState(null)
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è Ollama
  const [ollamaStatus, setOllamaStatus] = useState({
    status: 'unknown',
    message: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...',
    models_count: 0,
    available_models: []
  })
  
  // AI —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [aiThoughts, setAiThoughts] = useState([])
  const [currentThought, setCurrentThought] = useState(null)
  
  // –•—É–∫–∏
  const { notifications, addNotification, removeNotification } = useNotifications()
  const { 
    connectionStatus, 
    connectWebSocket, 
    disconnectWebSocket 
  } = useWebSocket({
    onMessage: handleWebSocketMessage,
    onConnect: () => addNotification('success', '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'WebSocket –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ'),
    onDisconnect: () => addNotification('warning', '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ', '–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...'),
    onError: () => addNotification('error', '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', '–ü—Ä–æ–±–ª–µ–º–∞ —Å WebSocket')
  })

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  useEffect(() => {
    console.log('üöÄ SEO Link Recommender (Vite) –∑–∞–≥—Ä—É–∂–µ–Ω')
    
    const clientId = 'client_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9)
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    loadDomains()
    checkOllamaStatus()
    connectWebSocket(clientId)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Ollama –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const ollamaInterval = setInterval(checkOllamaStatus, 30000)
    
    return () => {
      disconnectWebSocket()
      clearInterval(ollamaInterval)
    }
  }, [])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–º–µ–Ω–æ–≤
  async function loadDomains() {
    try {
      const response = await fetch('/api/v1/domains')
      const data = await response.json()
      setDomains(data.domains || [])
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–º–µ–Ω–æ–≤:', error)
      addNotification('error', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤')
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Ollama
  async function checkOllamaStatus() {
    try {
      const response = await fetch('/api/v1/ollama_status')
      const data = await response.json()
      setOllamaStatus(data)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Ollama:', error)
      setOllamaStatus({
        status: 'error',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Ollama',
        models_count: 0,
        available_models: []
      })
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
  function handleWebSocketMessage(data) {
    console.log('üì® WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:', data)
    
    switch (data.type) {
      case 'progress':
        setAnalysisStats({
          step: data.step,
          current: data.current,
          total: data.total,
          percentage: data.percentage,
          details: data.details
        })
        break
        
      case 'ai_thinking':
        setCurrentThought({
          content: data.thought,
          stage: data.thinking_stage,
          emoji: data.emoji,
          timestamp: data.timestamp
        })
        
        setAiThoughts(prev => [...prev.slice(-9), {
          id: Date.now(),
          content: data.thought,
          stage: data.thinking_stage,
          emoji: data.emoji,
          timestamp: data.timestamp
        }])
        break
        
      case 'enhanced_ai_thinking':
        const enhancedThought = {
          id: data.thought_id,
          content: data.content,
          stage: data.stage,
          confidence: data.confidence,
          concepts: data.related_concepts,
          reasoning: data.reasoning_chain,
          timestamp: data.timestamp
        }
        
        setCurrentThought(enhancedThought)
        setAiThoughts(prev => [...prev.slice(-9), enhancedThought])
        break
        
      case 'ollama':
        if (data.info) {
          addNotification('info', 'Ollama —Å—Ç–∞—Ç—É—Å', data.info.status || '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞')
        }
        break
        
      case 'error':
        setAnalysisError(data.message)
        addNotification('error', '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞', data.details)
        setIsAnalyzing(false)
        break
        
      case 'ping':
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º ping —Å–æ–æ–±—â–µ–Ω–∏—è
        break
        
      default:
        console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', data.type)
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –¥–æ–º–µ–Ω–∞
  async function handleAnalyzeDomain(domainToAnalyze = null) {
    const targetDomain = domainToAnalyze || domain.trim()
    
    if (!targetDomain) {
      addNotification('warning', '–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω', '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–æ–º–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
      return
    }

    setIsAnalyzing(true)
    setAnalysisError(null)
    setAnalysisStats(null)
    setRecommendations([])
    setAiThoughts([])
    setCurrentThought(null)

    try {
      addNotification('info', '–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑', `–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–º–µ–Ω ${targetDomain}`)
      
      const response = await fetch('/api/v1/wp_index', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          domain: targetDomain,
          comprehensive: true,
          client_id: connectionStatus === 'connected' ? 'vite_client' : null
        })
      })

      const result = await response.json()

      if (result.status === 'success') {
        setRecommendations(result.recommendations || [])
        addNotification('success', '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω', 
          `–ù–∞–π–¥–µ–Ω–æ ${result.recommendations?.length || 0} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π`)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤
        await loadDomains()
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (result.recommendations?.length > 0) {
          setCurrentView('recommendations')
        }
      } else {
        throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞')
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–º–µ–Ω–∞:', error)
      setAnalysisError(error.message)
      addNotification('error', '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞', error.message)
    } finally {
      setIsAnalyzing(false)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-600 via-purple-700 to-blue-800">
      {/* –®–∞–ø–∫–∞ */}
      <Header />
      
      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
      <nav className="sticky top-0 z-50 bg-white/95 backdrop-blur-lg border-b border-black/5">
        <div className="max-w-6xl mx-auto px-4 py-3">
          <div className="flex justify-center gap-3">
            {[
              { id: 'domains', label: 'üåê –î–æ–º–µ–Ω—ã', icon: 'üåê' },
              { id: 'analysis', label: 'üîç –ê–Ω–∞–ª–∏–∑', icon: 'üîç' },
              { id: 'recommendations', label: 'üîó –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', icon: 'üîó', badge: recommendations.length },
              { id: 'status', label: 'ü§ñ Ollama', icon: 'ü§ñ' }
            ].map(tab => (
              <button
                key={tab.id}
                onClick={() => setCurrentView(tab.id)}
                className={`
                  flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-all duration-200
                  ${currentView === tab.id 
                    ? 'bg-blue-500 text-white shadow-lg transform scale-105' 
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200 hover:scale-102'
                  }
                `}
              >
                <span>{tab.icon}</span>
                <span>{tab.label}</span>
                {tab.badge > 0 && (
                  <span className="bg-red-500 text-white text-xs px-2 py-1 rounded-full">
                    {tab.badge}
                  </span>
                )}
              </button>
            ))}
          </div>
        </div>
      </nav>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      <Notifications 
        notifications={notifications} 
        onRemove={removeNotification} 
      />

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <main className="max-w-6xl mx-auto px-4 py-6">
        {/* –í–∫–ª–∞–¥–∫–∞ –î–æ–º–µ–Ω—ã */}
        {currentView === 'domains' && (
          <div className="space-y-6">
            <DomainInput 
              domain={domain}
              setDomain={setDomain}
              onAnalyze={handleAnalyzeDomain}
              isAnalyzing={isAnalyzing}
            />
            <DomainsList 
              domains={domains}
              onAnalyze={handleAnalyzeDomain}
              onSelect={setSelectedDomain}
              selectedDomain={selectedDomain}
            />
          </div>
        )}

        {/* –í–∫–ª–∞–¥–∫–∞ –ê–Ω–∞–ª–∏–∑ */}
        {currentView === 'analysis' && (
          <div className="space-y-6">
            {isAnalyzing && (
              <AnalysisProgress 
                stats={analysisStats}
                currentThought={currentThought}
                aiThoughts={aiThoughts}
              />
            )}
            
            {analysisError && (
              <div className="bg-red-50 border border-red-200 rounded-xl p-6">
                <div className="flex items-center gap-3">
                  <span className="text-2xl">‚ùå</span>
                  <div>
                    <h3 className="font-semibold text-red-800">–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞</h3>
                    <p className="text-red-600">{analysisError}</p>
                  </div>
                </div>
              </div>
            )}
            
            {!isAnalyzing && !analysisError && (
              <div className="text-center py-12">
                <span className="text-6xl mb-4 block">üîç</span>
                <h2 className="text-xl font-semibold text-white mb-2">–ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É</h2>
                <p className="text-white/80">–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º–µ–Ω –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "–î–æ–º–µ–Ω—ã" –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞</p>
              </div>
            )}
          </div>
        )}

        {/* –í–∫–ª–∞–¥–∫–∞ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
        {currentView === 'recommendations' && (
          <Recommendations 
            recommendations={recommendations}
            domain={selectedDomain?.name}
          />
        )}

        {/* –í–∫–ª–∞–¥–∫–∞ –°—Ç–∞—Ç—É—Å Ollama */}
        {currentView === 'status' && (
          <OllamaStatus 
            status={ollamaStatus}
            onRefresh={checkOllamaStatus}
          />
        )}
      </main>
    </div>
  )
}

export default App 