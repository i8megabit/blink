import { useState, useEffect } from 'react';
import { AppSettings } from '../types';
import { Card, CardContent, CardHeader, CardTitle } from './ui/Card';
import { Button } from './ui/Button';
import { Input } from './ui/Input';
import { cn } from '../lib/utils';
import { 
  Moon, 
  Sun, 
  Monitor,
  Bell,
  Volume2,
  RefreshCw,
  Save,
  Globe,
  Clock,
  Database,
  Zap,
  Check
} from 'lucide-react';

interface SettingsProps {
  className?: string;
  onSettingsChange?: (settings: AppSettings) => void;
}

export function Settings({ 
  className,
  onSettingsChange
}: SettingsProps) {
  const [settings, setSettings] = useState<AppSettings>({
    theme: 'system',
    language: 'ru',
    autoRefresh: true,
    refreshInterval: 30,
    notifications: true,
    sound: false
  });
  const [loading, setLoading] = useState(false);
  const [saved, setSaved] = useState(false);

  useEffect(() => {
    loadSettings();
  }, []);

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  useEffect(() => {
    applyTheme(settings.theme);
  }, [settings.theme]);

  const loadSettings = async () => {
    try {
      const response = await fetch('/api/v1/settings');
      if (response.ok) {
        const data = await response.json();
        const loadedSettings = data.settings || settings;
        setSettings(loadedSettings);
        applyTheme(loadedSettings.theme);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', err);
    }
  };

  const applyTheme = (theme: string) => {
    const root = document.documentElement;
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Ç–µ–º
    root.classList.remove('light', 'dark');
    
    if (theme === 'system') {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Ç–µ–º—É
      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      root.classList.add(systemTheme);
    } else {
      root.classList.add(theme);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('theme', theme);
  };

  const saveSettings = async () => {
    try {
      setLoading(true);
      const response = await fetch('/api/v1/settings', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ settings }),
      });

      if (response.ok) {
        setSaved(true);
        setTimeout(() => setSaved(false), 2000);
        
        if (onSettingsChange) {
          onSettingsChange(settings);
        }
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', err);
    } finally {
      setLoading(false);
    }
  };

  const updateSetting = <K extends keyof AppSettings>(
    key: K, 
    value: AppSettings[K]
  ) => {
    setSettings(prev => ({ ...prev, [key]: value }));
  };

  const themeOptions = [
    { value: 'light', label: '–°–≤–µ—Ç–ª–∞—è', icon: <Sun className="w-4 h-4" /> },
    { value: 'dark', label: '–¢–µ–º–Ω–∞—è', icon: <Moon className="w-4 h-4" /> },
    { value: 'system', label: '–°–∏—Å—Ç–µ–º–Ω–∞—è', icon: <Monitor className="w-4 h-4" /> }
  ];

  const languageOptions = [
    { value: 'ru', label: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
    { value: 'en', label: 'English', flag: 'üá∫üá∏' }
  ];

  return (
    <div className={cn("space-y-6", className)}>
      {/* –í–Ω–µ—à–Ω–∏–π –≤–∏–¥ */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Monitor className="w-5 h-5" />
            –í–Ω–µ—à–Ω–∏–π –≤–∏–¥
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <div>
            <label className="text-sm font-medium mb-3 block text-foreground">
              –¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
            </label>
            <div className="grid grid-cols-3 gap-3">
              {themeOptions.map((option) => (
                <button
                  key={option.value}
                  onClick={() => updateSetting('theme', option.value as AppSettings['theme'])}
                  className={cn(
                    "flex flex-col items-center gap-2 p-4 rounded-lg border transition-all duration-200",
                    "hover:shadow-md hover:scale-105",
                    settings.theme === option.value
                      ? "bg-primary/10 border-primary/30 text-primary shadow-md scale-105"
                      : "bg-card border-border hover:bg-accent hover:border-accent-foreground/20"
                  )}
                >
                  <div className={cn(
                    "p-2 rounded-full",
                    settings.theme === option.value 
                      ? "bg-primary/20" 
                      : "bg-muted"
                  )}>
                    {option.icon}
                  </div>
                  <span className="text-sm font-medium">{option.label}</span>
                  {settings.theme === option.value && (
                    <Check className="w-4 h-4 text-primary" />
                  )}
                </button>
              ))}
            </div>
          </div>

          <div>
            <label className="text-sm font-medium mb-3 block text-foreground">
              –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            </label>
            <div className="grid grid-cols-2 gap-3">
              {languageOptions.map((option) => (
                <button
                  key={option.value}
                  onClick={() => updateSetting('language', option.value)}
                  className={cn(
                    "flex items-center gap-3 p-3 rounded-lg border transition-all duration-200",
                    "hover:shadow-md hover:scale-105",
                    settings.language === option.value
                      ? "bg-primary/10 border-primary/30 text-primary shadow-md scale-105"
                      : "bg-card border-border hover:bg-accent hover:border-accent-foreground/20"
                  )}
                >
                  <span className="text-lg">{option.flag}</span>
                  <span className="font-medium">{option.label}</span>
                  {settings.language === option.value && (
                    <Check className="w-4 h-4 text-primary ml-auto" />
                  )}
                </button>
              ))}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Bell className="w-5 h-5" />
            –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="flex items-center justify-between p-4 rounded-lg bg-muted/50">
            <div className="flex items-center gap-3">
              <Bell className="w-5 h-5 text-muted-foreground" />
              <div>
                <p className="font-medium text-foreground">–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</p>
                <p className="text-sm text-muted-foreground">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö</p>
              </div>
            </div>
            <button
              onClick={() => updateSetting('notifications', !settings.notifications)}
              className={cn(
                "relative w-12 h-6 rounded-full transition-all duration-200",
                settings.notifications ? "bg-primary" : "bg-muted-foreground/30"
              )}
            >
              <div className={cn(
                "absolute top-0.5 w-5 h-5 bg-white rounded-full transition-all duration-200 shadow-sm",
                settings.notifications ? "translate-x-6" : "translate-x-0.5"
              )} />
            </button>
          </div>

          <div className="flex items-center justify-between p-4 rounded-lg bg-muted/50">
            <div className="flex items-center gap-3">
              <Volume2 className="w-5 h-5 text-muted-foreground" />
              <div>
                <p className="font-medium text-foreground">–ó–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</p>
                <p className="text-sm text-muted-foreground">–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –∑–≤—É–∫ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö</p>
              </div>
            </div>
            <button
              onClick={() => updateSetting('sound', !settings.sound)}
              className={cn(
                "relative w-12 h-6 rounded-full transition-all duration-200",
                settings.sound ? "bg-primary" : "bg-muted-foreground/30"
              )}
            >
              <div className={cn(
                "absolute top-0.5 w-5 h-5 bg-white rounded-full transition-all duration-200 shadow-sm",
                settings.sound ? "translate-x-6" : "translate-x-0.5"
              )} />
            </button>
          </div>
        </CardContent>
      </Card>

      {/* –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <RefreshCw className="w-5 h-5" />
            –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="flex items-center justify-between p-4 rounded-lg bg-muted/50">
            <div className="flex items-center gap-3">
              <Clock className="w-5 h-5 text-muted-foreground" />
              <div>
                <p className="font-medium text-foreground">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</p>
                <p className="text-sm text-muted-foreground">–û–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</p>
              </div>
            </div>
            <button
              onClick={() => updateSetting('autoRefresh', !settings.autoRefresh)}
              className={cn(
                "relative w-12 h-6 rounded-full transition-all duration-200",
                settings.autoRefresh ? "bg-primary" : "bg-muted-foreground/30"
              )}
            >
              <div className={cn(
                "absolute top-0.5 w-5 h-5 bg-white rounded-full transition-all duration-200 shadow-sm",
                settings.autoRefresh ? "translate-x-6" : "translate-x-0.5"
              )} />
            </button>
          </div>

          {settings.autoRefresh && (
            <div className="space-y-2">
              <label className="text-sm font-medium text-foreground">
                –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)
              </label>
              <Input
                type="number"
                min="10"
                max="300"
                value={settings.refreshInterval}
                onChange={(e) => updateSetting('refreshInterval', parseInt(e.target.value) || 30)}
                className="w-full"
              />
              <p className="text-xs text-muted-foreground">
                –ú–∏–Ω–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥, –º–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç
              </p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Database className="w-5 h-5" />
            –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
              <Globe className="w-5 h-5 text-blue-500" />
              <div>
                <p className="text-sm font-medium">–í–µ—Ä—Å–∏—è API</p>
                <p className="text-xs text-gray-500">v1.0.0</p>
              </div>
            </div>
            <div className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
              <Zap className="w-5 h-5 text-green-500" />
              <div>
                <p className="text-sm font-medium">–°—Ç–∞—Ç—É—Å Ollama</p>
                <p className="text-xs text-gray-500">–ü–æ–¥–∫–ª—é—á–µ–Ω–æ</p>
              </div>
            </div>
            <div className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
              <Clock className="w-5 h-5 text-purple-500" />
              <div>
                <p className="text-sm font-medium">–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</p>
                <p className="text-xs text-gray-500">2—á 15–º</p>
              </div>
            </div>
            <div className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
              <Database className="w-5 h-5 text-orange-500" />
              <div>
                <p className="text-sm font-medium">–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö</p>
                <p className="text-xs text-gray-500">PostgreSQL</p>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
      <div className="flex justify-end">
        <Button
          onClick={saveSettings}
          disabled={loading}
          className="min-w-[120px]"
        >
          {loading ? (
            <>
              <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
              –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
            </>
          ) : saved ? (
            <>
              <Check className="w-4 h-4 mr-2" />
              –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!
            </>
          ) : (
            <>
              <Save className="w-4 h-4 mr-2" />
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </>
          )}
        </Button>
      </div>
    </div>
  );
} 