#!/bin/bash

# üöÄ –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô DOCKER BUILD –°–ö–†–ò–ü–¢
# –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å BuildKit, pull –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π

set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ –Ω–∞—á–∞–ª–µ)
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
COMPOSE_FILE="${PROJECT_ROOT}/config/docker-compose.yml"
ENV_FILE="${PROJECT_ROOT}/config/docker.env"

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ docker.env
if [ -f "$ENV_FILE" ]; then
    log_info "–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ $ENV_FILE"
    export $(grep -v '^#' "$ENV_FILE" | xargs)
fi

# –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã –¥–ª—è pull
BASE_IMAGES=(
    "python:3.11.9-slim-bullseye"
    "node:20.11.1-alpine"
    "nginx:1.25-alpine"
    "postgres:16"
    "redis:7-alpine"
    "ollama/ollama:latest"
    "prom/prometheus:latest"
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Docker
    DOCKER_VERSION=$(docker --version | cut -d' ' -f3 | cut -d'.' -f1)
    if [ "$DOCKER_VERSION" -lt 20 ]; then
        log_warning "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è Docker 20+ –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ BuildKit"
    fi
    
    log_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ BuildKit –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_buildkit_config() {
    log_info "–ó–∞–≥—Ä—É–∑–∫–∞ BuildKit –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: docker.env > docker-buildkit.env > –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if [ -f "$ENV_FILE" ]; then
        source "$ENV_FILE"
        log_success "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ $ENV_FILE"
    elif [ -f "${SCRIPT_DIR}/docker-buildkit.env" ]; then
        source "${SCRIPT_DIR}/docker-buildkit.env"
        log_success "BuildKit –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ docker-buildkit.env"
    else
        log_warning "–§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        export DOCKER_BUILDKIT=1
        export COMPOSE_DOCKER_CLI_BUILD=1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–≤–æ–¥ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    log_info "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ BuildKit:"
    log_info "  DOCKER_BUILDKIT: ${DOCKER_BUILDKIT:-–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω}"
    log_info "  COMPOSE_DOCKER_CLI_BUILD: ${COMPOSE_DOCKER_CLI_BUILD:-–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω}"
    log_info "  COMPOSE_FILE: ${COMPOSE_FILE:-–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è pull –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤
pull_base_images() {
    log_info "Pull –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
    
    for image in "${BASE_IMAGES[@]}"; do
        log_info "Pull $image..."
        if docker pull "$image" > /dev/null 2>&1; then
            log_success "‚úÖ $image"
        else
            log_warning "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å pull $image (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ)"
        fi
    done
    
    log_success "Pull –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ Docker
cleanup_docker() {
    local force=${1:-false}
    
    if [ "$force" = true ]; then
        log_info "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker..."
        docker system prune -af
        docker builder prune -af
    else
        log_info "–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö Docker —Ä–µ—Å—É—Ä—Å–æ–≤..."
        docker system prune -f
        docker builder prune -f
    fi
    
    log_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏ —Å BuildKit
build_with_buildkit() {
    local service=${1:-""}
    local no_cache=${2:-false}
    local pull=${3:-true}
    
    log_info "–°–±–æ—Ä–∫–∞ —Å BuildKit..."
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã
    local cmd="docker-compose -f $COMPOSE_FILE build"
    
    if [ -n "$service" ]; then
        cmd="$cmd $service"
        log_info "–°–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: $service"
    fi
    
    if [ "$no_cache" = true ]; then
        cmd="$cmd --no-cache"
        log_info "–°–±–æ—Ä–∫–∞ –±–µ–∑ –∫–µ—à–∞"
    fi
    
    if [ "$pull" = true ]; then
        cmd="$cmd --pull"
        log_info "–°–±–æ—Ä–∫–∞ —Å pull –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤"
    fi
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏
    log_info "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: $cmd"
    if eval "$cmd"; then
        log_success "–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
    else
        log_error "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±—Ä–∞–∑–æ–≤
analyze_images() {
    log_info "–ê–Ω–∞–ª–∏–∑ Docker –æ–±—Ä–∞–∑–æ–≤..."
    
    echo -e "\n${BLUE}üìä –†–∞–∑–º–µ—Ä—ã –æ–±—Ä–∞–∑–æ–≤:${NC}"
    docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}" | grep -E "(relink|eberil)"
    
    echo -e "\n${BLUE}üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞:${NC}"
    docker system df
    
    log_success "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
health_check() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    sleep 10
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    local services=("backend" "frontend" "docs" "testing")
    
    for service in "${services[@]}"; do
        log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ $service..."
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–∞
        local port=""
        case $service in
            "backend") port="8000" ;;
            "frontend") port="3000" ;;
            "docs") port="8001" ;;
            "testing") port="8003" ;;
        esac
        
        if [ -n "$port" ]; then
            if curl -f "http://localhost:$port/health" > /dev/null 2>&1 || \
               curl -f "http://localhost:$port/api/v1/health" > /dev/null 2>&1 || \
               curl -f "http://localhost:$port/" > /dev/null 2>&1; then
                log_success "‚úÖ $service (–ø–æ—Ä—Ç $port)"
            else
                log_warning "‚ö†Ô∏è  $service (–ø–æ—Ä—Ç $port) - –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
            fi
        fi
    done
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
start_services() {
    log_info "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    if docker-compose -f "$COMPOSE_FILE" up -d; then
        log_success "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
    else
        log_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
stop_services() {
    log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    if docker-compose -f "$COMPOSE_FILE" down; then
        log_success "–°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    else
        log_error "–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
restart_services() {
    log_info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    stop_services
    start_services
    log_success "–°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
show_logs() {
    local service=${1:-""}
    
    if [ -n "$service" ]; then
        log_info "–õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞ $service..."
        docker-compose -f "$COMPOSE_FILE" logs -f "$service"
    else
        log_info "–õ–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker-compose -f "$COMPOSE_FILE" logs -f
    fi
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    local command=${1:-"help"}
    
    case $command in
        "help"|"-h"|"--help")
            echo -e "${BLUE}üöÄ reLink Professional Build Script${NC}"
            echo ""
            echo -e "${GREEN}–ö–æ–º–∞–Ω–¥—ã:${NC}"
            echo "  build [service]     - –°–±–æ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"
            echo "  build-no-cache      - –°–±–æ—Ä–∫–∞ –±–µ–∑ –∫–µ—à–∞"
            echo "  pull                - Pull –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤"
            echo "  up                  - –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"
            echo "  down                - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"
            echo "  restart             - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"
            echo "  logs [service]      - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
            echo "  health              - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤"
            echo "  analyze             - –ê–Ω–∞–ª–∏–∑ Docker –æ–±—Ä–∞–∑–æ–≤"
            echo "  cleanup             - –û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤"
            echo "  cleanup-force       - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞"
            echo "  quick-start         - –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç (—Å–±–æ—Ä–∫–∞ + –∑–∞–ø—É—Å–∫ + –ø—Ä–æ–≤–µ—Ä–∫–∞)"
            echo "  dev                 - –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ + –ª–æ–≥–∏)"
            echo "  prod                - –ü—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º (—Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏)"
            echo ""
            echo -e "${GREEN}–ü—Ä–∏–º–µ—Ä—ã:${NC}"
            echo "  $0 build backend    - –°–±–æ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ backend"
            echo "  $0 build-no-cache   - –°–±–æ—Ä–∫–∞ –±–µ–∑ –∫–µ—à–∞"
            echo "  $0 logs backend     - –õ–æ–≥–∏ —Ç–æ–ª—å–∫–æ backend"
            echo "  $0 quick-start      - –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∑–∞–ø—É—Å–∫–∞"
            ;;
        "build")
            check_dependencies
            load_buildkit_config
            pull_base_images
            build_with_buildkit "${2:-}" false true
            analyze_images
            ;;
        "build-no-cache")
            check_dependencies
            load_buildkit_config
            pull_base_images
            build_with_buildkit "${2:-}" true true
            analyze_images
            ;;
        "pull")
            check_dependencies
            pull_base_images
            ;;
        "up")
            check_dependencies
            load_buildkit_config
            start_services
            ;;
        "down")
            check_dependencies
            stop_services
            ;;
        "restart")
            check_dependencies
            load_buildkit_config
            restart_services
            ;;
        "logs")
            check_dependencies
            show_logs "${2:-}"
            ;;
        "health")
            check_dependencies
            health_check
            ;;
        "analyze")
            check_dependencies
            analyze_images
            ;;
        "cleanup")
            check_dependencies
            cleanup_docker false
            ;;
        "cleanup-force")
            check_dependencies
            cleanup_docker true
            ;;
        "quick-start")
            check_dependencies
            load_buildkit_config
            pull_base_images
            build_with_buildkit "" false true
            start_services
            health_check
            analyze_images
            log_success "üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!"
            ;;
        "dev")
            check_dependencies
            load_buildkit_config
            build_with_buildkit "" true true
            start_services
            show_logs
            ;;
        "prod")
            check_dependencies
            load_buildkit_config
            pull_base_images
            build_with_buildkit "" false true
            start_services
            health_check
            analyze_images
            log_success "üöÄ –ü—Ä–æ–¥–∞–∫—à–Ω —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞!"
            ;;
        *)
            log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command"
            echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '$0 help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
            exit 1
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@" 