#!/bin/bash

# üöÄ –£–ú–ù–´–ô –ê–í–¢–û–ö–û–ú–ú–ò–¢ –° –ò–ù–ö–†–ï–ú–ï–ù–¢–û–ú –í–ï–†–°–ò–ò
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–º–º–∏—Ç–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –≤–µ—Ä—Å–∏—é

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[AUTO-COMMIT]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    error "–ù–µ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
    exit 1
fi

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–∏
CURRENT_BRANCH=$(git branch --show-current)
log "–¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: $CURRENT_BRANCH"

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –Ω–µ –≤ detached HEAD
if [ "$CURRENT_BRANCH" = "" ]; then
    error "Detached HEAD - –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç –æ—Ç–∫–ª—é—á–µ–Ω"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –Ω–µ –≤ main/master –≤–µ—Ç–∫–µ
if [[ "$CURRENT_BRANCH" == "main" || "$CURRENT_BRANCH" == "master" ]]; then
    warning "–ê–≤—Ç–æ–∫–æ–º–º–∏—Ç –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è main/master –≤–µ—Ç–∫–∏"
    exit 0
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
get_current_version() {
    if [ -f "VERSION" ]; then
        cat VERSION
    else
        echo "0.0.0"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ patch –≤–µ—Ä—Å–∏–∏
increment_patch_version() {
    local version=$1
    local major=$(echo $version | cut -d. -f1)
    local minor=$(echo $version | cut -d. -f2)
    local patch=$(echo $version | cut -d. -f3)
    
    # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç patch –≤–µ—Ä—Å–∏–∏
    patch=$((patch + 1))
    
    echo "$major.$minor.$patch"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
check_app_changes() {
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–∏—Å–∫–ª—é—á–∞—è –≤—Ä–µ–º–µ–Ω–Ω—ã–µ, –ª–æ–≥–∏, –∫—ç—à –∏ —Ç.–¥.)
    local app_patterns=(
        "*.py"
        "*.ts"
        "*.tsx"
        "*.js"
        "*.jsx"
        "*.json"
        "*.yml"
        "*.yaml"
        "*.md"
        "*.txt"
        "*.sh"
        "*.sql"
        "*.html"
        "*.css"
        "*.scss"
        "Dockerfile*"
        "docker-compose*.yml"
        "requirements*.txt"
        "package.json"
        "pyproject.toml"
        "Makefile"
        "VERSION"
    )
    
    # –ò—Å–∫–ª—é—á–µ–Ω–∏—è (—Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
    local exclude_patterns=(
        "*.log"
        "*.tmp"
        "*.temp"
        "*.cache"
        "*.pyc"
        "*.pyo"
        "__pycache__"
        "node_modules"
        ".git"
        ".venv"
        ".env"
        "*.pid"
        "*.lock"
        ".DS_Store"
        "Thumbs.db"
        "*.swp"
        "*.swo"
        "*~"
        ".pytest_cache"
        ".coverage"
        "htmlcov"
        "dist"
        "build"
        "*.egg-info"
        "*.so"
        "*.dll"
        "*.exe"
        "*.bin"
        "*.gguf"
        "data/"
        "logs/"
        "screenshots/"
        "test-results/"
        ".docker_cache/"
        ".cursor/"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º staged –∏–∑–º–µ–Ω–µ–Ω–∏—è
    local staged_changes=$(git diff --cached --name-only 2>/dev/null || true)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º unstaged –∏–∑–º–µ–Ω–µ–Ω–∏—è
    local unstaged_changes=$(git diff --name-only 2>/dev/null || true)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    local all_changes=$(echo -e "$staged_changes\n$unstaged_changes" | sort -u | grep -v '^$')
    
    if [ -z "$all_changes" ]; then
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    local app_changes=()
    
    while IFS= read -r file; do
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if [ -z "$file" ]; then
            continue
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        local should_exclude=false
        for pattern in "${exclude_patterns[@]}"; do
            if [[ "$file" == $pattern || "$file" =~ $pattern ]]; then
                should_exclude=true
                break
            fi
        done
        
        if [ "$should_exclude" = true ]; then
            continue
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        for pattern in "${app_patterns[@]}"; do
            if [[ "$file" == $pattern || "$file" =~ $pattern ]]; then
                app_changes+=("$file")
                break
            fi
        done
    done <<< "$all_changes"
    
    if [ ${#app_changes[@]} -gt 0 ]; then
        log "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:"
        printf '%s\n' "${app_changes[@]}" | sed 's/^/  - /'
        return 0
    else
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞
create_commit() {
    local new_version=$1
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
    echo "$new_version" > VERSION
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    git add .
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
    git commit -m "v$new_version" --no-verify
    
    success "–ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω: v$new_version"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è force push
force_push() {
    local branch=$1
    
    log "–í—ã–ø–æ–ª–Ω—è–µ–º force push –≤ –≤–µ—Ç–∫—É $branch"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    if ! git remote get-url origin > /dev/null 2>&1; then
        warning "–ù–µ—Ç —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è origin"
        return 0
    fi
    
    # Force push
    git push origin "$branch" --force-with-lease
    
    success "Force push –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if ! check_app_changes; then
        log "–ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
        exit 0
    fi
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
    local current_version=$(get_current_version)
    log "–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: $current_version"
    
    # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º patch –≤–µ—Ä—Å–∏—é
    local new_version=$(increment_patch_version "$current_version")
    log "–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: $new_version"
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
    create_commit "$new_version"
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º force push
    force_push "$CURRENT_BRANCH"
    
    success "–ê–≤—Ç–æ–∫–æ–º–º–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏
main "$@" 