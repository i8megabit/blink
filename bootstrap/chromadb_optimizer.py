"""
üóÑÔ∏è –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä ChromaDB
Production-ready –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è reLink
"""

import asyncio
import structlog
from typing import Dict, Any, List, Optional, Tuple
import chromadb
from chromadb.config import Settings, HttpClientSettings
from chromadb.api.models.Collection import Collection
import numpy as np
from dataclasses import dataclass
import time
import hashlib
import json

from .config import get_settings

logger = structlog.get_logger()

@dataclass
class ChromaDBConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ChromaDB –¥–ª—è production"""
    host: str = "chromadb"
    port: int = 8000
    ssl: bool = False
    auth_token: Optional[str] = None
    timeout: int = 30
    max_retries: int = 3
    batch_size: int = 100
    embedding_dimension: int = 1536
    distance_metric: str = "cosine"
    collection_metadata: Dict[str, Any] = None

class ChromaDBOptimizer:
    """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä ChromaDB"""
    
    def __init__(self):
        self.settings = get_settings()
        self.config = ChromaDBConfig(
            host=self.settings.CHROMADB_HOST,
            port=self.settings.CHROMADB_PORT,
            auth_token=getattr(self.settings, 'CHROMADB_AUTH_TOKEN', None)
        )
        self.client: Optional[chromadb.Client] = None
        self.collections_cache: Dict[str, Collection] = {}
        self.performance_metrics: Dict[str, Any] = {}
        
        self._initialize_client()
        logger.info("ChromaDB Optimizer initialized", config=self.config)
    
    def _initialize_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è production
            client_settings = HttpClientSettings(
                host=self.config.host,
                port=self.config.port,
                ssl=self.config.ssl,
                headers={
                    "X-Chroma-Token": self.config.auth_token
                } if self.config.auth_token else {},
                timeout=self.config.timeout
            )
            
            self.client = chromadb.HttpClient(settings=client_settings)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            self.client.heartbeat()
            logger.info("ChromaDB client connected successfully")
            
        except Exception as e:
            logger.error("Failed to initialize ChromaDB client", error=str(e))
            self.client = None
    
    async def create_optimized_collection(
        self, 
        name: str, 
        metadata: Optional[Dict[str, Any]] = None
    ) -> Optional[Collection]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
        
        if not self.client:
            logger.error("ChromaDB client not initialized")
            return None
        
        try:
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            collection_metadata = {
                "description": f"Optimized collection for {name}",
                "created_by": "reLink",
                "optimization_level": "production",
                "embedding_dimension": self.config.embedding_dimension,
                "distance_metric": self.config.distance_metric,
                **(metadata or {})
            }
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            collection = self.client.create_collection(
                name=name,
                metadata=collection_metadata,
                embedding_function=None  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
            )
            
            self.collections_cache[name] = collection
            
            logger.info("Optimized collection created", 
                       name=name, 
                       metadata=collection_metadata)
            
            return collection
            
        except Exception as e:
            logger.error("Failed to create optimized collection", 
                        error=str(e), name=name)
            return None
    
    async def batch_add_documents(
        self, 
        collection_name: str,
        documents: List[Dict[str, Any]],
        batch_size: Optional[int] = None
    ) -> Dict[str, Any]:
        """–ë–∞—Ç—á–µ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
        
        if not self.client:
            return {"error": "ChromaDB not initialized"}
        
        batch_size = batch_size or self.config.batch_size
        start_time = time.time()
        
        try:
            collection = self._get_collection(collection_name)
            if not collection:
                return {"error": f"Collection {collection_name} not found"}
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏
            batches = [documents[i:i + batch_size] 
                      for i in range(0, len(documents), batch_size)]
            
            total_added = 0
            batch_metrics = []
            
            for i, batch in enumerate(batches):
                batch_start = time.time()
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–∞—Ç—á–∞
                texts = []
                metadatas = []
                ids = []
                
                for doc in batch:
                    texts.append(doc.get('text', doc.get('content', str(doc))))
                    metadatas.append(doc.get('metadata', {}))
                    ids.append(doc.get('id', self._generate_document_id(doc)))
                
                # –î–æ–±–∞–≤–ª—è–µ–º –±–∞—Ç—á
                collection.add(
                    documents=texts,
                    metadatas=metadatas,
                    ids=ids
                )
                
                batch_duration = time.time() - batch_start
                batch_metrics.append({
                    "batch_index": i,
                    "documents_count": len(batch),
                    "duration_seconds": batch_duration,
                    "documents_per_second": len(batch) / batch_duration
                })
                
                total_added += len(batch)
                
                logger.info("Batch added", 
                           batch_index=i,
                           documents_count=len(batch),
                           duration_seconds=batch_duration)
            
            total_duration = time.time() - start_time
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self.performance_metrics[f"batch_add_{collection_name}"] = {
                "total_documents": total_added,
                "total_duration": total_duration,
                "average_documents_per_second": total_added / total_duration,
                "batch_metrics": batch_metrics,
                "timestamp": time.time()
            }
            
            return {
                "success": True,
                "total_added": total_added,
                "total_duration": total_duration,
                "average_documents_per_second": total_added / total_duration,
                "batch_metrics": batch_metrics
            }
            
        except Exception as e:
            logger.error("Batch add documents failed", 
                        error=str(e), 
                        collection_name=collection_name)
            return {"error": str(e)}
    
    async def optimized_search(
        self,
        collection_name: str,
        query: str,
        top_k: int = 5,
        filter_metadata: Optional[Dict[str, Any]] = None,
        include_metadata: bool = True
    ) -> List[Dict[str, Any]]:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        
        if not self.client:
            return []
        
        start_time = time.time()
        
        try:
            collection = self._get_collection(collection_name)
            if not collection:
                return []
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
            search_params = {
                "query_texts": [query],
                "n_results": top_k,
                "include": ["metadatas", "distances"] if include_metadata else ["distances"]
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            if filter_metadata:
                search_params["where"] = filter_metadata
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            results = collection.query(**search_params)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            formatted_results = []
            if results['documents'] and results['documents'][0]:
                for i, doc in enumerate(results['documents'][0]):
                    result = {
                        'document': doc,
                        'id': results['ids'][0][i] if results['ids'] and results['ids'][0] else None,
                        'distance': results['distances'][0][i] if results['distances'] and results['distances'][0] else None,
                        'relevance_score': self._calculate_relevance_score(
                            results['distances'][0][i] if results['distances'] and results['distances'][0] else 1.0
                        )
                    }
                    
                    if include_metadata and results['metadatas'] and results['metadatas'][0]:
                        result['metadata'] = results['metadatas'][0][i]
                    
                    formatted_results.append(result)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            formatted_results.sort(key=lambda x: x['relevance_score'], reverse=True)
            
            search_duration = time.time() - start_time
            
            # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–∏—Å–∫–∞
            logger.info("Optimized search completed",
                       collection_name=collection_name,
                       query_length=len(query),
                       results_count=len(formatted_results),
                       duration_seconds=search_duration)
            
            return formatted_results
            
        except Exception as e:
            logger.error("Optimized search failed",
                        error=str(e),
                        collection_name=collection_name)
            return []
    
    def _get_collection(self, name: str) -> Optional[Collection]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if name in self.collections_cache:
            return self.collections_cache[name]
        
        try:
            collection = self.client.get_collection(name)
            self.collections_cache[name] = collection
            return collection
        except:
            return None
    
    def _generate_document_id(self, document: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        content = str(document.get('text', document.get('content', str(document))))
        return hashlib.md5(content.encode()).hexdigest()[:16]
    
    def _calculate_relevance_score(self, distance: float) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è"""
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å (0-1)
        # –ú–µ–Ω—å—à–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ = –±–æ–ª—å—à–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
        return max(0.0, 1.0 - distance)
    
    async def get_collection_stats(self, collection_name: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
        
        if not self.client:
            return {"error": "ChromaDB not initialized"}
        
        try:
            collection = self._get_collection(collection_name)
            if not collection:
                return {"error": f"Collection {collection_name} not found"}
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            count = collection.count()
            metadata = collection.metadata
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            sample_docs = collection.peek(limit=100)
            metadata_keys = set()
            if sample_docs['metadatas']:
                for doc_metadata in sample_docs['metadatas']:
                    if doc_metadata:
                        metadata_keys.update(doc_metadata.keys())
            
            return {
                "collection_name": collection_name,
                "document_count": count,
                "metadata": metadata,
                "metadata_keys": list(metadata_keys),
                "sample_documents": len(sample_docs['documents']) if sample_docs['documents'] else 0,
                "embedding_dimension": metadata.get("embedding_dimension", "unknown"),
                "distance_metric": metadata.get("distance_metric", "unknown")
            }
            
        except Exception as e:
            logger.error("Failed to get collection stats",
                        error=str(e),
                        collection_name=collection_name)
            return {"error": str(e)}
    
    async def optimize_collection(self, collection_name: str) -> Dict[str, Any]:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        
        if not self.client:
            return {"error": "ChromaDB not initialized"}
        
        try:
            collection = self._get_collection(collection_name)
            if not collection:
                return {"error": f"Collection {collection_name} not found"}
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await self.get_collection_stats(collection_name)
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            recommendations = []
            
            if stats.get("document_count", 0) > 10000:
                recommendations.append("Consider sharding for large collections")
            
            if stats.get("document_count", 0) < 100:
                recommendations.append("Collection is small, consider batching additions")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            perf_key = f"batch_add_{collection_name}"
            if perf_key in self.performance_metrics:
                perf = self.performance_metrics[perf_key]
                if perf["average_documents_per_second"] < 10:
                    recommendations.append("Consider reducing batch size for better performance")
            
            return {
                "collection_name": collection_name,
                "current_stats": stats,
                "recommendations": recommendations,
                "optimization_status": "analyzed"
            }
            
        except Exception as e:
            logger.error("Failed to optimize collection",
                        error=str(e),
                        collection_name=collection_name)
            return {"error": str(e)}
    
    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        
        if not self.client:
            return {
                "status": "unhealthy",
                "error": "ChromaDB client not initialized"
            }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            heartbeat = self.client.heartbeat()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π
            collections = self.client.list_collections()
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            performance_summary = {}
            for key, metrics in self.performance_metrics.items():
                if "batch_add" in key:
                    performance_summary[key] = {
                        "total_documents": metrics["total_documents"],
                        "average_documents_per_second": metrics["average_documents_per_second"]
                    }
            
            return {
                "status": "healthy",
                "chromadb_connected": True,
                "collections_count": len(collections),
                "collections": [col.name for col in collections],
                "performance_summary": performance_summary,
                "config": {
                    "host": self.config.host,
                    "port": self.config.port,
                    "batch_size": self.config.batch_size,
                    "embedding_dimension": self.config.embedding_dimension
                }
            }
            
        except Exception as e:
            logger.error("ChromaDB health check failed", error=str(e))
            return {
                "status": "unhealthy",
                "error": str(e)
            }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
_chromadb_optimizer: Optional[ChromaDBOptimizer] = None

def get_chromadb_optimizer() -> ChromaDBOptimizer:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ ChromaDB –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞"""
    global _chromadb_optimizer
    if _chromadb_optimizer is None:
        _chromadb_optimizer = ChromaDBOptimizer()
    return _chromadb_optimizer 