"""
üöÄ –ú–û–î–ï–õ–ò –ë–ï–ù–ß–ú–ê–†–ö –ú–ò–ö–†–û–°–ï–†–í–ò–°–ê
Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏ API
"""

from datetime import datetime
from typing import List, Dict, Optional, Any, Union
from enum import Enum
from pydantic import BaseModel, Field, validator, root_validator
from pydantic.types import UUID4
import uuid


class BenchmarkType(str, Enum):
    """–¢–∏–ø—ã –±–µ–Ω—á–º–∞—Ä–∫–æ–≤."""
    SEO_BASIC = "seo_basic"
    SEO_ADVANCED = "seo_advanced"
    PERFORMANCE = "performance"
    QUALITY = "quality"
    COMPREHENSIVE = "comprehensive"
    CUSTOM = "custom"


class ModelType(str, Enum):
    """–¢–∏–ø—ã –º–æ–¥–µ–ª–µ–π."""
    LLAMA2 = "llama2"
    MISTRAL = "mistral"
    CODELLAMA = "codellama"
    NEURAL_CHAT = "neural-chat"
    CUSTOM = "custom"


class BenchmarkStatus(str, Enum):
    """–°—Ç–∞—Ç—É—Å—ã –±–µ–Ω—á–º–∞—Ä–∫–∞."""
    PENDING = "pending"
    RUNNING = "running"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"


class MetricType(str, Enum):
    """–¢–∏–ø—ã –º–µ—Ç—Ä–∏–∫."""
    RESPONSE_TIME = "response_time"
    ACCURACY = "accuracy"
    QUALITY = "quality"
    RELIABILITY = "reliability"
    THROUGHPUT = "throughput"
    MEMORY_USAGE = "memory_usage"
    CPU_USAGE = "cpu_usage"


# –ë–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏
class BaseBenchmarkModel(BaseModel):
    """–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–∞."""
    
    class Config:
        json_encoders = {
            datetime: lambda v: v.isoformat(),
            UUID4: lambda v: str(v)
        }


# –ú–æ–¥–µ–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
class BenchmarkRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞."""
    name: str = Field(..., min_length=1, max_length=100, description="–ù–∞–∑–≤–∞–Ω–∏–µ –±–µ–Ω—á–º–∞—Ä–∫–∞")
    description: Optional[str] = Field(None, max_length=500, description="–û–ø–∏—Å–∞–Ω–∏–µ –±–µ–Ω—á–º–∞—Ä–∫–∞")
    benchmark_type: BenchmarkType = Field(..., description="–¢–∏–ø –±–µ–Ω—á–º–∞—Ä–∫–∞")
    models: List[str] = Field(..., min_items=1, max_items=10, description="–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    iterations: int = Field(default=3, ge=1, le=20, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π")
    timeout: Optional[int] = Field(None, ge=30, le=1800, description="–¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    parameters: Optional[Dict[str, Any]] = Field(default_factory=dict, description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    client_id: Optional[str] = Field(None, description="ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è WebSocket")
    
    @validator('models')
    def validate_models(cls, v):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π."""
        if not v:
            raise ValueError("–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return [model.lower().strip() for model in v]
    
    @validator('iterations')
    def validate_iterations(cls, v):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Ç–µ—Ä–∞—Ü–∏–π."""
        if v < 1:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        if v > 20:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 20")
        return v


class ModelConfigRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–∏."""
    model_name: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    display_name: Optional[str] = Field(None, description="–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è")
    description: Optional[str] = Field(None, description="–û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    model_type: ModelType = Field(..., description="–¢–∏–ø –º–æ–¥–µ–ª–∏")
    default_parameters: Optional[Dict[str, Any]] = Field(default_factory=dict, description="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    benchmark_parameters: Optional[Dict[str, Any]] = Field(default_factory=dict, description="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–∞")
    is_active: bool = Field(default=True, description="–ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å")
    
    @validator('model_name')
    def validate_model_name(cls, v):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏."""
        if not v.strip():
            raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return v.strip().lower()


class BenchmarkFilterRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤."""
    benchmark_type: Optional[BenchmarkType] = Field(None, description="–¢–∏–ø –±–µ–Ω—á–º–∞—Ä–∫–∞")
    model_name: Optional[str] = Field(None, description="–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    status: Optional[BenchmarkStatus] = Field(None, description="–°—Ç–∞—Ç—É—Å –±–µ–Ω—á–º–∞—Ä–∫–∞")
    date_from: Optional[datetime] = Field(None, description="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞")
    date_to: Optional[datetime] = Field(None, description="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è")
    limit: int = Field(default=50, ge=1, le=1000, description="–õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    offset: int = Field(default=0, ge=0, description="–°–º–µ—â–µ–Ω–∏–µ")


# –ú–æ–¥–µ–ª–∏ –º–µ—Ç—Ä–∏–∫
class PerformanceMetrics(BaseModel):
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    response_time_avg: float = Field(..., ge=0, description="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (—Å–µ–∫)")
    response_time_min: float = Field(..., ge=0, description="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (—Å–µ–∫)")
    response_time_max: float = Field(..., ge=0, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (—Å–µ–∫)")
    response_time_std: float = Field(..., ge=0, description="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞")
    tokens_per_second: float = Field(..., ge=0, description="–¢–æ–∫–µ–Ω–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É")
    throughput: float = Field(..., ge=0, description="–ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å (–∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫)")
    memory_usage_mb: float = Field(..., ge=0, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ (–ú–ë)")
    cpu_usage_percent: float = Field(..., ge=0, le=100, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU (%)")


class QualityMetrics(BaseModel):
    """–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞."""
    accuracy_score: float = Field(..., ge=0, le=1, description="–û—Ü–µ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏")
    relevance_score: float = Field(..., ge=0, le=1, description="–û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏")
    coherence_score: float = Field(..., ge=0, le=1, description="–û—Ü–µ–Ω–∫–∞ —Å–≤—è–∑–Ω–æ—Å—Ç–∏")
    fluency_score: float = Field(..., ge=0, le=1, description="–û—Ü–µ–Ω–∫–∞ –±–µ–≥–ª–æ—Å—Ç–∏")
    semantic_similarity: float = Field(..., ge=0, le=1, description="–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ")
    hallucination_rate: float = Field(..., ge=0, le=1, description="–ß–∞—Å—Ç–æ—Ç–∞ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π")
    factual_accuracy: float = Field(..., ge=0, le=1, description="–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å")


class SEOMetrics(BaseModel):
    """SEO-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏."""
    seo_understanding: float = Field(..., ge=0, le=1, description="–ü–æ–Ω–∏–º–∞–Ω–∏–µ SEO")
    anchor_optimization: float = Field(..., ge=0, le=1, description="–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–Ω–∫–æ—Ä–æ–≤")
    semantic_relevance: float = Field(..., ge=0, le=1, description="–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å")
    internal_linking_strategy: float = Field(..., ge=0, le=1, description="–°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫")
    keyword_density: float = Field(..., ge=0, le=1, description="–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
    content_quality: float = Field(..., ge=0, le=1, description="–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    user_intent_alignment: float = Field(..., ge=0, le=1, description="–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


class ReliabilityMetrics(BaseModel):
    """–ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏."""
    success_rate: float = Field(..., ge=0, le=1, description="–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    error_rate: float = Field(..., ge=0, le=1, description="–ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫")
    timeout_rate: float = Field(..., ge=0, le=1, description="–ü—Ä–æ—Ü–µ–Ω—Ç —Ç–∞–π–º–∞—É—Ç–æ–≤")
    consistency_score: float = Field(..., ge=0, le=1, description="–û—Ü–µ–Ω–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏")
    stability_score: float = Field(..., ge=0, le=1, description="–û—Ü–µ–Ω–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏")


class BenchmarkMetrics(BaseModel):
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –±–µ–Ω—á–º–∞—Ä–∫–∞."""
    performance: PerformanceMetrics = Field(..., description="–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    quality: QualityMetrics = Field(..., description="–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞")
    seo: Optional[SEOMetrics] = Field(None, description="SEO –º–µ—Ç—Ä–∏–∫–∏")
    reliability: ReliabilityMetrics = Field(..., description="–ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏")
    overall_score: float = Field(..., ge=0, le=1, description="–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞")
    
    @root_validator
    def calculate_overall_score(cls, values):
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–∏."""
        if 'performance' in values and 'quality' in values and 'reliability' in values:
            # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            performance_weight = 0.3
            quality_weight = 0.4
            reliability_weight = 0.3
            
            perf_score = (
                (1 - values['performance'].response_time_avg / 10) * 0.4 +
                values['performance'].tokens_per_second / 100 * 0.3 +
                (1 - values['performance'].cpu_usage_percent / 100) * 0.3
            )
            
            qual_score = (
                values['quality'].accuracy_score * 0.3 +
                values['quality'].relevance_score * 0.3 +
                values['quality'].coherence_score * 0.2 +
                values['quality'].fluency_score * 0.2
            )
            
            rel_score = (
                values['reliability'].success_rate * 0.5 +
                values['reliability'].consistency_score * 0.3 +
                values['reliability'].stability_score * 0.2
            )
            
            overall = (
                perf_score * performance_weight +
                qual_score * quality_weight +
                rel_score * reliability_weight
            )
            
            values['overall_score'] = max(0, min(1, overall))
        
        return values


# –ú–æ–¥–µ–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
class BenchmarkResult(BaseModel):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–Ω—á–º–∞—Ä–∫–∞."""
    benchmark_id: UUID4 = Field(default_factory=uuid.uuid4, description="ID –±–µ–Ω—á–º–∞—Ä–∫–∞")
    name: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –±–µ–Ω—á–º–∞—Ä–∫–∞")
    description: Optional[str] = Field(None, description="–û–ø–∏—Å–∞–Ω–∏–µ")
    benchmark_type: BenchmarkType = Field(..., description="–¢–∏–ø –±–µ–Ω—á–º–∞—Ä–∫–∞")
    model_name: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    status: BenchmarkStatus = Field(..., description="–°—Ç–∞—Ç—É—Å")
    metrics: BenchmarkMetrics = Field(..., description="–ú–µ—Ç—Ä–∏–∫–∏")
    iterations: int = Field(..., description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π")
    parameters: Dict[str, Any] = Field(default_factory=dict, description="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
    started_at: datetime = Field(..., description="–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞")
    completed_at: Optional[datetime] = Field(None, description="–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    duration: Optional[float] = Field(None, ge=0, description="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫)")
    error_message: Optional[str] = Field(None, description="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
    raw_data: Optional[Dict[str, Any]] = Field(None, description="–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    @validator('duration', always=True)
    def calculate_duration(cls, v, values):
        """–†–∞—Å—á–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        if 'started_at' in values and 'completed_at' in values and values['completed_at']:
            return (values['completed_at'] - values['started_at']).total_seconds()
        return v


class BenchmarkComparison(BaseModel):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤."""
    comparison_id: UUID4 = Field(default_factory=uuid.uuid4, description="ID —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
    name: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
    benchmark_results: List[BenchmarkResult] = Field(..., min_items=2, description="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–Ω—á–º–∞—Ä–∫–æ–≤")
    comparison_metrics: Dict[str, Any] = Field(default_factory=dict, description="–ú–µ—Ç—Ä–∏–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
    created_at: datetime = Field(default_factory=datetime.utcnow, description="–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è")
    
    @validator('benchmark_results')
    def validate_results(cls, v):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
        if len(v) < 2:
            raise ValueError("–î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
        return v


# –ú–æ–¥–µ–ª–∏ API –æ—Ç–≤–µ—Ç–æ–≤
class BenchmarkResponse(BaseModel):
    """–û—Ç–≤–µ—Ç API –±–µ–Ω—á–º–∞—Ä–∫–∞."""
    success: bool = Field(..., description="–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏")
    data: Optional[BenchmarkResult] = Field(None, description="–î–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
    message: str = Field(..., description="–°–æ–æ–±—â–µ–Ω–∏–µ")
    timestamp: datetime = Field(default_factory=datetime.utcnow, description="–í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞")


class BenchmarkListResponse(BaseModel):
    """–û—Ç–≤–µ—Ç API —Å–æ —Å–ø–∏—Å–∫–æ–º –±–µ–Ω—á–º–∞—Ä–∫–æ–≤."""
    success: bool = Field(..., description="–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏")
    data: List[BenchmarkResult] = Field(..., description="–°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    total: int = Field(..., description="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    page: int = Field(..., description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    limit: int = Field(..., description="–õ–∏–º–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É")
    message: str = Field(..., description="–°–æ–æ–±—â–µ–Ω–∏–µ")
    timestamp: datetime = Field(default_factory=datetime.utcnow, description="–í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞")


class ComparisonResponse(BaseModel):
    """–û—Ç–≤–µ—Ç API —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."""
    success: bool = Field(..., description="–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏")
    data: Optional[BenchmarkComparison] = Field(None, description="–î–∞–Ω–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
    message: str = Field(..., description="–°–æ–æ–±—â–µ–Ω–∏–µ")
    timestamp: datetime = Field(default_factory=datetime.utcnow, description="–í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞")


class ErrorResponse(BaseModel):
    """–û—Ç–≤–µ—Ç API —Å –æ—à–∏–±–∫–æ–π."""
    success: bool = Field(default=False, description="–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏")
    error: str = Field(..., description="–¢–∏–ø –æ—à–∏–±–∫–∏")
    message: str = Field(..., description="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
    details: Optional[Dict[str, Any]] = Field(None, description="–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏")
    timestamp: datetime = Field(default_factory=datetime.utcnow, description="–í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞")


# –ú–æ–¥–µ–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
class HealthCheck(BaseModel):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞."""
    status: str = Field(..., description="–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞")
    timestamp: datetime = Field(default_factory=datetime.utcnow, description="–í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞")
    version: str = Field(..., description="–í–µ—Ä—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞")
    uptime: float = Field(..., description="–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (—Å–µ–∫)")
    services: Dict[str, str] = Field(default_factory=dict, description="–°—Ç–∞—Ç—É—Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")


class CacheStats(BaseModel):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞."""
    enabled: bool = Field(..., description="–í–∫–ª—é—á–µ–Ω –ª–∏ –∫—ç—à")
    total_keys: int = Field(..., description="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π")
    memory_usage: str = Field(..., description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏")
    hit_rate: float = Field(..., description="–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π")
    connected_clients: int = Field(..., description="–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã")
    uptime: int = Field(..., description="–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (—Å–µ–∫)")


class PerformanceStats(BaseModel):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    active_benchmarks: int = Field(..., description="–ê–∫—Ç–∏–≤–Ω—ã–µ –±–µ–Ω—á–º–∞—Ä–∫–∏")
    completed_today: int = Field(..., description="–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è")
    avg_response_time: float = Field(..., description="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞")
    total_requests: int = Field(..., description="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤")
    error_rate: float = Field(..., description="–ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫")
    memory_usage_mb: float = Field(..., description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ (–ú–ë)")
    cpu_usage_percent: float = Field(..., description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU (%)")


# –ú–æ–¥–µ–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
class ExportFormat(str, Enum):
    """–§–æ—Ä–º–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞."""
    JSON = "json"
    CSV = "csv"
    HTML = "html"
    PDF = "pdf"
    EXCEL = "excel"


class ExportRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç."""
    benchmark_ids: List[UUID4] = Field(..., min_items=1, description="ID –±–µ–Ω—á–º–∞—Ä–∫–æ–≤")
    format: ExportFormat = Field(..., description="–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞")
    include_raw_data: bool = Field(default=False, description="–í–∫–ª—é—á–∏—Ç—å —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ")
    include_metrics: bool = Field(default=True, description="–í–∫–ª—é—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏")
    filename: Optional[str] = Field(None, description="–ò–º—è —Ñ–∞–π–ª–∞")


class ExportResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞."""
    success: bool = Field(..., description="–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏")
    download_url: Optional[str] = Field(None, description="URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
    filename: str = Field(..., description="–ò–º—è —Ñ–∞–π–ª–∞")
    file_size: Optional[int] = Field(None, description="–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–±–∞–π—Ç)")
    expires_at: Optional[datetime] = Field(None, description="–í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è")
    message: str = Field(..., description="–°–æ–æ–±—â–µ–Ω–∏–µ")
    timestamp: datetime = Field(default_factory=datetime.utcnow, description="–í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞") 