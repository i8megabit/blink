name: Code Quality

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  # ========================================
  # FRONTEND КАЧЕСТВО КОДА
  # ========================================
  frontend-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: frontend
      run: npm ci

    - name: Run ESLint
      working-directory: frontend
      run: npm run lint

    - name: Run TypeScript type check
      working-directory: frontend
      run: npm run type-check

    - name: Check Prettier formatting
      working-directory: frontend
      run: npm run format:check

    - name: Run Storybook build
      working-directory: frontend
      run: npm run build-storybook

  # ========================================
  # BACKEND КАЧЕСТВО КОДА
  # ========================================
  backend-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      working-directory: backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black isort flake8 mypy

    - name: Run Black (code formatting check)
      working-directory: backend
      run: black --check --diff .

    - name: Run isort (import sorting check)
      working-directory: backend
      run: isort --check-only --diff .

    - name: Run Flake8 (linting)
      working-directory: backend
      run: flake8 app/ tests/

    - name: Run MyPy (type checking)
      working-directory: backend
      run: mypy app/ --ignore-missing-imports

  # ========================================
  # БЕЗОПАСНОСТЬ
  # ========================================
  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Install backend dependencies
      working-directory: backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit

    - name: Run npm audit
      working-directory: frontend
      run: npm audit --audit-level=moderate

    - name: Run safety check (Python dependencies)
      working-directory: backend
      run: safety check

    - name: Run bandit (Python security)
      working-directory: backend
      run: bandit -r app/ -f json -o bandit-report.json || true

    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: backend/bandit-report.json

  # ========================================
  # ПРОИЗВОДИТЕЛЬНОСТЬ
  # ========================================
  performance:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: frontend
      run: npm ci

    - name: Build frontend
      working-directory: frontend
      run: npm run build

    - name: Check bundle size
      working-directory: frontend
      run: |
        # Проверяем размер бандла
        BUNDLE_SIZE=$(du -sh dist/ | cut -f1)
        echo "Bundle size: $BUNDLE_SIZE"
        
        # Проверяем количество файлов
        FILE_COUNT=$(find dist/ -type f | wc -l)
        echo "File count: $FILE_COUNT"
        
        # Проверяем размер основных файлов
        echo "Main bundle size:"
        ls -lh dist/assets/*.js | head -5

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/ 