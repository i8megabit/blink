"""üöÄ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è reLink Backend"""

import asyncio
import json
import logging
import os
import time
import traceback
from collections import defaultdict, deque
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Callable
from contextlib import asynccontextmanager
from dataclasses import dataclass, field
from functools import wraps

import psutil
from fastapi import Request, Response
from fastapi.middleware.base import BaseHTTPMiddleware
from fastapi.responses import JSONResponse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG if os.getenv("DEBUG", "false").lower() == "true" else logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('app.log')
    ]
)

logger = logging.getLogger(__name__)

@dataclass
class RequestMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤."""
    request_id: str
    method: str
    url: str
    start_time: float
    end_time: Optional[float] = None
    duration: Optional[float] = None
    status_code: Optional[int] = None
    user_agent: Optional[str] = None
    ip_address: Optional[str] = None
    request_size: Optional[int] = None
    response_size: Optional[int] = None
    memory_before: Optional[float] = None
    memory_after: Optional[float] = None
    cpu_before: Optional[float] = None
    cpu_after: Optional[float] = None
    error: Optional[str] = None
    stack_trace: Optional[str] = None
    context: Dict[str, Any] = field(default_factory=dict)

@dataclass
class PerformanceMetrics:
    """–û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    timestamp: datetime
    cpu_percent: float
    memory_percent: float
    memory_used_mb: float
    disk_usage_percent: float
    active_requests: int
    total_requests: int
    error_rate: float
    avg_response_time: float
    slow_requests: int

class AdvancedMetricsCollector:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫ —Å –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    
    def __init__(self):
        self.request_metrics: Dict[str, RequestMetrics] = {}
        self.performance_history: deque = deque(maxlen=1000)
        self.error_counts: Dict[str, int] = defaultdict(int)
        self.slow_requests: List[RequestMetrics] = []
        self.active_requests = 0
        self.total_requests = 0
        self.start_time = time.time()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.enable_profiling = os.getenv("ENABLE_PROFILING", "false").lower() == "true"
        self.enable_detailed_logging = os.getenv("ENABLE_DETAILED_LOGGING", "false").lower() == "true"
        self.enable_request_profiling = os.getenv("ENABLE_REQUEST_PROFILING", "false").lower() == "true"
        self.enable_performance_monitoring = os.getenv("ENABLE_PERFORMANCE_MONITORING", "false").lower() == "true"
        
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        self.slow_request_threshold = float(os.getenv("SLOW_REQUEST_THRESHOLD", "2.0"))
        
        logger.info("üöÄ AdvancedMetricsCollector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", extra={
            "enable_profiling": self.enable_profiling,
            "enable_detailed_logging": self.enable_detailed_logging,
            "enable_request_profiling": self.enable_request_profiling,
            "enable_performance_monitoring": self.enable_performance_monitoring,
            "slow_request_threshold": self.slow_request_threshold
        })

    def start_request_profiling(self, request: Request) -> str:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞."""
        if not self.enable_request_profiling:
            return ""

        request_id = f"req_{int(time.time() * 1000)}_{id(request)}"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
        memory_before = psutil.virtual_memory().percent if psutil else None
        cpu_before = psutil.cpu_percent() if psutil else None
        
        metrics = RequestMetrics(
            request_id=request_id,
            method=request.method,
            url=str(request.url),
            start_time=time.time(),
            user_agent=request.headers.get("user-agent"),
            ip_address=request.client.host if request.client else None,
            request_size=len(request.body) if hasattr(request, 'body') else None,
            memory_before=memory_before,
            cpu_before=cpu_before
        )
        
        self.request_metrics[request_id] = metrics
        self.active_requests += 1
        self.total_requests += 1
        
        if self.enable_detailed_logging:
            logger.debug("üöÄ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞", extra={
                "request_id": request_id,
                "method": metrics.method,
                "url": metrics.url,
                "user_agent": metrics.user_agent,
                "ip_address": metrics.ip_address,
                "memory_before": memory_before,
                "cpu_before": cpu_before
            })
        
        return request_id

    def end_request_profiling(self, request_id: str, response: Response, error: Optional[Exception] = None):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞."""
        if not self.enable_request_profiling or not request_id:
            return

        metrics = self.request_metrics.get(request_id)
        if not metrics:
            return

        metrics.end_time = time.time()
        metrics.duration = metrics.end_time - metrics.start_time
        metrics.status_code = response.status_code
        metrics.response_size = len(response.body) if hasattr(response, 'body') else None
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        if psutil:
            metrics.memory_after = psutil.virtual_memory().percent
            metrics.cpu_after = psutil.cpu_percent()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
        if error:
            metrics.error = str(error)
            metrics.stack_trace = traceback.format_exc()
            self.error_counts[type(error).__name__] += 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        if metrics.duration and metrics.duration > self.slow_request_threshold:
            self.slow_requests.append(metrics)
            if len(self.slow_requests) > 100:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                self.slow_requests.pop(0)

        self.active_requests -= 1

        if self.enable_detailed_logging:
            logger.debug("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞", extra={
                "request_id": request_id,
                "method": metrics.method,
                "url": metrics.url,
                "status_code": metrics.status_code,
                "duration": f"{metrics.duration:.3f}s",
                "memory_delta": f"{metrics.memory_after - metrics.memory_before:.2f}%" if metrics.memory_after and metrics.memory_before else None,
                "cpu_delta": f"{metrics.cpu_after - metrics.cpu_before:.2f}%" if metrics.cpu_after and metrics.cpu_before else None,
                "error": metrics.error
            })

        # –£–¥–∞–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –ø–∞–º—è—Ç–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
        del self.request_metrics[request_id]

    def collect_performance_metrics(self) -> PerformanceMetrics:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        if not psutil:
            return PerformanceMetrics(
                timestamp=datetime.now(),
                cpu_percent=0.0,
                memory_percent=0.0,
                memory_used_mb=0.0,
                disk_usage_percent=0.0,
                active_requests=self.active_requests,
                total_requests=self.total_requests,
                error_rate=self._calculate_error_rate(),
                avg_response_time=self._calculate_avg_response_time(),
                slow_requests=len(self.slow_requests)
            )

        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        cpu_percent = psutil.cpu_percent()
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')

        metrics = PerformanceMetrics(
            timestamp=datetime.now(),
            cpu_percent=cpu_percent,
            memory_percent=memory.percent,
            memory_used_mb=memory.used / 1024 / 1024,
            disk_usage_percent=disk.percent,
            active_requests=self.active_requests,
            total_requests=self.total_requests,
            error_rate=self._calculate_error_rate(),
            avg_response_time=self._calculate_avg_response_time(),
            slow_requests=len(self.slow_requests)
        )

        self.performance_history.append(metrics)
        return metrics

    def _calculate_error_rate(self) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫."""
        if self.total_requests == 0:
            return 0.0
        total_errors = sum(self.error_counts.values())
        return (total_errors / self.total_requests) * 100

    def _calculate_avg_response_time(self) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞."""
        if not self.performance_history:
            return 0.0
        
        recent_metrics = list(self.performance_history)[-100:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 –º–µ—Ç—Ä–∏–∫
        total_time = sum(m.avg_response_time for m in recent_metrics)
        return total_time / len(recent_metrics) if recent_metrics else 0.0

    def get_detailed_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        current_metrics = self.collect_performance_metrics()
        
        return {
            "system": {
                "cpu_percent": current_metrics.cpu_percent,
                "memory_percent": current_metrics.memory_percent,
                "memory_used_mb": current_metrics.memory_used_mb,
                "disk_usage_percent": current_metrics.disk_usage_percent,
                "uptime_seconds": time.time() - self.start_time
            },
            "requests": {
                "active": current_metrics.active_requests,
                "total": current_metrics.total_requests,
                "error_rate": current_metrics.error_rate,
                "avg_response_time": current_metrics.avg_response_time,
                "slow_requests": current_metrics.slow_requests
            },
            "errors": dict(self.error_counts),
            "recent_slow_requests": [
                {
                    "request_id": req.request_id,
                    "method": req.method,
                    "url": req.url,
                    "duration": req.duration,
                    "status_code": req.status_code,
                    "error": req.error
                }
                for req in self.slow_requests[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            ],
            "settings": {
                "enable_profiling": self.enable_profiling,
                "enable_detailed_logging": self.enable_detailed_logging,
                "enable_request_profiling": self.enable_request_profiling,
                "enable_performance_monitoring": self.enable_performance_monitoring,
                "slow_request_threshold": self.slow_request_threshold
            }
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–±–æ—Ä—â–∏–∫–∞ –º–µ—Ç—Ä–∏–∫
metrics_collector = AdvancedMetricsCollector()

class PerformanceMonitoringMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤."""
    
    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        request_id = metrics_collector.start_request_profiling(request)
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = await call_next(request)
            return response
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ", extra={
                "request_id": request_id,
                "method": request.method,
                "url": str(request.url),
                "error": str(e),
                "traceback": traceback.format_exc()
            })
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π
            error_response = JSONResponse(
                status_code=500,
                content={"error": "Internal server error", "details": str(e)}
            )
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
            metrics_collector.end_request_profiling(request_id, error_response, e)
            return error_response
        finally:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            if request_id:
                metrics_collector.end_request_profiling(request_id, response)

@asynccontextmanager
async def monitor_operation(operation_name: str, context: Dict[str, Any] = None):
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–π."""
    start_time = time.time()
    operation_id = f"op_{int(time.time() * 1000)}_{id(operation_name)}"
    
    if metrics_collector.enable_detailed_logging:
        logger.debug("üöÄ –ù–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏", extra={
            "operation_id": operation_id,
            "operation_name": operation_name,
            "context": context or {},
            "start_time": start_time
        })
    
    try:
        yield operation_id
    except Exception as e:
        if metrics_collector.enable_detailed_logging:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏", extra={
                "operation_id": operation_id,
                "operation_name": operation_name,
                "error": str(e),
                "duration": time.time() - start_time,
                "traceback": traceback.format_exc()
            })
        raise
    finally:
        duration = time.time() - start_time
        if metrics_collector.enable_detailed_logging:
            logger.debug("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", extra={
                "operation_id": operation_id,
                "operation_name": operation_name,
                "duration": f"{duration:.3f}s"
            })

def profile_function(func_name: str = None):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π."""
    def decorator(func):
        @wraps(func)
        async def async_wrapper(*args, **kwargs):
            name = func_name or func.__name__
            async with monitor_operation(name, {"function": func.__name__}):
                return await func(*args, **kwargs)
        
        @wraps(func)
        def sync_wrapper(*args, **kwargs):
            name = func_name or func.__name__
            start_time = time.time()
            
            if metrics_collector.enable_detailed_logging:
                logger.debug("üöÄ –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏", extra={
                    "function_name": name,
                    "args_count": len(args),
                    "kwargs_count": len(kwargs),
                    "start_time": start_time
                })
            
            try:
                result = func(*args, **kwargs)
                duration = time.time() - start_time
                
                if metrics_collector.enable_detailed_logging:
                    logger.debug("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏", extra={
                        "function_name": name,
                        "duration": f"{duration:.3f}s"
                    })
                
                return result
            except Exception as e:
                duration = time.time() - start_time
                logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏", extra={
                    "function_name": name,
                    "error": str(e),
                    "duration": f"{duration:.3f}s",
                    "traceback": traceback.format_exc()
                })
                raise
        
        return async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper
    return decorator

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
async def get_metrics() -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏."""
    return metrics_collector.get_detailed_stats()

async def get_health_status() -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã."""
    metrics = metrics_collector.collect_performance_metrics()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
    health_status = "healthy"
    issues = []
    
    if metrics.cpu_percent > 80:
        health_status = "warning"
        issues.append(f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {metrics.cpu_percent:.1f}%")
    
    if metrics.memory_percent > 85:
        health_status = "warning"
        issues.append(f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {metrics.memory_percent:.1f}%")
    
    if metrics.error_rate > 5:
        health_status = "error"
        issues.append(f"–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: {metrics.error_rate:.1f}%")
    
    if metrics.avg_response_time > 5:
        health_status = "warning"
        issues.append(f"–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {metrics.avg_response_time:.2f}s")
    
    return {
        "status": health_status,
        "timestamp": datetime.now().isoformat(),
        "uptime_seconds": time.time() - metrics_collector.start_time,
        "metrics": {
            "cpu_percent": metrics.cpu_percent,
            "memory_percent": metrics.memory_percent,
            "active_requests": metrics.active_requests,
            "error_rate": metrics.error_rate,
            "avg_response_time": metrics.avg_response_time
        },
        "issues": issues
    }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
async def start_performance_monitoring():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    if not metrics_collector.enable_performance_monitoring:
        return
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    while True:
        try:
            metrics = metrics_collector.collect_performance_metrics()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            logger.info("üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", extra={
                "cpu_percent": metrics.cpu_percent,
                "memory_percent": metrics.memory_percent,
                "active_requests": metrics.active_requests,
                "error_rate": metrics.error_rate,
                "avg_response_time": metrics.avg_response_time
            })
            
            await asyncio.sleep(30)
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", extra={
                "error": str(e),
                "traceback": traceback.format_exc()
            })
            await asyncio.sleep(60)  # –ñ–¥–µ–º –¥–æ–ª—å—à–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ 