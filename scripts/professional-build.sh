#!/bin/bash

# üöÄ –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô DOCKER BUILD –°–ö–†–ò–ü–¢
# –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å BuildKit, pull –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π

set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
COMPOSE_FILE="${PROJECT_ROOT}/config/docker-compose.yml"

# –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã –¥–ª—è pull
BASE_IMAGES=(
    "python:3.11.9-slim-bullseye"
    "node:20.11.1-alpine"
    "nginx:1.25-alpine"
    "postgres:16"
    "redis:7-alpine"
    "ollama/ollama:latest"
    "prom/prometheus:latest"
)

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Docker
    DOCKER_VERSION=$(docker --version | cut -d' ' -f3 | cut -d'.' -f1)
    if [ "$DOCKER_VERSION" -lt 20 ]; then
        log_warning "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è Docker 20+ –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ BuildKit"
    fi
    
    log_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ BuildKit –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_buildkit_config() {
    log_info "–ó–∞–≥—Ä—É–∑–∫–∞ BuildKit –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    if [ -f "${SCRIPT_DIR}/docker-buildkit.env" ]; then
        source "${SCRIPT_DIR}/docker-buildkit.env"
        log_success "BuildKit –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
    else
        log_warning "–§–∞–π–ª docker-buildkit.env –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        export DOCKER_BUILDKIT=1
        export COMPOSE_DOCKER_CLI_BUILD=1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è pull –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤
pull_base_images() {
    log_info "Pull –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
    
    for image in "${BASE_IMAGES[@]}"; do
        log_info "Pull $image..."
        if docker pull "$image" > /dev/null 2>&1; then
            log_success "‚úÖ $image"
        else
            log_warning "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å pull $image (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ)"
        fi
    done
    
    log_success "Pull –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ Docker
cleanup_docker() {
    local force=${1:-false}
    
    if [ "$force" = true ]; then
        log_info "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker..."
        docker system prune -af
        docker builder prune -af
    else
        log_info "–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö Docker —Ä–µ—Å—É—Ä—Å–æ–≤..."
        docker system prune -f
        docker builder prune -f
    fi
    
    log_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏ —Å BuildKit
build_with_buildkit() {
    local service=${1:-""}
    local no_cache=${2:-false}
    local pull=${3:-true}
    
    log_info "–°–±–æ—Ä–∫–∞ —Å BuildKit..."
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã
    local cmd="docker-compose -f $COMPOSE_FILE build"
    
    if [ -n "$service" ]; then
        cmd="$cmd $service"
        log_info "–°–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: $service"
    fi
    
    if [ "$no_cache" = true ]; then
        cmd="$cmd --no-cache"
        log_info "–°–±–æ—Ä–∫–∞ –±–µ–∑ –∫–µ—à–∞"
    fi
    
    if [ "$pull" = true ]; then
        cmd="$cmd --pull"
        log_info "–°–±–æ—Ä–∫–∞ —Å pull –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤"
    fi
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏
    log_info "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: $cmd"
    if eval "$cmd"; then
        log_success "–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
    else
        log_error "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±—Ä–∞–∑–æ–≤
analyze_images() {
    log_info "–ê–Ω–∞–ª–∏–∑ Docker –æ–±—Ä–∞–∑–æ–≤..."
    
    echo -e "\n${BLUE}üìä –†–∞–∑–º–µ—Ä—ã –æ–±—Ä–∞–∑–æ–≤:${NC}"
    docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}" | grep -E "(relink|eberil)"
    
    echo -e "\n${BLUE}üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞:${NC}"
    docker system df
    
    log_success "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
health_check() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    sleep 10
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    local services=("backend" "frontend" "docs" "testing")
    
    for service in "${services[@]}"; do
        log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ $service..."
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–∞
        local port=""
        case $service in
            "backend") port="8000" ;;
            "frontend") port="3000" ;;
            "docs") port="8001" ;;
            "testing") port="8003" ;;
        esac
        
        if [ -n "$port" ]; then
            if curl -f "http://localhost:$port/health" > /dev/null 2>&1 || \
               curl -f "http://localhost:$port/api/v1/health" > /dev/null 2>&1 || \
               curl -f "http://localhost:$port/" > /dev/null 2>&1; then
                log_success "‚úÖ $service (–ø–æ—Ä—Ç $port)"
            else
                log_warning "‚ö†Ô∏è  $service (–ø–æ—Ä—Ç $port) - –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
            fi
        fi
    done
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo -e "${BLUE}üöÄ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π Docker Build –°–∫—Ä–∏–ø—Ç${NC}"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–û–ü–¶–ò–ò]"
    echo ""
    echo "–û–ø—Ü–∏–∏:"
    echo "  -s, --service SERVICE    –°–±–æ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"
    echo "  -n, --no-cache          –°–±–æ—Ä–∫–∞ –±–µ–∑ –∫–µ—à–∞"
    echo "  -p, --no-pull           –ù–µ pull –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã"
    echo "  -c, --cleanup           –û—á–∏—Å—Ç–∫–∞ Docker –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏"
    echo "  -f, --force-cleanup     –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞"
    echo "  -a, --analyze           –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑–æ–≤ –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏"
    echo "  -h, --health-check      –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞"
    echo "  -u, --up                –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏"
    echo "  -d, --down              –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–∫–æ–π"
    echo "  --help                  –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0                      # –ü–æ–ª–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å BuildKit"
    echo "  $0 -s backend           # –°–±–æ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ backend"
    echo "  $0 -n -c                # –°–±–æ—Ä–∫–∞ –±–µ–∑ –∫–µ—à–∞ + –æ—á–∏—Å—Ç–∫–∞"
    echo "  $0 -u -h                # –°–±–æ—Ä–∫–∞ + –∑–∞–ø—É—Å–∫ + –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    local service=""
    local no_cache=false
    local no_pull=false
    local cleanup=false
    local force_cleanup=false
    local analyze=false
    local health_check_flag=false
    local up=false
    local down=false
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    while [[ $# -gt 0 ]]; do
        case $1 in
            -s|--service)
                service="$2"
                shift 2
                ;;
            -n|--no-cache)
                no_cache=true
                shift
                ;;
            -p|--no-pull)
                no_pull=true
                shift
                ;;
            -c|--cleanup)
                cleanup=true
                shift
                ;;
            -f|--force-cleanup)
                force_cleanup=true
                shift
                ;;
            -a|--analyze)
                analyze=true
                shift
                ;;
            -h|--health-check)
                health_check_flag=true
                shift
                ;;
            -u|--up)
                up=true
                shift
                ;;
            -d|--down)
                down=true
                shift
                ;;
            --help)
                show_help
                exit 0
                ;;
            *)
                log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
    echo -e "${BLUE}üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–∏ Docker${NC}"
    echo "=================================="
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    check_dependencies
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ BuildKit
    load_buildkit_config
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if [ "$down" = true ]; then
        log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker-compose -f "$COMPOSE_FILE" down
    fi
    
    # Pull –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤
    if [ "$no_pull" = false ]; then
        pull_base_images
    fi
    
    # –°–±–æ—Ä–∫–∞
    build_with_buildkit "$service" "$no_cache" "$no_pull"
    
    # –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑–æ–≤
    if [ "$analyze" = true ]; then
        analyze_images
    fi
    
    # –û—á–∏—Å—Ç–∫–∞
    if [ "$cleanup" = true ] || [ "$force_cleanup" = true ]; then
        cleanup_docker "$force_cleanup"
    fi
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    if [ "$up" = true ]; then
        log_info "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker-compose -f "$COMPOSE_FILE" up -d
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        if [ "$health_check_flag" = true ]; then
            health_check
        fi
    fi
    
    log_success "üéâ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@" 