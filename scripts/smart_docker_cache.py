#!/usr/bin/env python3
"""
üöÄ –£–ú–ù–´–ô –ö–ï–® –î–õ–Ø DOCKER –°–ë–û–†–ö–ò
–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Å–±–æ—Ä–∫—É —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–ª–æ–µ–≤
"""

import os
import sys
import subprocess
import json
import time
from pathlib import Path
from typing import List, Dict, Any

class SmartDockerCache:
    """–£–º–Ω—ã–π –∫–µ—à –¥–ª—è Docker —Å–±–æ—Ä–∫–∏"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.cache_dir = self.project_root / ".docker_cache"
        self.cache_dir.mkdir(exist_ok=True)
        
        # –°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Å–ª–æ–∏ (–∫–µ—à–∏—Ä—É—é—Ç—Å—è)
        self.stable_layers = [
            "system_deps",
            "python_base",
            "bootstrap_code"
        ]
        
        # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª–æ–∏ (–ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞—é—Ç—Å—è)
        self.problematic_layers = [
            "ai_deps",
            "db_deps", 
            "monitoring_deps"
        ]
    
    def get_cache_key(self, layer_name: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫–µ—à–∞ –¥–ª—è —Å–ª–æ—è"""
        if layer_name == "system_deps":
            return "system_deps_v1"
        elif layer_name == "python_base":
            return "python_base_v1"
        elif layer_name == "bootstrap_code":
            # –ö–µ—à –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ bootstrap/
            bootstrap_hash = self._get_dir_hash("bootstrap")
            return f"bootstrap_{bootstrap_hash}"
        elif layer_name == "ai_deps":
            # AI –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —á–∞—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è
            return f"ai_deps_{int(time.time() / 3600)}"  # –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å
        else:
            return f"{layer_name}_{int(time.time() / 86400)}"  # –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    
    def _get_dir_hash(self, directory: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–µ—à–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        try:
            result = subprocess.run(
                ["find", directory, "-type", "f", "-exec", "sha256sum", "{}", "+"],
                capture_output=True, text=True, cwd=self.project_root
            )
            if result.returncode == 0:
                # –ü—Ä–æ—Å—Ç–æ–π —Ö–µ—à –æ—Ç –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
                return str(hash(result.stdout))[-8:]
        except:
            pass
        return "unknown"
    
    def build_base_with_cache(self, force_rebuild: bool = False) -> bool:
        """–°–±–æ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞ —Å —É–º–Ω—ã–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        print("üî® –°–±–æ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞ —Å —É–º–Ω—ã–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–∑
        if not force_rebuild and self._image_exists("eberil/relink-base:latest"):
            print("‚úÖ –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à")
            return True
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å BuildKit –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        cmd = [
            "docker", "build",
            "--build-arg", "BUILDKIT_INLINE_CACHE=1",
            "--cache-from", "eberil/relink-base:latest",
            "-f", "Dockerfile.base",
            "-t", "eberil/relink-base:latest",
            "."
        ]
        
        if force_rebuild:
            cmd.insert(2, "--no-cache")
        
        print(f"üöÄ –ö–æ–º–∞–Ω–¥–∞ —Å–±–æ—Ä–∫–∏: {' '.join(cmd)}")
        
        result = subprocess.run(cmd, cwd=self.project_root)
        return result.returncode == 0
    
    def build_service_with_cache(self, service_name: str, force_rebuild: bool = False) -> bool:
        """–°–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        print(f"üî® –°–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ {service_name} —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Dockerfile —Å–µ—Ä–≤–∏—Å–∞
        service_dockerfile = self.project_root / service_name / "Dockerfile"
        if not service_dockerfile.exists():
            print(f"‚ùå Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {service_name}")
            return False
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å–µ—Ä–≤–∏—Å
        cmd = [
            "docker", "build",
            "--build-arg", "BUILDKIT_INLINE_CACHE=1",
            "--cache-from", f"eberil/relink-{service_name}:latest",
            "--cache-from", "eberil/relink-base:latest",
            "-f", str(service_dockerfile),
            "-t", f"eberil/relink-{service_name}:latest",
            str(self.project_root / service_name)
        ]
        
        if force_rebuild:
            cmd.insert(2, "--no-cache")
        
        print(f"üöÄ –ö–æ–º–∞–Ω–¥–∞ —Å–±–æ—Ä–∫–∏ {service_name}: {' '.join(cmd)}")
        
        result = subprocess.run(cmd)
        return result.returncode == 0
    
    def build_all_services(self, services: List[str], force_rebuild: bool = False) -> Dict[str, bool]:
        """–°–±–æ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        results = {}
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑
        if not self.build_base_with_cache(force_rebuild):
            print("‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –±–∞–∑–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞")
            return results
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        import concurrent.futures
        
        def build_service(service):
            return service, self.build_service_with_cache(service, force_rebuild)
        
        with concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:
            futures = [executor.submit(build_service, service) for service in services]
            
            for future in concurrent.futures.as_completed(futures):
                service, success = future.result()
                results[service] = success
                
                if success:
                    print(f"‚úÖ {service} —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ {service}")
        
        return results
    
    def _image_exists(self, image_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–∞"""
        result = subprocess.run(
            ["docker", "images", "-q", image_name],
            capture_output=True, text=True
        )
        return bool(result.stdout.strip())
    
    def clean_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞"""
        print("üßπ –û—á–∏—Å—Ç–∫–∞ Docker –∫–µ—à–∞...")
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–∑—ã
        subprocess.run(["docker", "image", "prune", "-f"])
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        subprocess.run(["docker", "container", "prune", "-f"])
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ volumes
        subprocess.run(["docker", "volume", "prune", "-f"])
        
        print("‚úÖ –ö–µ—à –æ—á–∏—â–µ–Ω")
    
    def show_cache_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞"""
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Docker –∫–µ—à–∞:")
        
        # –†–∞–∑–º–µ—Ä –æ–±—Ä–∞–∑–æ–≤
        result = subprocess.run(
            ["docker", "images", "--format", "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"],
            capture_output=True, text=True
        )
        print(result.stdout)
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
        result = subprocess.run(
            ["docker", "system", "df"],
            capture_output=True, text=True
        )
        print(result.stdout)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–£–º–Ω—ã–π –∫–µ—à –¥–ª—è Docker —Å–±–æ—Ä–∫–∏")
    parser.add_argument("--build-base", action="store_true", help="–°–æ–±—Ä–∞—Ç—å –±–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑")
    parser.add_argument("--build-service", type=str, help="–°–æ–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å")
    parser.add_argument("--build-all", action="store_true", help="–°–æ–±—Ä–∞—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã")
    parser.add_argument("--force", action="store_true", help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞")
    parser.add_argument("--clean", action="store_true", help="–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à")
    parser.add_argument("--stats", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    
    args = parser.parse_args()
    
    cache = SmartDockerCache()
    
    if args.clean:
        cache.clean_cache()
    elif args.stats:
        cache.show_cache_stats()
    elif args.build_base:
        success = cache.build_base_with_cache(args.force)
        sys.exit(0 if success else 1)
    elif args.build_service:
        success = cache.build_service_with_cache(args.build_service, args.force)
        sys.exit(0 if success else 1)
    elif args.build_all:
        services = ["router", "backend", "relink", "llm_tuning", "monitoring", "benchmark"]
        results = cache.build_all_services(services, args.force)
        
        failed = [service for service, success in results.items() if not success]
        if failed:
            print(f"‚ùå –û—à–∏–±–∫–∏ —Å–±–æ—Ä–∫–∏: {', '.join(failed)}")
            sys.exit(1)
        else:
            print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Å–æ–±—Ä–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    else:
        parser.print_help()

if __name__ == "__main__":
    main() 