import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { describe, it, expect, vi, beforeEach } from 'vitest';
import DomainDetails from '../DomainDetails';

// –ú–æ–∫–∞–µ–º fetch
global.fetch = vi.fn();

describe('DomainDetails Component', () => {
  const user = userEvent.setup();
  const mockOnBack = vi.fn();

  beforeEach(() => {
    vi.clearAllMocks();
    
    // –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç API
    (global.fetch as any).mockResolvedValue({
      ok: true,
      json: async () => ({
        posts: [
          {
            id: 1,
            title: 'Test Post 1',
            link: 'https://example.com/post1',
            content_type: 'article',
            difficulty_level: 'medium',
            linkability_score: 85,
            semantic_richness: 90,
            created_at: '2024-01-01T00:00:00Z',
            key_concepts: ['SEO', 'Marketing']
          },
          {
            id: 2,
            title: 'Test Post 2',
            link: 'https://example.com/post2',
            content_type: 'guide',
            difficulty_level: 'easy',
            linkability_score: 75,
            semantic_richness: 80,
            created_at: '2024-01-02T00:00:00Z',
            key_concepts: ['Content', 'Strategy']
          }
        ]
      })
    });
  });

  it('—Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫', () => {
    render(<DomainDetails domain="example.com" onBack={mockOnBack} />);
    expect(screen.getByText(/–ó–∞–≥—Ä—É–∑–∫–∞/i)).toBeInTheDocument();
  });

  it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö', () => {
    render(<DomainDetails domain="example.com" onBack={mockOnBack} />);
    expect(screen.getByText(/–ó–∞–≥—Ä—É–∑–∫–∞/i)).toBeInTheDocument();
  });

  it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–º–µ–Ω–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏', async () => {
    render(<DomainDetails domain="example.com" onBack={mockOnBack} />);
    
    await waitFor(() => {
      expect(screen.getByText('example.com')).toBeInTheDocument();
    });
  });

  it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π', async () => {
    render(<DomainDetails domain="example.com" onBack={mockOnBack} />);
    
    await waitFor(() => {
      expect(screen.getByText(/2 —Å—Ç–∞—Ç–µ–π/i)).toBeInTheDocument();
    });
  });

  it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–∫–ª–∞–¥–∫–∏', async () => {
    render(<DomainDetails domain="example.com" onBack={mockOnBack} />);
    
    await waitFor(() => {
      expect(screen.getByText(/–û–±–∑–æ—Ä/i)).toBeInTheDocument();
      expect(screen.getByText(/–°—Ç–∞—Ç—å–∏/i)).toBeInTheDocument();
      expect(screen.getByText(/–ê–Ω–∞–ª–∏—Ç–∏–∫–∞/i)).toBeInTheDocument();
    });
  });

  it('–ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏', async () => {
    render(<DomainDetails domain="example.com" onBack={mockOnBack} />);
    
    await waitFor(() => {
      expect(screen.getByText(/–û–±–∑–æ—Ä/i)).toBeInTheDocument();
    });

    await user.click(screen.getByText(/–°—Ç–∞—Ç—å–∏/i));
    expect(screen.getByText('Test Post 1')).toBeInTheDocument();
  });

  it('–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–ù–∞–∑–∞–¥"', async () => {
    render(<DomainDetails domain="example.com" onBack={mockOnBack} />);
    
    await waitFor(() => {
      expect(screen.getByText(/–ù–∞–∑–∞–¥/i)).toBeInTheDocument();
    });

    await user.click(screen.getByText(/–ù–∞–∑–∞–¥/i));
    expect(mockOnBack).toHaveBeenCalledTimes(1);
  });

  it('–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏', async () => {
    // –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É API
    (global.fetch as any).mockRejectedValue(new Error('Failed to load'));

    render(<DomainDetails domain="example.com" onBack={mockOnBack} />);
    
    await waitFor(() => {
      expect(screen.getByText('example.com')).toBeInTheDocument();
    });
  });

  it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –æ–±–∑–æ—Ä–µ', async () => {
    render(<DomainDetails domain="example.com" onBack={mockOnBack} />);
    
    await waitFor(() => {
      expect(screen.getByText(/–í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π/i)).toBeInTheDocument();
      expect(screen.getByText('2')).toBeInTheDocument();
    });
  });

  it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—å–∏ –≤–æ –≤–∫–ª–∞–¥–∫–µ "–°—Ç–∞—Ç—å–∏"', async () => {
    render(<DomainDetails domain="example.com" onBack={mockOnBack} />);
    
    await waitFor(() => {
      expect(screen.getByText(/–°—Ç–∞—Ç—å–∏/i)).toBeInTheDocument();
    });

    await user.click(screen.getByText(/–°—Ç–∞—Ç—å–∏/i));
    
    expect(screen.getByText('Test Post 1')).toBeInTheDocument();
    expect(screen.getByText('Test Post 2')).toBeInTheDocument();
  });

  it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞', async () => {
    render(<DomainDetails domain="example.com" onBack={mockOnBack} />);
    
    await waitFor(() => {
      expect(screen.getByText(/–°—Ç–∞—Ç—å–∏/i)).toBeInTheDocument();
    });

    await user.click(screen.getByText(/–°—Ç–∞—Ç—å–∏/i));
    
    expect(screen.getByText('üìÑ')).toBeInTheDocument(); // article icon
    expect(screen.getByText('üìñ')).toBeInTheDocument(); // guide icon
  });

  it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏', async () => {
    render(<DomainDetails domain="example.com" onBack={mockOnBack} />);
    
    await waitFor(() => {
      expect(screen.getByText(/–°—Ç–∞—Ç—å–∏/i)).toBeInTheDocument();
    });

    await user.click(screen.getByText(/–°—Ç–∞—Ç—å–∏/i));
    
    expect(screen.getByText('–°—Ä–µ–¥–Ω–∏–π')).toBeInTheDocument();
    expect(screen.getByText('–õ–µ–≥–∫–∏–π')).toBeInTheDocument();
  });
}); 