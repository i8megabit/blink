#!/bin/bash

# üöÄ SEO Link Recommender - –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
# –£–¥–æ–±–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Docker-–æ–∫—Ä—É–∂–µ–Ω–∏–µ–º

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# –≠–º–æ–¥–∑–∏ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
ROCKET="üöÄ"
GEAR="‚öôÔ∏è"
EYES="üëÄ"
FIRE="üî•"
CLEAN="üßπ"
HEART="‚ù§Ô∏è"
LIGHTNING="‚ö°"
CONSTRUCTION="üöß"
CHECK="‚úÖ"
CROSS="‚ùå"
QUESTION="‚ùì"

PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
COMPOSE_FILE="$PROJECT_DIR/docker-compose.yml"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -f "$COMPOSE_FILE" ]; then
    echo -e "${RED}${CROSS} –û—à–∏–±–∫–∞: docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ $PROJECT_DIR${NC}"
    exit 1
fi

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
cd "$PROJECT_DIR"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
print_header() {
    echo -e "${BLUE}=================================${NC}"
    echo -e "${WHITE}$ROCKET SEO Link Recommender $ROCKET${NC}"
    echo -e "${BLUE}=================================${NC}"
    echo
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
show_status() {
    echo -e "${CYAN}${EYES} –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:${NC}"
    docker-compose ps
    echo
    
    echo -e "${CYAN}${LIGHTNING} –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:${NC}"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}"
    echo
}

# –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
health_check() {
    echo -e "${GREEN}${HEART} –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º backend
    if curl -s http://localhost:8000/api/v1/health > /dev/null 2>&1; then
        echo -e "${GREEN}${CHECK} Backend: OK${NC}"
    else
        echo -e "${RED}${CROSS} Backend: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º frontend
    if curl -s http://localhost:3000 > /dev/null 2>&1; then
        echo -e "${GREEN}${CHECK} Frontend: OK${NC}"
    else
        echo -e "${RED}${CROSS} Frontend: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Ollama
    if curl -s http://localhost:11434/api/tags > /dev/null 2>&1; then
        echo -e "${GREEN}${CHECK} Ollama: OK${NC}"
    else
        echo -e "${RED}${CROSS} Ollama: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
    if docker-compose exec -T db pg_isready -U seo_user > /dev/null 2>&1; then
        echo -e "${GREEN}${CHECK} PostgreSQL: OK${NC}"
    else
        echo -e "${RED}${CROSS} PostgreSQL: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
    fi
    echo
}

# –õ–æ–≥–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ —Ü–≤–µ—Ç–∞–º–∏
show_logs() {
    local service="$1"
    local lines="${2:-50}"
    
    case "$service" in
        "backend"|"be")
            echo -e "${BLUE}${EYES} –õ–æ–≥–∏ Backend (–ø–æ—Å–ª–µ–¥–Ω–∏–µ $lines —Å—Ç—Ä–æ–∫):${NC}"
            docker-compose logs --tail="$lines" -f backend
            ;;
        "frontend"|"fe")
            echo -e "${BLUE}${EYES} –õ–æ–≥–∏ Frontend (–ø–æ—Å–ª–µ–¥–Ω–∏–µ $lines —Å—Ç—Ä–æ–∫):${NC}"
            docker-compose logs --tail="$lines" -f frontend
            ;;
        "ollama"|"ol")
            echo -e "${BLUE}${EYES} –õ–æ–≥–∏ Ollama (–ø–æ—Å–ª–µ–¥–Ω–∏–µ $lines —Å—Ç—Ä–æ–∫):${NC}"
            docker-compose logs --tail="$lines" -f ollama
            ;;
        "db"|"database")
            echo -e "${BLUE}${EYES} –õ–æ–≥–∏ PostgreSQL (–ø–æ—Å–ª–µ–¥–Ω–∏–µ $lines —Å—Ç—Ä–æ–∫):${NC}"
            docker-compose logs --tail="$lines" -f db
            ;;
        "all"|"")
            echo -e "${BLUE}${EYES} –í—Å–µ –ª–æ–≥–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ $lines —Å—Ç—Ä–æ–∫):${NC}"
            docker-compose logs --tail="$lines" -f
            ;;
        *)
            echo -e "${RED}${CROSS} –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å: $service${NC}"
            echo -e "${YELLOW}–î–æ—Å—Ç—É–ø–Ω—ã–µ: backend|be, frontend|fe, ollama|ol, db|database, all${NC}"
            ;;
    esac
}

# –£–º–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ (—Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–∏–≤—à–∏–µ—Å—è —Å–µ—Ä–≤–∏—Å—ã)
smart_rebuild() {
    local services=("$@")
    
    if [ ${#services[@]} -eq 0 ]; then
        services=("backend" "frontend")
    fi
    
    echo -e "${YELLOW}${CONSTRUCTION} –£–º–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: ${services[*]}${NC}"
    
    for service in "${services[@]}"; do
        echo -e "${BLUE}${GEAR} –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ $service...${NC}"
        docker-compose build --no-cache "$service"
        docker-compose up -d "$service"
    done
    
    echo -e "${GREEN}${CHECK} –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
}

# –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–µ–∑ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏
quick_restart() {
    local services=("$@")
    
    if [ ${#services[@]} -eq 0 ]; then
        services=("backend" "frontend")
    fi
    
    echo -e "${LIGHTNING}${YELLOW} –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫: ${services[*]}${NC}"
    docker-compose restart "${services[@]}"
    echo -e "${GREEN}${CHECK} –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω!${NC}"
}

# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å –æ–ø—Ü–∏—è–º–∏
deep_clean() {
    echo -e "${RED}${FIRE} –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker-–æ–∫—Ä—É–∂–µ–Ω–∏—è!${NC}"
    echo -e "${YELLOW}–≠—Ç–æ —É–¥–∞–ª–∏—Ç:${NC}"
    echo -e "  ‚Ä¢ –í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"
    echo -e "  ‚Ä¢ –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–∑—ã"
    echo -e "  ‚Ä¢ –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–æ–º–∞"
    echo -e "  ‚Ä¢ –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–µ—Ç–∏"
    echo
    
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${CLEAN}${YELLOW} –û—á–∏—Å—Ç–∫–∞...${NC}"
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å—ë
        docker-compose down -v --remove-orphans
        
        # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–∑—ã –ø—Ä–æ–µ–∫—Ç–∞
        docker images --format "table {{.Repository}}:{{.Tag}}" | grep "seo_link_recommender" | xargs -r docker rmi -f
        
        # –û—á–∏—â–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ
        docker system prune -af --volumes
        
        echo -e "${GREEN}${CHECK} –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
    else
        echo -e "${BLUE}–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.${NC}"
    fi
}

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
enter_container() {
    local service="$1"
    local shell="${2:-bash}"
    
    case "$service" in
        "backend"|"be")
            echo -e "${BLUE}${GEAR} –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Backend...${NC}"
            docker-compose exec backend "$shell"
            ;;
        "frontend"|"fe")
            echo -e "${BLUE}${GEAR} –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Frontend...${NC}"
            docker-compose exec frontend "$shell"
            ;;
        "db"|"database")
            echo -e "${BLUE}${GEAR} –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...${NC}"
            docker-compose exec db psql -U seo_user seo_db
            ;;
        "ollama"|"ol")
            echo -e "${BLUE}${GEAR} –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama...${NC}"
            docker-compose exec ollama "$shell"
            ;;
        *)
            echo -e "${RED}${CROSS} –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å: $service${NC}"
            echo -e "${YELLOW}–î–æ—Å—Ç—É–ø–Ω—ã–µ: backend|be, frontend|fe, db|database, ollama|ol${NC}"
            ;;
    esac
}

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
monitor() {
    echo -e "${CYAN}${EYES} –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):${NC}"
    echo
    watch -n 2 'docker stats --no-stream'
}

# Dev-—Ä–µ–∂–∏–º —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
dev_mode() {
    echo -e "${BLUE}${ROCKET} –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º...${NC}"
    echo -e "${YELLOW}–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ backend/ –∏ frontend/${NC}"
    echo -e "${YELLOW}–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C${NC}"
    echo
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    docker-compose up -d
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
    reload_service() {
        local service="$1"
        echo -e "${LIGHTNING}${YELLOW} –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ $service, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...${NC}"
        docker-compose restart "$service"
        echo -e "${GREEN}${CHECK} $service –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω${NC}"
    }
    
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if command -v fswatch &> /dev/null; then
        fswatch -o backend/ frontend/ | while read; do
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å
            if [[ $(find backend/ -newer .last_backend_change 2>/dev/null) ]]; then
                touch .last_backend_change
                reload_service "backend"
            fi
            if [[ $(find frontend/ -newer .last_frontend_change 2>/dev/null) ]]; then
                touch .last_frontend_change  
                reload_service "frontend"
            fi
        done
    else
        echo -e "${YELLOW}–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ fswatch –¥–ª—è –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: brew install fswatch${NC}"
        echo -e "${BLUE}–ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–ª–µ–¥–∏–º –∑–∞ –ª–æ–≥–∞–º–∏...${NC}"
        docker-compose logs -f
    fi
}

# –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
quick_info() {
    print_header
    
    echo -e "${CYAN}${LIGHTNING} –ë—ã—Å—Ç—Ä–∞—è —Å–≤–æ–¥–∫–∞:${NC}"
    echo
    
    # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
    echo -e "${WHITE}–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:${NC}"
    docker-compose ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}" 2>/dev/null || echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã"
    echo
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    echo -e "${WHITE}–†–µ—Å—É—Ä—Å—ã:${NC}"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" 2>/dev/null | head -n 5
    echo
    
    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    echo -e "${WHITE}–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:${NC}"
    check_endpoint() {
        local name="$1"
        local url="$2"
        if curl -s -m 3 "$url" > /dev/null 2>&1; then
            echo -e "  ${GREEN}‚úì${NC} $name ($url)"
        else
            echo -e "  ${RED}‚úó${NC} $name ($url)"
        fi
    }
    
    check_endpoint "Frontend" "http://localhost:3000"
    check_endpoint "Backend API" "http://localhost:8000/api/v1/health"
    check_endpoint "Ollama" "http://localhost:11434/api/tags"
    echo
}

# –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ
open_browser() {
    local target="${1:-frontend}"
    
    case "$target" in
        "frontend"|"fe"|"app")
            echo -e "${BLUE}${ROCKET} –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥...${NC}"
            open "http://localhost:3000" 2>/dev/null || xdg-open "http://localhost:3000" 2>/dev/null || echo "–û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000"
            ;;
        "backend"|"be"|"api")
            echo -e "${BLUE}${ROCKET} –û—Ç–∫—Ä—ã–≤–∞–µ–º API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é...${NC}"
            open "http://localhost:8000/docs" 2>/dev/null || xdg-open "http://localhost:8000/docs" 2>/dev/null || echo "–û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8000/docs"
            ;;
        "ollama"|"ol")
            echo -e "${BLUE}${ROCKET} –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å Ollama...${NC}"
            curl -s http://localhost:11434/api/tags | jq '.' 2>/dev/null || curl -s http://localhost:11434/api/tags
            ;;
        *)
            echo -e "${RED}${CROSS} –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ü–µ–ª—å: $target${NC}"
            echo -e "${YELLOW}–î–æ—Å—Ç—É–ø–Ω—ã–µ: frontend|fe|app, backend|be|api, ollama|ol${NC}"
            ;;
    esac
}

# –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ Docker
clear_logs() {
    echo -e "${CLEAN}${YELLOW} –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ Docker...${NC}"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
    containers=$(docker-compose ps -q 2>/dev/null)
    
    if [ -n "$containers" ]; then
        echo "$containers" | while read container; do
            if [ -n "$container" ]; then
                echo -e "${BLUE}–û—á–∏—â–∞–µ–º –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ $(docker inspect --format='{{.Name}}' "$container" | sed 's/^\///')...${NC}"
                echo "" > "$(docker inspect --format='{{.LogPath}}' "$container")" 2>/dev/null || true
            fi
        done
        echo -e "${GREEN}${CHECK} –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã${NC}"
    else
        echo -e "${YELLOW}–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã${NC}"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã
check_system_deps() {
    echo -e "${BLUE}${GEAR} –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}${CROSS} Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        echo -e "${YELLOW}–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker: https://docker.com/get-started${NC}"
    else
        echo -e "${GREEN}${CHECK} Docker: $(docker --version)${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        echo -e "${RED}${CROSS} Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        echo -e "${YELLOW}–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose${NC}"
    else
        echo -e "${GREEN}${CHECK} Docker Compose: $(docker-compose --version)${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º curl
    if ! command -v curl &> /dev/null; then
        echo -e "${YELLOW}${QUESTION} curl –Ω–µ –Ω–∞–π–¥–µ–Ω (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫)${NC}"
    else
        echo -e "${GREEN}${CHECK} curl –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º jq
    if ! command -v jq &> /dev/null; then
        echo -e "${YELLOW}${QUESTION} jq –Ω–µ –Ω–∞–π–¥–µ–Ω (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è JSON: brew install jq)${NC}"
    else
        echo -e "${GREEN}${CHECK} jq –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º fswatch –¥–ª—è dev —Ä–µ–∂–∏–º–∞
    if ! command -v fswatch &> /dev/null; then
        echo -e "${YELLOW}${QUESTION} fswatch –Ω–µ –Ω–∞–π–¥–µ–Ω (–¥–ª—è dev —Ä–µ–∂–∏–º–∞: brew install fswatch)${NC}"
    else
        echo -e "${GREEN}${CHECK} fswatch –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
    fi
}

# –ë—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö
backup_data() {
    local backup_dir="./backups/$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$backup_dir"
    
    echo -e "${BLUE}${GEAR} –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞...${NC}"
    
    # –ë—ç–∫–∞–ø –ë–î
    echo -e "${YELLOW}–≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...${NC}"
    docker-compose exec -T db pg_dump -U seo_user seo_db > "$backup_dir/database.sql"
    
    # –ë—ç–∫–∞–ø Ollama –º–æ–¥–µ–ª–µ–π
    echo -e "${YELLOW}–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π Ollama...${NC}"
    cp -r ollama_models "$backup_dir/"
    
    echo -e "${GREEN}${CHECK} –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: $backup_dir${NC}"
}

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞
restore_data() {
    local backup_dir="$1"
    
    if [ -z "$backup_dir" ] || [ ! -d "$backup_dir" ]; then
        echo -e "${RED}${CROSS} –£–∫–∞–∂–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –±—ç–∫–∞–ø–∞${NC}"
        echo -e "${YELLOW}–ü—Ä–∏–º–µ—Ä: $0 restore backups/20241215_143000${NC}"
        return 1
    fi
    
    echo -e "${YELLOW}${CONSTRUCTION} –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ $backup_dir...${NC}"
    
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î
    if [ -f "$backup_dir/database.sql" ]; then
        echo -e "${BLUE}–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...${NC}"
        docker-compose exec -T db psql -U seo_user seo_db < "$backup_dir/database.sql"
    fi
    
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
    if [ -d "$backup_dir/ollama_models" ]; then
        echo -e "${BLUE}–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π Ollama...${NC}"
        cp -r "$backup_dir/ollama_models" ./
    fi
    
    echo -e "${GREEN}${CHECK} –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!${NC}"
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
update_deps() {
    echo -e "${BLUE}${GEAR} –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${NC}"
    
    # Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    echo -e "${YELLOW}–ü—Ä–æ–≤–µ—Ä–∫–∞ Python –ø–∞–∫–µ—Ç–æ–≤...${NC}"
    docker-compose exec backend pip list --outdated
    
    echo -e "${GREEN}${CHECK} –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Å–æ–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã.${NC}"
}

# –¢–µ—Å—Ç—ã
run_tests() {
    echo -e "${BLUE}${GEAR} –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...${NC}"
    docker-compose exec backend python -m pytest tests/ -v --color=yes
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
show_help() {
    print_header
    echo -e "${WHITE}–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
    echo
    echo -e "${GREEN}üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
    echo -e "  ${CYAN}start${NC}                    - –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo -e "  ${CYAN}stop${NC}                     - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo -e "  ${CYAN}restart [service...]${NC}     - –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ (–±–µ–∑ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏)"
    echo -e "  ${CYAN}rebuild [service...]${NC}     - –£–º–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo -e "  ${CYAN}build${NC}                    - –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo
    echo -e "${GREEN}üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:${NC}"
    echo -e "  ${CYAN}status${NC}                   - –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo -e "  ${CYAN}health${NC}                   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo -e "  ${CYAN}monitor${NC}                  - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    echo -e "  ${CYAN}logs [service] [lines]${NC}   - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ (backend|frontend|ollama|db|all)"
    echo
    echo -e "${GREEN}üîß –£—Ç–∏–ª–∏—Ç—ã:${NC}"
    echo -e "  ${CYAN}shell [service]${NC}          - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É"
    echo -e "  ${CYAN}test${NC}                     - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"
    echo -e "  ${CYAN}deps${NC}                     - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    echo -e "  ${CYAN}sys${NC}                      - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    echo -e "  ${CYAN}dev${NC}                      - –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º"
    echo
    echo -e "${GREEN}üåê –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø:${NC}"
    echo -e "  ${CYAN}info${NC}                     - –ë—ã—Å—Ç—Ä–∞—è —Å–≤–æ–¥–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è"
    echo -e "  ${CYAN}open [target]${NC}            - –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ (frontend|backend|ollama)"
    echo
    echo -e "${GREEN}üíæ –î–∞–Ω–Ω—ã–µ:${NC}"
    echo -e "  ${CYAN}backup${NC}                   - –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞"
    echo -e "  ${CYAN}restore <dir>${NC}            - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞"
    echo
    echo -e "${GREEN}üßπ –û—á–∏—Å—Ç–∫–∞:${NC}"
    echo -e "  ${CYAN}clean${NC}                    - –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker-–æ–∫—Ä—É–∂–µ–Ω–∏—è"
    echo -e "  ${CYAN}prune${NC}                    - –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"
    echo -e "  ${CYAN}clear-logs${NC}               - –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ Docker"
    echo
    echo -e "${GREEN}üìñ –°–ø—Ä–∞–≤–∫–∞:${NC}"
    echo -e "  ${CYAN}help${NC}                     - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo
    echo -e "${PURPLE}–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:${NC}"
    echo -e "  ${YELLOW}$0 start${NC}                          # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å—ë"
    echo -e "  ${YELLOW}$0 dev${NC}                            # –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º"
    echo -e "  ${YELLOW}$0 info${NC}                           # –ë—ã—Å—Ç—Ä–∞—è —Å–≤–æ–¥–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è"
    echo -e "  ${YELLOW}$0 rebuild backend${NC}                # –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ backend"
    echo -e "  ${YELLOW}$0 logs ollama 100${NC}                # 100 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ Ollama"
    echo -e "  ${YELLOW}$0 shell backend${NC}                  # –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ backend"
    echo -e "  ${YELLOW}$0 open frontend${NC}                  # –û—Ç–∫—Ä—ã—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –≤ –±—Ä–∞—É–∑–µ—Ä–µ"
    echo -e "  ${YELLOW}$0 restart backend frontend${NC}       # –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å backend –∏ frontend"
    echo
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    local command="$1"
    shift
    
    case "$command" in
        "start"|"up")
            print_header
            echo -e "${GREEN}${ROCKET} –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
            docker-compose up -d
            echo
            health_check
            ;;
        "stop"|"down")
            echo -e "${YELLOW}${CONSTRUCTION} –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
            docker-compose down
            ;;
        "restart"|"rs")
            quick_restart "$@"
            ;;
        "rebuild"|"rb")
            smart_rebuild "$@"
            ;;
        "build")
            echo -e "${YELLOW}${CONSTRUCTION} –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞...${NC}"
            docker-compose build --no-cache
            docker-compose up -d
            ;;
        "status"|"st")
            print_header
            show_status
            ;;
        "health"|"h")
            health_check
            ;;
        "logs"|"l")
            show_logs "$@"
            ;;
        "monitor"|"mon")
            monitor
            ;;
        "shell"|"sh"|"exec")
            enter_container "$@"
            ;;
        "test"|"tests")
            run_tests
            ;;
        "deps"|"dependencies")
            update_deps
            ;;
        "sys"|"system")
            check_system_deps
            ;;
        "dev"|"develop")
            dev_mode
            ;;
        "info"|"i")
            quick_info
            ;;
        "open"|"browse")
            open_browser "$@"
            ;;
        "backup"|"bak")
            backup_data
            ;;
        "restore"|"res")
            restore_data "$@"
            ;;
        "clean")
            deep_clean
            ;;
        "clear-logs"|"clearlogs")
            clear_logs
            ;;
        "prune")
            echo -e "${CLEAN}${YELLOW} –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...${NC}"
            docker system prune -f
            ;;
        "help"|"--help"|"-h"|"")
            show_help
            ;;
        *)
            echo -e "${RED}${CROSS} –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command${NC}"
            echo -e "${YELLOW}–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '$0 help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏${NC}"
            exit 1
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫
main "$@" 