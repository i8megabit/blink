"""
üß† –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ LLM Tuning –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è, RAG, –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ç—é–Ω–∏–Ω–≥ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
"""

from fastapi import FastAPI, HTTPException, Depends, BackgroundTasks, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
import time
import logging
from typing import Dict, Any, List, Optional
import numpy as np
from sqlalchemy import select, and_
from sqlalchemy.sql import func

from .config import settings
from .database import get_db, init_db
from .services import (
    ModelService, 
    RouterService, 
    RAGService, 
    TuningService,
    MonitoringService,
    ABTestingService,
    AutoOptimizationService,
    QualityAssessmentService,
    SystemHealthService
)
from .models import (
    LLMModelCreate, LLMModelUpdate, LLMModelResponse,
    RouteCreate, RouteResponse,
    TuningSessionCreate, TuningSessionResponse,
    RAGQuery, RAGResponse,
    RouteRequest, RouteResponse as RouterResponse,
    PerformanceMetrics,
    ABTestCreate, ABTestUpdate, ABTestResponse,
    ModelOptimizationCreate, ModelOptimizationResponse,
    QualityAssessmentCreate, QualityAssessmentResponse,
    SystemHealthResponse,
    ModelStatsResponse, SystemStatsResponse
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, settings.monitoring.log_level),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ LLM Tuning –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await init_db()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    app.state.model_service = ModelService()
    app.state.router_service = RouterService()
    app.state.rag_service = RAGService()
    app.state.tuning_service = TuningService()
    app.state.monitoring_service = MonitoringService()
    app.state.ab_testing_service = ABTestingService()
    app.state.auto_optimization_service = AutoOptimizationService()
    app.state.quality_assessment_service = QualityAssessmentService()
    app.state.system_health_service = SystemHealthService()
    
    logger.info("‚úÖ –°–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    logger.info(f"üéØ RAG –≤–∫–ª—é—á–µ–Ω: {settings.rag.enabled}")
    logger.info(f"‚ö° –¢—é–Ω–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω: {settings.tuning.enabled}")
    logger.info(f"üõ£Ô∏è –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞: {settings.router.enabled}")
    logger.info(f"üß™ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ: {settings.tuning.ab_testing_enabled}")
    
    yield
    
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ LLM Tuning –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞...")


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title=settings.api.title,
    description=settings.api.description,
    version=settings.api.version,
    docs_url=settings.api.docs_url if settings.debug else None,
    redoc_url=settings.api.redoc_url if settings.debug else None,
    lifespan=lifespan
)

# Middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.api.cors_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.add_middleware(GZipMiddleware, minimum_size=1000)


# Middleware –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
@app.middleware("http")
async def monitoring_middleware(request: Request, call_next):
    """Middleware –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    start_time = time.time()
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    logger.info(f"üì• {request.method} {request.url.path}")
    
    try:
        response = await call_next(request)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        process_time = time.time() - start_time
        logger.info(f"üì§ {request.method} {request.url.path} - {response.status_code} ({process_time:.3f}s)")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        response.headers["X-Process-Time"] = str(process_time)
        
        return response
        
    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        process_time = time.time() - start_time
        logger.error(f"‚ùå {request.method} {request.url.path} - ERROR ({process_time:.3f}s): {str(e)}")
        raise


# Health check
@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "service": "llm-tuning",
        "version": settings.api.version,
        "environment": settings.environment,
        "features": {
            "rag_enabled": settings.rag.enabled,
            "tuning_enabled": settings.tuning.enabled,
            "router_enabled": settings.router.enabled
        }
    }


# API Routes

## –ú–æ–¥–µ–ª–∏ LLM
@app.post("/api/v1/models", response_model=LLMModelResponse)
async def create_model(
    model_data: LLMModelCreate,
    db=Depends(get_db),
    model_service: ModelService = Depends(lambda: app.state.model_service)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ LLM"""
    try:
        model = await model_service.create_model(db, model_data)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model.name}")
        return model
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
        raise HTTPException(status_code=400, detail=str(e))


@app.get("/api/v1/models", response_model=List[LLMModelResponse])
async def list_models(
    skip: int = 0,
    limit: int = 100,
    provider: str = None,
    status: str = None,
    db=Depends(get_db),
    model_service: ModelService = Depends(lambda: app.state.model_service)
):
    """–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π LLM"""
    try:
        models = await model_service.list_models(db, skip=skip, limit=limit, provider=provider, status=status)
        return models
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/v1/models/{model_id}", response_model=LLMModelResponse)
async def get_model(
    model_id: int,
    db=Depends(get_db),
    model_service: ModelService = Depends(lambda: app.state.model_service)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ ID"""
    try:
        model = await model_service.get_model(db, model_id)
        if not model:
            raise HTTPException(status_code=404, detail="–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return model
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ {model_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.put("/api/v1/models/{model_id}", response_model=LLMModelResponse)
async def update_model(
    model_id: int,
    model_data: LLMModelUpdate,
    db=Depends(get_db),
    model_service: ModelService = Depends(lambda: app.state.model_service)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ LLM"""
    try:
        model = await model_service.update_model(db, model_id, model_data)
        if not model:
            raise HTTPException(status_code=404, detail="–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å: {model.name}")
        return model
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ {model_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.delete("/api/v1/models/{model_id}")
async def delete_model(
    model_id: int,
    db=Depends(get_db),
    model_service: ModelService = Depends(lambda: app.state.model_service)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ LLM"""
    try:
        success = await model_service.delete_model(db, model_id)
        if not success:
            raise HTTPException(status_code=404, detail="–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å: {model_id}")
        return {"message": "–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"}
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ {model_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


## –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
@app.post("/api/v1/route", response_model=RouterResponse)
async def route_request(
    request_data: RouteRequest,
    db=Depends(get_db),
    router_service: RouterService = Depends(lambda: app.state.router_service)
):
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    try:
        start_time = time.time()
        route_result = await router_service.route_request(db, request_data)
        process_time = time.time() - start_time
        
        logger.info(f"üõ£Ô∏è –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è: {request_data.query[:50]}... -> {route_result.model_name} ({process_time:.3f}s)")
        
        return route_result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/v1/routes", response_model=RouteResponse)
async def create_route(
    route_data: RouteCreate,
    db=Depends(get_db),
    router_service: RouterService = Depends(lambda: app.state.router_service)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞"""
    try:
        route = await router_service.create_route(db, route_data)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –º–∞—Ä—à—Ä—É—Ç: {route.name}")
        return route
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞: {e}")
        raise HTTPException(status_code=400, detail=str(e))


@app.get("/api/v1/routes", response_model=List[RouteResponse])
async def list_routes(
    skip: int = 0,
    limit: int = 100,
    strategy: str = None,
    db=Depends(get_db),
    router_service: RouterService = Depends(lambda: app.state.router_service)
):
    """–°–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    try:
        routes = await router_service.list_routes(db, skip=skip, limit=limit, strategy=strategy)
        return routes
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))


## RAG —Å–∏—Å—Ç–µ–º–∞
@app.post("/api/v1/rag/query", response_model=RAGResponse)
async def rag_query(
    query_data: RAGQuery,
    db=Depends(get_db),
    rag_service: RAGService = Depends(lambda: app.state.rag_service)
):
    """RAG –∑–∞–ø—Ä–æ—Å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    if not settings.rag.enabled:
        raise HTTPException(status_code=400, detail="RAG —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    
    try:
        start_time = time.time()
        response = await rag_service.query(db, query_data)
        process_time = time.time() - start_time
        
        logger.info(f"üß† RAG –∑–∞–ø—Ä–æ—Å: {query_data.query[:50]}... ({process_time:.3f}s)")
        
        return response
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ RAG –∑–∞–ø—Ä–æ—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/v1/rag/documents")
async def add_document(
    title: str,
    content: str,
    source: str = None,
    document_type: str = None,
    tags: List[str] = [],
    db=Depends(get_db),
    rag_service: RAGService = Depends(lambda: app.state.rag_service)
):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ RAG —Å–∏—Å—Ç–µ–º—É"""
    if not settings.rag.enabled:
        raise HTTPException(status_code=400, detail="RAG —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    
    try:
        document_id = await rag_service.add_document(db, title, content, source, document_type, tags)
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –≤ RAG: {title}")
        return {"document_id": document_id, "message": "–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω"}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


## –¢—é–Ω–∏–Ω–≥ –º–æ–¥–µ–ª–µ–π
@app.post("/api/v1/tuning/sessions", response_model=TuningSessionResponse)
async def create_tuning_session(
    session_data: TuningSessionCreate,
    background_tasks: BackgroundTasks,
    db=Depends(get_db),
    tuning_service: TuningService = Depends(lambda: app.state.tuning_service)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Ç—é–Ω–∏–Ω–≥–∞"""
    if not settings.tuning.enabled:
        raise HTTPException(status_code=400, detail="–¢—é–Ω–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω")
    
    try:
        session = await tuning_service.create_session(db, session_data)
        
        # –ó–∞–ø—É—Å–∫ —Ç—é–Ω–∏–Ω–≥–∞ –≤ —Ñ–æ–Ω–µ
        background_tasks.add_task(tuning_service.run_tuning, db, session.id)
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è —Ç—é–Ω–∏–Ω–≥–∞: {session.name}")
        return session
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ —Ç—é–Ω–∏–Ω–≥–∞: {e}")
        raise HTTPException(status_code=400, detail=str(e))


@app.get("/api/v1/tuning/sessions", response_model=List[TuningSessionResponse])
async def list_tuning_sessions(
    skip: int = 0,
    limit: int = 100,
    status: str = None,
    model_id: int = None,
    db=Depends(get_db),
    tuning_service: TuningService = Depends(lambda: app.state.tuning_service)
):
    """–°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π —Ç—é–Ω–∏–Ω–≥–∞"""
    try:
        sessions = await tuning_service.list_sessions(db, skip=skip, limit=limit, status=status, model_id=model_id)
        return sessions
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π —Ç—é–Ω–∏–Ω–≥–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/v1/tuning/sessions/{session_id}", response_model=TuningSessionResponse)
async def get_tuning_session(
    session_id: int,
    db=Depends(get_db),
    tuning_service: TuningService = Depends(lambda: app.state.tuning_service)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Ç—é–Ω–∏–Ω–≥–∞"""
    try:
        session = await tuning_service.get_session(db, session_id)
        if not session:
            raise HTTPException(status_code=404, detail="–°–µ—Å—Å–∏—è —Ç—é–Ω–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return session
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ —Ç—é–Ω–∏–Ω–≥–∞ {session_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/v1/tuning/optimize")
async def optimize_model(
    model_id: int,
    background_tasks: BackgroundTasks,
    db=Depends(get_db),
    tuning_service: TuningService = Depends(lambda: app.state.tuning_service)
):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏"""
    if not settings.tuning.enabled:
        raise HTTPException(status_code=400, detail="–¢—é–Ω–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω")
    
    try:
        # –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ–Ω–µ
        background_tasks.add_task(tuning_service.optimize_model, db, model_id)
        
        logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏: {model_id}")
        return {"message": "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞", "model_id": model_id}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ {model_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –º–µ—Ç—Ä–∏–∫–∏
@app.post("/api/v1/metrics")
async def record_metrics(
    metrics: PerformanceMetrics,
    db=Depends(get_db),
    monitoring_service: MonitoringService = Depends(lambda: app.state.monitoring_service)
):
    """–ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        await monitoring_service.record_metrics(db, metrics)
        return {"message": "–ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø–∏—Å–∞–Ω—ã"}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/v1/metrics/summary")
async def get_metrics_summary(
    model_id: int = None,
    time_range: str = "24h",
    db=Depends(get_db),
    monitoring_service: MonitoringService = Depends(lambda: app.state.monitoring_service)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –º–µ—Ç—Ä–∏–∫"""
    try:
        summary = await monitoring_service.get_metrics_summary(db, model_id, time_range)
        return summary
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –º–µ—Ç—Ä–∏–∫: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/v1/models/status")
async def get_models_status(
    db=Depends(get_db),
    model_service: ModelService = Depends(lambda: app.state.model_service)
):
    """–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
    try:
        status = await model_service.get_models_status(db)
        return status
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# A/B –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
@app.post("/api/v1/ab-tests", response_model=ABTestResponse)
async def create_ab_test(
    test_data: ABTestCreate,
    db=Depends(get_db),
    ab_testing_service: ABTestingService = Depends(lambda: app.state.ab_testing_service)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ A/B —Ç–µ—Å—Ç–∞"""
    try:
        test = await ab_testing_service.create_ab_test(test_data.dict())
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω A/B —Ç–µ—Å—Ç: {test.name}")
        return test
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è A/B —Ç–µ—Å—Ç–∞: {e}")
        raise HTTPException(status_code=400, detail=str(e))


@app.get("/api/v1/ab-tests", response_model=List[ABTestResponse])
async def list_ab_tests(
    skip: int = 0,
    limit: int = 100,
    status: Optional[str] = None,
    model_id: Optional[int] = None,
    db=Depends(get_db),
    ab_testing_service: ABTestingService = Depends(lambda: app.state.ab_testing_service)
):
    """–°–ø–∏—Å–æ–∫ A/B —Ç–µ—Å—Ç–æ–≤"""
    try:
        tests = await ab_testing_service.list_ab_tests(
            skip=skip, limit=limit, status=status, model_id=model_id
        )
        return tests
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ A/B —Ç–µ—Å—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/v1/ab-tests/{test_id}", response_model=ABTestResponse)
async def get_ab_test(
    test_id: int,
    db=Depends(get_db),
    ab_testing_service: ABTestingService = Depends(lambda: app.state.ab_testing_service)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ A/B —Ç–µ—Å—Ç–∞ –ø–æ ID"""
    try:
        test = await ab_testing_service.get_ab_test(test_id)
        if not test:
            raise HTTPException(status_code=404, detail="A/B —Ç–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return test
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è A/B —Ç–µ—Å—Ç–∞ {test_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.put("/api/v1/ab-tests/{test_id}", response_model=ABTestResponse)
async def update_ab_test(
    test_id: int,
    test_data: ABTestUpdate,
    db=Depends(get_db),
    ab_testing_service: ABTestingService = Depends(lambda: app.state.ab_testing_service)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ A/B —Ç–µ—Å—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç
        test = await ab_testing_service.get_ab_test(test_id)
        if not test:
            raise HTTPException(status_code=404, detail="A/B —Ç–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
        update_data = test_data.dict(exclude_unset=True)
        for field, value in update_data.items():
            setattr(test, field, value)
        
        await db.commit()
        await db.refresh(test)
        
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω A/B —Ç–µ—Å—Ç: {test.name}")
        return test
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è A/B —Ç–µ—Å—Ç–∞ {test_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/v1/ab-tests/{test_id}/select-model")
async def select_model_for_ab_test(
    test_id: int,
    request_type: str,
    user_id: Optional[str] = None,
    db=Depends(get_db),
    ab_testing_service: ABTestingService = Depends(lambda: app.state.ab_testing_service)
):
    """–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ä–∞–º–∫–∞—Ö A/B —Ç–µ—Å—Ç–∞"""
    try:
        model_name, variant = await ab_testing_service.select_model_for_request(
            test_id, request_type, user_id
        )
        return {
            "model_name": model_name,
            "variant": variant,
            "test_id": test_id
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è A/B —Ç–µ—Å—Ç–∞: {e}")
        raise HTTPException(status_code=400, detail=str(e))


@app.post("/api/v1/ab-tests/{test_id}/record-result")
async def record_ab_test_result(
    test_id: int,
    model_variant: str,
    metrics: Dict[str, Any],
    db=Depends(get_db),
    ab_testing_service: ABTestingService = Depends(lambda: app.state.ab_testing_service)
):
    """–ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ A/B —Ç–µ—Å—Ç–∞"""
    try:
        await ab_testing_service.record_ab_test_result(test_id, model_variant, metrics)
        return {"message": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã A/B —Ç–µ—Å—Ç–∞ –∑–∞–ø–∏—Å–∞–Ω—ã"}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ A/B —Ç–µ—Å—Ç–∞: {e}")
        raise HTTPException(status_code=400, detail=str(e))


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
@app.post("/api/v1/optimization", response_model=ModelOptimizationResponse)
async def optimize_model(
    optimization_data: ModelOptimizationCreate,
    db=Depends(get_db),
    auto_optimization_service: AutoOptimizationService = Depends(lambda: app.state.auto_optimization_service)
):
    """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏"""
    try:
        optimization = await auto_optimization_service.optimize_model(
            optimization_data.model_id,
            optimization_data.optimization_type,
            optimization_data.target_metrics
        )
        logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ {optimization_data.model_id}")
        return optimization
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
        raise HTTPException(status_code=400, detail=str(e))


@app.get("/api/v1/optimization/{optimization_id}", response_model=ModelOptimizationResponse)
async def get_optimization(
    optimization_id: int,
    db=Depends(get_db),
    auto_optimization_service: AutoOptimizationService = Depends(lambda: app.state.auto_optimization_service)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    try:
        optimization = await auto_optimization_service._get_optimization(optimization_id)
        if not optimization:
            raise HTTPException(status_code=404, detail="–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return optimization
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ {optimization_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
@app.post("/api/v1/quality/assess", response_model=QualityAssessmentResponse)
async def assess_quality(
    assessment_data: QualityAssessmentCreate,
    db=Depends(get_db),
    quality_assessment_service: QualityAssessmentService = Depends(lambda: app.state.quality_assessment_service)
):
    """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏"""
    try:
        assessment = await quality_assessment_service.assess_quality(
            assessment_data.model_id,
            assessment_data.request_text,
            assessment_data.response_text,
            assessment_data.context_documents
        )
        logger.info(f"‚úÖ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ {assessment_data.model_id}")
        return assessment
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
        raise HTTPException(status_code=400, detail=str(e))


@app.get("/api/v1/quality/stats/{model_id}")
async def get_quality_stats(
    model_id: int,
    days: int = 30,
    db=Depends(get_db),
    quality_assessment_service: QualityAssessmentService = Depends(lambda: app.state.quality_assessment_service)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏"""
    try:
        stats = await quality_assessment_service.get_quality_stats(model_id, days)
        return stats
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
@app.get("/api/v1/health/system", response_model=SystemHealthResponse)
async def get_system_health(
    db=Depends(get_db),
    system_health_service: SystemHealthService = Depends(lambda: app.state.system_health_service)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        health = await system_health_service.collect_system_health()
        return health
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/v1/health/system/history")
async def get_system_health_history(
    hours: int = 24,
    db=Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        from datetime import datetime, timedelta
        
        start_time = datetime.utcnow() - timedelta(hours=hours)
        
        stmt = select(SystemHealth).where(
            SystemHealth.timestamp >= start_time
        ).order_by(SystemHealth.timestamp.desc())
        
        result = await db.execute(stmt)
        health_records = result.scalars().all()
        
        return {
            "records": [
                {
                    "timestamp": record.timestamp.isoformat(),
                    "cpu_usage": record.cpu_usage,
                    "memory_usage": record.memory_usage,
                    "disk_usage": record.disk_usage,
                    "ollama_status": record.ollama_status,
                    "rag_status": record.rag_status,
                    "response_time_avg": record.response_time_avg,
                    "error_rate": record.error_rate,
                    "alerts_count": len(record.alerts)
                }
                for record in health_records
            ]
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@app.get("/api/v1/stats/models/{model_id}", response_model=ModelStatsResponse)
async def get_model_stats(
    model_id: int,
    days: int = 30,
    db=Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–∏"""
    try:
        from datetime import datetime, timedelta
        
        start_date = datetime.utcnow() - timedelta(days=days)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        model = await db.get(LLMModel, model_id)
        if not model:
            raise HTTPException(status_code=404, detail="–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        stmt = select(PerformanceMetrics).where(
            and_(
                PerformanceMetrics.model_id == model_id,
                PerformanceMetrics.timestamp >= start_date
            )
        )
        
        result = await db.execute(stmt)
        metrics = result.scalars().all()
        
        if not metrics:
            return ModelStatsResponse(
                model_id=model_id,
                model_name=model.name,
                total_requests=0,
                successful_requests=0,
                failed_requests=0,
                avg_response_time=0.0,
                avg_quality_score=0.0,
                total_tokens_generated=0,
                total_tokens_processed=0,
                error_rate=0.0,
                last_used=None,
                performance_trend=[]
            )
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_requests = len(metrics)
        successful_requests = len([m for m in metrics if m.success])
        failed_requests = total_requests - successful_requests
        avg_response_time = np.mean([m.response_time for m in metrics if m.response_time])
        avg_quality_score = np.mean([m.user_feedback for m in metrics if m.user_feedback])
        total_tokens_generated = sum([m.tokens_generated for m in metrics if m.tokens_generated])
        total_tokens_processed = sum([m.tokens_processed for m in metrics if m.tokens_processed])
        error_rate = failed_requests / total_requests if total_requests > 0 else 0.0
        last_used = max([m.timestamp for m in metrics])
        
        # –¢—Ä–µ–Ω–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–ø–æ –¥–Ω—è–º)
        performance_trend = []
        for i in range(days):
            day_start = start_date + timedelta(days=i)
            day_end = day_start + timedelta(days=1)
            
            day_metrics = [m for m in metrics if day_start <= m.timestamp < day_end]
            if day_metrics:
                performance_trend.append({
                    "date": day_start.date().isoformat(),
                    "requests": len(day_metrics),
                    "avg_response_time": np.mean([m.response_time for m in day_metrics if m.response_time]),
                    "success_rate": len([m for m in day_metrics if m.success]) / len(day_metrics)
                })
        
        return ModelStatsResponse(
            model_id=model_id,
            model_name=model.name,
            total_requests=total_requests,
            successful_requests=successful_requests,
            failed_requests=failed_requests,
            avg_response_time=avg_response_time,
            avg_quality_score=avg_quality_score,
            total_tokens_generated=total_tokens_generated,
            total_tokens_processed=total_tokens_processed,
            error_rate=error_rate,
            last_used=last_used,
            performance_trend=performance_trend
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–∏ {model_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/v1/stats/system", response_model=SystemStatsResponse)
async def get_system_stats(
    db=Depends(get_db),
    system_health_service: SystemHealthService = Depends(lambda: app.state.system_health_service)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
        health = await system_health_service.collect_system_health()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –º–æ–¥–µ–ª–∏ –∏ –º–∞—Ä—à—Ä—É—Ç—ã
        models_stmt = select(func.count(LLMModel.id))
        active_models_stmt = select(func.count(LLMModel.id)).where(LLMModel.is_available == True)
        routes_stmt = select(func.count(ModelRoute.id))
        active_routes_stmt = select(func.count(ModelRoute.id)).where(ModelRoute.is_active == True)
        documents_stmt = select(func.count(RAGDocument.id))
        
        models_result = await db.execute(models_stmt)
        active_models_result = await db.execute(active_models_stmt)
        routes_result = await db.execute(routes_stmt)
        active_routes_result = await db.execute(active_routes_stmt)
        documents_result = await db.execute(documents_stmt)
        
        total_models = models_result.scalar() or 0
        active_models = active_models_result.scalar() or 0
        total_routes = routes_result.scalar() or 0
        active_routes = active_routes_result.scalar() or 0
        total_documents = documents_result.scalar() or 0
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –º–æ–¥–µ–ª–µ–π
        top_models_stmt = select(LLMModel).order_by(LLMModel.avg_response_time.asc()).limit(5)
        top_models_result = await db.execute(top_models_stmt)
        top_models = top_models_result.scalars().all()
        
        top_models_stats = []
        for model in top_models:
            stats = await get_model_stats(model.id, days=1, db=db)
            top_models_stats.append(stats)
        
        return SystemStatsResponse(
            total_models=total_models,
            active_models=active_models,
            total_routes=total_routes,
            active_routes=active_routes,
            total_documents=total_documents,
            total_requests_today=health.total_requests,
            avg_response_time=health.response_time_avg,
            error_rate=health.error_rate,
            system_health=health,
            top_models=top_models_stats
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    logger.error(f"‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exc}")
    return JSONResponse(
        status_code=500,
        content={
            "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "detail": str(exc) if settings.debug else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"
        }
    )


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=settings.debug,
        workers=4
    ) 