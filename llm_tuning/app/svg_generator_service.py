"""
üé® SVG Generator Service –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç LLM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö SVG –¥–∏–∞–≥—Ä–∞–º–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤
"""

import asyncio
import json
import logging
import re
import xml.etree.ElementTree as ET
from typing import Dict, Any, List, Optional, Union, Tuple
from dataclasses import dataclass
from datetime import datetime
import aiohttp
from pydantic import BaseModel, Field, validator
import httpx

from .config import settings
from .exceptions import OllamaGenerationException, OllamaConnectionException

logger = logging.getLogger(__name__)


class DiagramType(str, BaseModel):
    """–¢–∏–ø—ã –¥–∏–∞–≥—Ä–∞–º–º"""
    SYSTEM_ARCHITECTURE = "system_architecture"
    DATA_FLOW = "data_flow"
    DEPLOYMENT = "deployment"
    MICROSERVICES = "microservices"
    DATABASE_SCHEMA = "database_schema"
    API_FLOW = "api_flow"
    NETWORK_TOPOLOGY = "network_topology"
    SECURITY_ARCHITECTURE = "security_architecture"
    MONITORING = "monitoring"
    CI_CD_PIPELINE = "ci_cd_pipeline"


class DiagramStyle(BaseModel):
    """–°—Ç–∏–ª–∏ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º"""
    theme: str = Field(default="modern", description="–¢–µ–º–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã")
    colors: Dict[str, str] = Field(default_factory=dict, description="–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞")
    font_family: str = Field(default="Arial, sans-serif", description="–®—Ä–∏—Ñ—Ç")
    font_size: int = Field(default=12, description="–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞")
    stroke_width: int = Field(default=2, description="–¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–π")
    opacity: float = Field(default=0.9, description="–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å")
    
    @validator('theme')
    def validate_theme(cls, v):
        allowed_themes = ['modern', 'classic', 'minimal', 'corporate', 'tech']
        if v not in allowed_themes:
            raise ValueError(f'Theme must be one of: {allowed_themes}')
        return v


class SVGGeneratorRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é SVG –¥–∏–∞–≥—Ä–∞–º–º—ã"""
    diagram_type: str = Field(..., description="–¢–∏–ø –¥–∏–∞–≥—Ä–∞–º–º—ã")
    title: str = Field(..., description="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–∞–≥—Ä–∞–º–º—ã")
    description: str = Field(..., description="–û–ø–∏—Å–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã")
    components: List[Dict[str, Any]] = Field(default_factory=list, description="–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–∏–∞–≥—Ä–∞–º–º—ã")
    relationships: List[Dict[str, Any]] = Field(default_factory=list, description="–°–≤—è–∑–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏")
    style: Optional[DiagramStyle] = Field(default=None, description="–°—Ç–∏–ª—å –¥–∏–∞–≥—Ä–∞–º–º—ã")
    width: int = Field(default=800, description="–®–∏—Ä–∏–Ω–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã")
    height: int = Field(default=600, description="–í—ã—Å–æ—Ç–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã")
    interactive: bool = Field(default=True, description="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
    include_legend: bool = Field(default=True, description="–í–∫–ª—é—á–∏—Ç—å –ª–µ–≥–µ–Ω–¥—É")
    
    @validator('diagram_type')
    def validate_diagram_type(cls, v):
        allowed_types = [
            'system_architecture', 'data_flow', 'deployment', 
            'microservices', 'database_schema', 'api_flow',
            'network_topology', 'security_architecture', 
            'monitoring', 'ci_cd_pipeline'
        ]
        if v not in allowed_types:
            raise ValueError(f'Diagram type must be one of: {allowed_types}')
        return v


class SVGGeneratorResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π SVG –¥–∏–∞–≥—Ä–∞–º–º–æ–π"""
    svg_content: str = Field(..., description="SVG –∫–æ–¥")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")
    generation_time: float = Field(..., description="–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    model_used: str = Field(..., description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å")
    confidence_score: float = Field(..., description="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ")
    optimization_suggestions: List[str] = Field(default_factory=list, description="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")


@dataclass
class DiagramTemplate:
    """–®–∞–±–ª–æ–Ω –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã"""
    name: str
    description: str
    prompt_template: str
    default_style: DiagramStyle
    components: List[str]
    relationships: List[str]


class SVGGeneratorService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SVG –¥–∏–∞–≥—Ä–∞–º–º —Å –ø–æ–º–æ—â—å—é LLM"""
    
    def __init__(self, ollama_url: str = None, model: str = None):
        self.ollama_url = ollama_url or settings.ollama.url
        self.model = model or settings.ollama.default_model
        self.client = httpx.AsyncClient(timeout=settings.ollama.timeout)
        
        # –®–∞–±–ª–æ–Ω—ã –¥–∏–∞–≥—Ä–∞–º–º
        self.templates = self._initialize_templates()
        
        # –ö—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self._cache = {}
        self._cache_ttl = 3600  # 1 —á–∞—Å
    
    def _initialize_templates(self) -> Dict[str, DiagramTemplate]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –¥–∏–∞–≥—Ä–∞–º–º"""
        return {
            "system_architecture": DiagramTemplate(
                name="System Architecture",
                description="–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–∏—Å—Ç–µ–º—ã",
                prompt_template=self._get_system_architecture_prompt(),
                default_style=DiagramStyle(theme="modern", colors={
                    "primary": "#2563eb",
                    "secondary": "#7c3aed",
                    "success": "#059669",
                    "warning": "#d97706",
                    "error": "#dc2626"
                }),
                components=["Frontend", "Backend", "Database", "Cache", "Load Balancer"],
                relationships=["HTTP", "Database Connection", "Cache Hit", "Load Distribution"]
            ),
            "data_flow": DiagramTemplate(
                name="Data Flow",
                description="–î–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
                prompt_template=self._get_data_flow_prompt(),
                default_style=DiagramStyle(theme="minimal", colors={
                    "data": "#0891b2",
                    "process": "#059669",
                    "storage": "#7c3aed",
                    "external": "#dc2626"
                }),
                components=["Data Source", "Processor", "Storage", "Analytics", "Output"],
                relationships=["Data Transfer", "Processing", "Storage", "Analysis"]
            ),
            "microservices": DiagramTemplate(
                name="Microservices",
                description="–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤",
                prompt_template=self._get_microservices_prompt(),
                default_style=DiagramStyle(theme="tech", colors={
                    "service": "#2563eb",
                    "api_gateway": "#7c3aed",
                    "database": "#059669",
                    "message_queue": "#d97706"
                }),
                components=["API Gateway", "User Service", "Order Service", "Payment Service", "Database"],
                relationships=["HTTP", "Message Queue", "Database Connection"]
            ),
            "deployment": DiagramTemplate(
                name="Deployment",
                description="–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è",
                prompt_template=self._get_deployment_prompt(),
                default_style=DiagramStyle(theme="corporate", colors={
                    "production": "#dc2626",
                    "staging": "#d97706",
                    "development": "#059669",
                    "infrastructure": "#6b7280"
                }),
                components=["Production", "Staging", "Development", "CI/CD", "Monitoring"],
                relationships=["Deployment", "Rollback", "Monitoring", "Alerting"]
            )
        }
    
    def _get_system_architecture_prompt(self) -> str:
        """–ü—Ä–æ–º–ø—Ç –¥–ª—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏"""
        return """
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö SVG –¥–∏–∞–≥—Ä–∞–º–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã. –°–æ–∑–¥–∞–π –¥–∏–∞–≥—Ä–∞–º–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π:

## –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:

### 1. –°–¢–†–£–ö–¢–£–†–ê SVG:
- –ò—Å–ø–æ–ª—å–∑—É–π viewBox –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏
- –î–æ–±–∞–≤—å xmlns="http://www.w3.org/2000/svg"
- –£—Å—Ç–∞–Ω–æ–≤–∏ width="{width}" height="{height}"
- –í–∫–ª—é—á–∏ preserveAspectRatio="xMidYMid meet"

### 2. –ö–û–ú–ü–û–ù–ï–ù–¢–´ –°–ò–°–¢–ï–ú–´:
{components}

### 3. –°–í–Ø–ó–ò –ú–ï–ñ–î–£ –ö–û–ú–ü–û–ù–ï–ù–¢–ê–ú–ò:
{relationships}

### 4. –î–ò–ó–ê–ô–ù-–°–ò–°–¢–ï–ú–ê:
- –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞: {style.colors}
- –®—Ä–∏—Ñ—Ç: {style.font_family}, —Ä–∞–∑–º–µ—Ä: {style.font_size}px
- –¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–π: {style.stroke_width}px
- –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å: {style.opacity}

### 5. –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –≠–õ–ï–ú–ï–ù–¢–´:
- –ò—Å–ø–æ–ª—å–∑—É–π <defs> –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
- –î–æ–±–∞–≤—å <filter> –¥–ª—è —Ç–µ–Ω–µ–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
- –°–æ–∑–¥–∞–π <linearGradient> –¥–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–π <clipPath> –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
- –î–æ–±–∞–≤—å <mask> –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤

### 6. –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–°–¢–¨:
- –î–æ–±–∞–≤—å <title> –∏ <desc> –¥–ª—è accessibility
- –ò—Å–ø–æ–ª—å–∑—É–π CSS hover —ç—Ñ—Ñ–µ–∫—Ç—ã
- –í–∫–ª—é—á–∏ JavaScript –¥–ª—è –¥–∏–Ω–∞–º–∏–∫–∏
- –î–æ–±–∞–≤—å data-–∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö

### 7. –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø:
- –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–π path –≤–º–µ—Å—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏–Ω–∏–π
- –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
- –î–æ–±–∞–≤—å aria-label –¥–ª—è accessibility

### 8. –ê–ù–ò–ú–ê–¶–ò–ò:
- –ò—Å–ø–æ–ª—å–∑—É–π <animate> –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π
- –î–æ–±–∞–≤—å <animateTransform> –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π
- –í–∫–ª—é—á–∏ <animateMotion> –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –ø—É—Ç–∏
- –£—Å—Ç–∞–Ω–æ–≤–∏ dur="2s" –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏

### 9. –õ–ï–ì–ï–ù–î–ê –ò –ú–ï–¢–ê–î–ê–ù–´:
- –°–æ–∑–¥–∞–π –æ—Ç–¥–µ–ª—å–Ω—É—é —Å–µ–∫—Ü–∏—é –¥–ª—è –ª–µ–≥–µ–Ω–¥—ã
- –î–æ–±–∞–≤—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–∞–≥—Ä–∞–º–º—ã
- –í–∫–ª—é—á–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- –î–æ–±–∞–≤—å –≤–µ—Ä—Å–∏—é –∏ –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è

### 10. –í–ê–õ–ò–î–ê–¶–ò–Ø:
- –ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å SVG —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
- –£–±–µ–¥–∏—Å—å –≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –±—Ä–∞—É–∑–µ—Ä–∞–º–∏
- –ü—Ä–æ–≤–µ—Ä—å accessibility —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã
- –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞

## –ü–†–ò–ú–ï–† –°–¢–†–£–ö–¢–£–†–´ SVG:

```svg
<svg xmlns="http://www.w3.org/2000/svg" 
     width="{width}" height="{height}" 
     viewBox="0 0 {width} {height}"
     preserveAspectRatio="xMidYMid meet">
  
  <defs>
    <!-- –ì—Ä–∞–¥–∏–µ–Ω—Ç—ã, —Ñ–∏–ª—å—Ç—Ä—ã, –ø–∞—Ç—Ç–µ—Ä–Ω—ã -->
  </defs>
  
  <!-- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã -->
  <g id="components">
    <!-- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã -->
  </g>
  
  <!-- –°–≤—è–∑–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ -->
  <g id="relationships">
    <!-- –°—Ç—Ä–µ–ª–∫–∏ –∏ –ª–∏–Ω–∏–∏ -->
  </g>
  
  <!-- –õ–µ–≥–µ–Ω–¥–∞ -->
  <g id="legend">
    <!-- –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ -->
  </g>
  
  <!-- –ê–Ω–∏–º–∞—Ü–∏–∏ -->
  <g id="animations">
    <!-- –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã -->
  </g>
  
  <style>
    /* CSS —Å—Ç–∏–ª–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */
  </style>
  
  <script>
    // JavaScript –¥–ª—è –¥–∏–Ω–∞–º–∏–∫–∏
  </script>
</svg>
```

## –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –ì–µ–Ω–µ—Ä–∏—Ä—É–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π SVG –∫–æ–¥
2. –ù–µ –¥–æ–±–∞–≤–ª—è–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤–Ω–µ SVG
3. –ò—Å–ø–æ–ª—å–∑—É–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –∏–º–µ–Ω–∞ –¥–ª—è id –∏ class
4. –û–±–µ—Å–ø–µ—á—å accessibility (ARIA labels)
5. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –¥–ª—è –≤–µ–±-–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
6. –î–æ–±–∞–≤—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ <metadata>

–¢–∏–ø –¥–∏–∞–≥—Ä–∞–º–º—ã: {diagram_type}
–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}
–û–ø–∏—Å–∞–Ω–∏–µ: {description}

–°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é SVG –¥–∏–∞–≥—Ä–∞–º–º—É, —Å–ª–µ–¥—É—è –≤—Å–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –≤—ã—à–µ.
"""
    
    def _get_data_flow_prompt(self) -> str:
        """–ü—Ä–æ–º–ø—Ç –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏"""
        return """
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é SVG –¥–∏–∞–≥—Ä–∞–º–º –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –°–æ–∑–¥–∞–π –¥–∏–∞–≥—Ä–∞–º–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π:

## –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:

### 1. –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û–¢–û–ö–ê:
- –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç—Ä–µ–ª–∫–∏ —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
- –î–æ–±–∞–≤—å –∞–Ω–∏–º–∞—Ü–∏—é –¥–≤–∏–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
- –ü–æ–∫–∞–∂–∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
- –í–∫–ª—é—á–∏ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö

### 2. –ö–û–ú–ü–û–ù–ï–ù–¢–´ –ü–û–¢–û–ö–ê:
{components}

### 3. –¢–ò–ü–´ –°–í–Ø–ó–ï–ô:
{relationships}

### 4. –ê–ù–ò–ú–ê–¶–ò–ò –ü–û–¢–û–ö–ê:
- –°–æ–∑–¥–∞–π <animateMotion> –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
- –î–æ–±–∞–≤—å <animate> –¥–ª—è –ø—É–ª—å—Å–∞—Ü–∏–∏ —É–∑–ª–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–π <animateTransform> –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è
- –£—Å—Ç–∞–Ω–æ–≤–∏ dur="3s" repeatCount="indefinite"

### 5. –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–°–¢–¨:
- –î–æ–±–∞–≤—å tooltips —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
- –í–∫–ª—é—á–∏ hover —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —É–∑–ª–æ–≤
- –°–æ–∑–¥–∞–π click —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
- –î–æ–±–∞–≤—å zoom –∏ pan —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å

### 6. –¶–í–ï–¢–û–í–ê–Ø –ö–û–î–ò–†–û–í–ö–ê:
- JSON –¥–∞–Ω–Ω—ã–µ: #4CAF50 (–∑–µ–ª–µ–Ω—ã–π)
- XML –¥–∞–Ω–Ω—ã–µ: #2196F3 (—Å–∏–Ω–∏–π)
- Binary –¥–∞–Ω–Ω—ã–µ: #FF9800 (–æ—Ä–∞–Ω–∂–µ–≤—ã–π)
- Text –¥–∞–Ω–Ω—ã–µ: #9C27B0 (—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π)
- Error –¥–∞–Ω–Ω—ã–µ: #F44336 (–∫—Ä–∞—Å–Ω—ã–π)

### 7. –°–¢–†–£–ö–¢–£–†–ê SVG:
```svg
<svg xmlns="http://www.w3.org/2000/svg" 
     width="{width}" height="{height}" 
     viewBox="0 0 {width} {height}">
  
  <defs>
    <!-- –ú–∞—Ä–∫–µ—Ä—ã –¥–ª—è —Å—Ç—Ä–µ–ª–æ–∫ -->
    <marker id="arrowhead" markerWidth="10" markerHeight="7" 
            refX="9" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" fill="#666"/>
    </marker>
    
    <!-- –ì—Ä–∞–¥–∏–µ–Ω—Ç—ã –¥–ª—è —É–∑–ª–æ–≤ -->
    <linearGradient id="dataGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#4CAF50;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#45a049;stop-opacity:1" />
    </linearGradient>
  </defs>
  
  <!-- –§–æ–Ω–æ–≤–∞—è —Å–µ—Ç–∫–∞ -->
  <g id="grid" opacity="0.1">
    <!-- –°–µ—Ç–∫–∞ –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ -->
  </g>
  
  <!-- –£–∑–ª—ã –¥–∞–Ω–Ω—ã—Ö -->
  <g id="nodes">
    <!-- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π -->
  </g>
  
  <!-- –°–≤—è–∑–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π -->
  <g id="connections">
    <!-- –°—Ç—Ä–µ–ª–∫–∏ —Å –¥–≤–∏–∂–µ–Ω–∏–µ–º -->
  </g>
  
  <!-- –õ–µ–≥–µ–Ω–¥–∞ -->
  <g id="legend">
    <!-- –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –∏ —Ç–∏–ø–æ–≤ -->
  </g>
  
  <style>
    .node {{ cursor: pointer; }}
    .node:hover {{ filter: brightness(1.2); }}
    .connection {{ stroke-dasharray: 5,5; }}
  </style>
  
  <script>
    // JavaScript –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  </script>
</svg>
```

### 8. –ú–ï–¢–ê–î–ê–ù–ù–´–ï:
- –î–æ–±–∞–≤—å <title> –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
- –í–∫–ª—é—á–∏ <desc> —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ—Ç–æ–∫–∞
- –î–æ–±–∞–≤—å data-–∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
- –°–æ–∑–¥–∞–π aria-label –¥–ª—è accessibility

–¢–∏–ø: {diagram_type}
–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}
–û–ø–∏—Å–∞–Ω–∏–µ: {description}
–°—Ç–∏–ª—å: {style}
–†–∞–∑–º–µ—Ä—ã: {width}x{height}

–°–æ–∑–¥–∞–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é SVG –¥–∏–∞–≥—Ä–∞–º–º—É –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ –∏ –ø–æ–ª–Ω–æ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π.
"""
    
    def _get_microservices_prompt(self) -> str:
        """–ü—Ä–æ–º–ø—Ç –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏"""
        return """
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é SVG –¥–∏–∞–≥—Ä–∞–º–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤. –°–æ–∑–¥–∞–π –¥–∏–∞–≥—Ä–∞–º–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π:

## –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:

### 1. –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:
- API Gateway (—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç)
- –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã (–æ—Ç–¥–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏)
- –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞)
- –û—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
- Load Balancer

### 2. –°–ï–†–í–ò–°–´:
{components}

### 3. –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø:
{relationships}

### 4. –í–ò–ó–£–ê–õ–¨–ù–û–ï –ü–†–ï–î–°–¢–ê–í–õ–ï–ù–ò–ï:
- API Gateway: —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
- –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã: –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
- –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: —Ü–∏–ª–∏–Ω–¥—Ä—ã —Å –∏–∫–æ–Ω–∫–∞–º–∏
- –û—á–µ—Ä–µ–¥–∏: –æ–≤–∞–ª—ã —Å –∏–∫–æ–Ω–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –∫—Ä—É–≥–∏ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏

### 5. –¶–í–ï–¢–û–í–ê–Ø –°–•–ï–ú–ê:
- API Gateway: #FF6B6B (–∫—Ä–∞—Å–Ω—ã–π)
- –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã: #4ECDC4 (–±–∏—Ä—é–∑–æ–≤—ã–π)
- –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: #45B7D1 (—Å–∏–Ω–∏–π)
- –û—á–µ—Ä–µ–¥–∏: #96CEB4 (–∑–µ–ª–µ–Ω—ã–π)
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: #FFEAA7 (–∂–µ–ª—Ç—ã–π)
- –û—à–∏–±–∫–∏: #D63031 (—Ç–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π)

### 6. –ê–ù–ò–ú–ê–¶–ò–ò:
- –ü—É–ª—å—Å–∞—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
- –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏
- –í—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
- –ú–µ—Ä—Ü–∞–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫

### 7. –°–¢–†–£–ö–¢–£–†–ê SVG:
```svg
<svg xmlns="http://www.w3.org/2000/svg" 
     width="{width}" height="{height}" 
     viewBox="0 0 {width} {height}">
  
  <defs>
    <!-- –ì—Ä–∞–¥–∏–µ–Ω—Ç—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ -->
    <linearGradient id="gatewayGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#FF6B6B;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#D63031;stop-opacity:1" />
    </linearGradient>
    
    <!-- –§–∏–ª—å—Ç—Ä—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ -->
    <filter id="glow" x="-50%" y="-50%" width="200%" height="200%">
      <feGaussianBlur stdDeviation="3" result="coloredBlur"/>
      <feMerge> 
        <feMergeNode in="coloredBlur"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>
  </defs>
  
  <!-- –§–æ–Ω–æ–≤–∞—è —Å–µ—Ç–∫–∞ -->
  <g id="background" opacity="0.1">
    <!-- –°–µ—Ç–∫–∞ –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ -->
  </g>
  
  <!-- API Gateway -->
  <g id="gateway">
    <!-- –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç -->
  </g>
  
  <!-- –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã -->
  <g id="services">
    <!-- –û—Ç–¥–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã -->
  </g>
  
  <!-- –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö -->
  <g id="databases">
    <!-- –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö -->
  </g>
  
  <!-- –û—á–µ—Ä–µ–¥–∏ -->
  <g id="queues">
    <!-- –û—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π -->
  </g>
  
  <!-- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ -->
  <g id="monitoring">
    <!-- –°–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ -->
  </g>
  
  <!-- –°–≤—è–∑–∏ -->
  <g id="connections">
    <!-- API –≤—ã–∑–æ–≤—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è -->
  </g>
  
  <!-- –õ–µ–≥–µ–Ω–¥–∞ -->
  <g id="legend">
    <!-- –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ -->
  </g>
  
  <style>
    .service {{ cursor: pointer; transition: all 0.3s; }}
    .service:hover {{ filter: brightness(1.2) drop-shadow(0 0 10px rgba(0,0,0,0.3)); }}
    .connection {{ stroke-dasharray: 5,5; animation: flow 2s linear infinite; }}
    @keyframes flow {{ to {{ stroke-dashoffset: -10; }} }}
  </style>
  
  <script>
    // JavaScript –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∞–Ω–∏–º–∞—Ü–∏–π
  </script>
</svg>
```

### 8. –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–°–¢–¨:
- Click –¥–ª—è –¥–µ—Ç–∞–ª–µ–π —Å–µ—Ä–≤–∏—Å–∞
- Hover –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–≤—è–∑—è—Ö
- Zoom –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
- Tooltips —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏

### 9. –ú–ï–¢–ê–î–ê–ù–ù–´–ï:
- –í–µ—Ä—Å–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
- –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤
- –¢–∏–ø—ã —Å–≤—è–∑–µ–π

–¢–∏–ø: {diagram_type}
–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}
–û–ø–∏—Å–∞–Ω–∏–µ: {description}
–°—Ç–∏–ª—å: {style}
–†–∞–∑–º–µ—Ä—ã: {width}x{height}

–°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é SVG –¥–∏–∞–≥—Ä–∞–º–º—É –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å –ø–æ–ª–Ω–æ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π.
"""
    
    def _get_deployment_prompt(self) -> str:
        """–ü—Ä–æ–º–ø—Ç –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏"""
        return """
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é SVG –¥–∏–∞–≥—Ä–∞–º–º –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è. –°–æ–∑–¥–∞–π –¥–∏–∞–≥—Ä–∞–º–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π:

## –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:

### 1. –≠–¢–ê–ü–´ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Ø:
- Development Environment
- Staging Environment  
- Production Environment
- CI/CD Pipeline
- Monitoring & Alerts
- Rollback Process

### 2. –≠–¢–ê–ü–´ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Ø:
{components}

### 3. –ü–†–û–¶–ï–°–°–´:
{relationships}

### 4. –í–ò–ó–£–ê–õ–¨–ù–û–ï –ü–†–ï–î–°–¢–ê–í–õ–ï–ù–ò–ï:
- Development: –∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç (#4CAF50)
- Staging: –æ—Ä–∞–Ω–∂–µ–≤—ã–π —Ü–≤–µ—Ç (#FF9800)
- Production: –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç (#F44336)
- CI/CD: —Å–∏–Ω–∏–π —Ü–≤–µ—Ç (#2196F3)
- Monitoring: —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ü–≤–µ—Ç (#9C27B0)

### 5. –ê–ù–ò–ú–ê–¶–ò–ò –ü–†–û–¶–ï–°–°–ê:
- –ê–Ω–∏–º–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∫–æ–¥–∞ –ø–æ pipeline
- –ü—É–ª—å—Å–∞—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤
- –ê–Ω–∏–º–∞—Ü–∏—è –¥–µ–ø–ª–æ—è –≤ production
- –ú–µ—Ä—Ü–∞–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –∏ rollback

### 6. –°–¢–†–£–ö–¢–£–†–ê SVG:
```svg
<svg xmlns="http://www.w3.org/2000/svg" 
     width="{width}" height="{height}" 
     viewBox="0 0 {width} {height}">
  
  <defs>
    <!-- –ì—Ä–∞–¥–∏–µ–Ω—Ç—ã –¥–ª—è —Å—Ä–µ–¥ -->
    <linearGradient id="devGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#4CAF50;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#45a049;stop-opacity:1" />
    </linearGradient>
    
    <!-- –ê–Ω–∏–º–∞—Ü–∏–∏ -->
    <animateTransform id="deploy" attributeName="transform" 
                      type="translate" values="0,0; 0,-10; 0,0" 
                      dur="2s" repeatCount="indefinite"/>
  </defs>
  
  <!-- –§–æ–Ω–æ–≤–∞—è —Å–µ—Ç–∫–∞ -->
  <g id="background" opacity="0.1">
    <!-- –°–µ—Ç–∫–∞ –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ -->
  </g>
  
  <!-- Development Environment -->
  <g id="development">
    <!-- –°—Ä–µ–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ -->
  </g>
  
  <!-- CI/CD Pipeline -->
  <g id="cicd">
    <!-- –ü—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è -->
  </g>
  
  <!-- Staging Environment -->
  <g id="staging">
    <!-- –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ -->
  </g>
  
  <!-- Production Environment -->
  <g id="production">
    <!-- –ü—Ä–æ–¥–∞–∫—à–Ω —Å—Ä–µ–¥–∞ -->
  </g>
  
  <!-- Monitoring -->
  <g id="monitoring">
    <!-- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç—ã -->
  </g>
  
  <!-- Rollback Process -->
  <g id="rollback">
    <!-- –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–∫–∞—Ç–∞ -->
  </g>
  
  <!-- –°–≤—è–∑–∏ –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏ -->
  <g id="flow">
    <!-- –ü–æ—Ç–æ–∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è -->
  </g>
  
  <!-- –°—Ç–∞—Ç—É—Å—ã -->
  <g id="status">
    <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç–∞—Ç—É—Å–∞ -->
  </g>
  
  <!-- –õ–µ–≥–µ–Ω–¥–∞ -->
  <g id="legend">
    <!-- –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ -->
  </g>
  
  <style>
    .environment {{ cursor: pointer; transition: all 0.3s; }}
    .environment:hover {{ filter: brightness(1.2); }}
    .pipeline {{ stroke-dasharray: 5,5; animation: flow 3s linear infinite; }}
    .status-success {{ fill: #4CAF50; }}
    .status-error {{ fill: #F44336; animation: blink 1s infinite; }}
    @keyframes flow {{ to {{ stroke-dashoffset: -10; }} }}
    @keyframes blink {{ 50% {{ opacity: 0.5; }} }}
  </style>
  
  <script>
    // JavaScript –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∞–Ω–∏–º–∞—Ü–∏–π
  </script>
</svg>
```

### 7. –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–°–¢–¨:
- Click –¥–ª—è –¥–µ—Ç–∞–ª–µ–π —ç—Ç–∞–ø–∞
- Hover –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
- –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
- Tooltips —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏

### 8. –ú–ï–¢–ê–î–ê–ù–ù–´–ï:
- –í—Ä–µ–º—è –¥–µ–ø–ª–æ—è
- –°—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
- –í—Ä–µ–º—è rollback

–¢–∏–ø: {diagram_type}
–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}
–û–ø–∏—Å–∞–Ω–∏–µ: {description}
–°—Ç–∏–ª—å: {style}
–†–∞–∑–º–µ—Ä—ã: {width}x{height}

–°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é SVG –¥–∏–∞–≥—Ä–∞–º–º—É –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å –ø–æ–ª–Ω–æ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π.
"""
    
    async def generate_diagram(self, request: SVGGeneratorRequest) -> SVGGeneratorResponse:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SVG –¥–∏–∞–≥—Ä–∞–º–º—ã"""
        start_time = datetime.now()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = self._generate_cache_key(request)
            if cache_key in self._cache:
                cached_result = self._cache[cache_key]
                if (datetime.now() - cached_result["timestamp"]).seconds < self._cache_ttl:
                    logger.info(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É: {cache_key}")
                    return cached_result["result"]
            
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
            template = self.templates.get(request.diagram_type)
            if not template:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∏–∞–≥—Ä–∞–º–º—ã: {request.diagram_type}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = self._format_prompt(request, template)
            
            # –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–º–ø—Ç –ø—Ä–∏–º–µ—Ä–∞–º–∏
            enhanced_prompt = self._enhance_prompt_with_examples(prompt, request.diagram_type)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SVG —Å –ø–æ–º–æ—â—å—é LLM
            svg_content = await self._generate_svg_with_llm(enhanced_prompt)
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º SVG
            optimized_svg = await self._optimize_svg(svg_content, request)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            final_svg = await self._enhance_svg(optimized_svg, request)
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
            generation_time = (datetime.now() - start_time).total_seconds()
            response = SVGGeneratorResponse(
                svg_content=final_svg,
                metadata={
                    "diagram_type": request.diagram_type,
                    "title": request.title,
                    "components_count": len(request.components),
                    "relationships_count": len(request.relationships),
                    "generated_at": datetime.now().isoformat(),
                    "template_used": template.name
                },
                generation_time=generation_time,
                model_used=self.model,
                confidence_score=0.85,  # –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
                optimization_suggestions=[
                    "–î–æ–±–∞–≤–ª–µ–Ω—ã –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã",
                    "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞",
                    "–£–ª—É—á—à–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å"
                ]
            )
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._cache[cache_key] = {
                "result": response,
                "timestamp": datetime.now()
            }
            
            logger.info(f"–î–∏–∞–≥—Ä–∞–º–º–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ {generation_time:.2f} —Å–µ–∫—É–Ω–¥")
            return response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")
            raise OllamaGenerationException(
                model_name=self.model,
                error_message=str(e)
            )
    
    async def _generate_svg_with_llm(self, prompt: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SVG —Å –ø–æ–º–æ—â—å—é LLM"""
        try:
            payload = {
                "model": self.model,
                "prompt": prompt,
                "stream": False,
                "options": {
                    "temperature": 0.3,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                    "top_p": 0.9,
                    "top_k": 50,
                    "repeat_penalty": 1.1,
                    "num_ctx": 4096
                }
            }
            
            response = await self.client.post(
                f"{self.ollama_url}/api/generate",
                json=payload
            )
            
            if response.status_code != 200:
                raise OllamaConnectionException(
                    f"Ollama –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}"
                )
            
            result = response.json()
            svg_content = result.get("response", "")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º SVG –∏–∑ –æ—Ç–≤–µ—Ç–∞
            svg_match = re.search(r'<svg.*?</svg>', svg_content, re.DOTALL | re.IGNORECASE)
            if svg_match:
                return svg_match.group(0)
            else:
                # –ï—Å–ª–∏ SVG –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π
                return self._create_fallback_svg()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SVG —Å LLM: {e}")
            return self._create_fallback_svg()
    
    def _create_fallback_svg(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ SVG –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        return f"""
<svg width="800" height="600" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="bg" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#f8fafc;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#e2e8f0;stop-opacity:1" />
    </linearGradient>
  </defs>
  
  <rect width="100%" height="100%" fill="url(#bg)"/>
  
  <text x="400" y="300" text-anchor="middle" font-family="Arial, sans-serif" 
        font-size="24" fill="#64748b">
    –î–∏–∞–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  </text>
  
  <text x="400" y="330" text-anchor="middle" font-family="Arial, sans-serif" 
        font-size="16" fill="#94a3b8">
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ LLM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º
  </text>
</svg>
"""
    
    async def _optimize_svg(self, svg_content: str, request: SVGGeneratorRequest) -> str:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è SVG"""
        try:
            # –ü–∞—Ä—Å–∏–º SVG
            root = ET.fromstring(svg_content)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
            root.set("width", str(request.width))
            root.set("height", str(request.height))
            root.set("viewBox", f"0 0 {request.width} {request.height}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
            style_elem = ET.SubElement(root, "style")
            style_elem.text = self._generate_css_styles(request)
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
            self._optimize_elements(root)
            
            return ET.tostring(root, encoding="unicode")
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ SVG: {e}")
            return svg_content
    
    def _generate_css_styles(self, request: SVGGeneratorRequest) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSS —Å—Ç–∏–ª–µ–π"""
        style = request.style or DiagramStyle()
        
        return f"""
        .component {{
            fill: {style.colors.get('primary', '#2563eb')};
            stroke: #1e40af;
            stroke-width: {style.stroke_width};
            opacity: {style.opacity};
            transition: all 0.3s ease;
        }}
        
        .component:hover {{
            fill: {style.colors.get('secondary', '#7c3aed')};
            transform: scale(1.05);
            cursor: pointer;
        }}
        
        .relationship {{
            stroke: #64748b;
            stroke-width: 2;
            fill: none;
            marker-end: url(#arrowhead);
        }}
        
        .text {{
            font-family: {style.font_family};
            font-size: {style.font_size}px;
            fill: #1f2937;
        }}
        
        .title {{
            font-size: {style.font_size + 8}px;
            font-weight: bold;
            fill: #111827;
        }}
        
        .legend {{
            fill: white;
            stroke: #d1d5db;
            stroke-width: 1;
            opacity: 0.9;
        }}
        
        @keyframes pulse {{
            0% {{ opacity: 0.7; }}
            50% {{ opacity: 1; }}
            100% {{ opacity: 0.7; }}
        }}
        
        .animated {{
            animation: pulse 2s infinite;
        }}
        """
    
    def _optimize_elements(self, root: ET.Element):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è SVG —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º
        for elem in root.iter():
            if elem.tag.endswith('rect'):
                elem.set('class', 'component')
            elif elem.tag.endswith('line') or elem.tag.endswith('path'):
                if 'relationship' in elem.get('id', ''):
                    elem.set('class', 'relationship')
            elif elem.tag.endswith('text'):
                if 'title' in elem.get('id', ''):
                    elem.set('class', 'title')
                else:
                    elem.set('class', 'text')
    
    async def _enhance_svg(self, svg_content: str, request: SVGGeneratorRequest) -> str:
        """–£–ª—É—á—à–µ–Ω–∏–µ SVG —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é"""
        if not request.interactive:
            return svg_content
        
        # –î–æ–±–∞–≤–ª—è–µ–º JavaScript –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        js_code = self._generate_interactive_js(request)
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º JavaScript –≤ SVG
        svg_with_js = svg_content.replace('</svg>', f'{js_code}</svg>')
        
        return svg_with_js
    
    def _generate_interactive_js(self, request: SVGGeneratorRequest) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JavaScript –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        return f"""
        <script type="text/javascript">
        <![CDATA[
            // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
            document.addEventListener('DOMContentLoaded', function() {{
                const components = document.querySelectorAll('.component');
                const relationships = document.querySelectorAll('.relationship');
                
                // Hover —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                components.forEach(comp => {{
                    comp.addEventListener('mouseenter', function() {{
                        this.style.filter = 'drop-shadow(0 4px 8px rgba(0,0,0,0.2))';
                    }});
                    
                    comp.addEventListener('mouseleave', function() {{
                        this.style.filter = 'none';
                    }});
                    
                    comp.addEventListener('click', function() {{
                        const title = this.getAttribute('data-title') || '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç';
                        alert(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ: ${{title}}`);
                    }});
                }});
                
                // –ê–Ω–∏–º–∞—Ü–∏—è —Å–≤—è–∑–µ–π
                relationships.forEach(rel => {{
                    rel.classList.add('animated');
                }});
                
                // Tooltip —Å–∏—Å—Ç–µ–º–∞
                function showTooltip(element, text) {{
                    const tooltip = document.createElement('div');
                    tooltip.className = 'tooltip';
                    tooltip.textContent = text;
                    tooltip.style.cssText = `
                        position: absolute;
                        background: rgba(0,0,0,0.8);
                        color: white;
                        padding: 8px;
                        border-radius: 4px;
                        font-size: 12px;
                        pointer-events: none;
                        z-index: 1000;
                    `;
                    document.body.appendChild(tooltip);
                    
                    element.addEventListener('mousemove', function(e) {{
                        tooltip.style.left = e.pageX + 10 + 'px';
                        tooltip.style.top = e.pageY - 10 + 'px';
                    }});
                    
                    element.addEventListener('mouseleave', function() {{
                        document.body.removeChild(tooltip);
                    }});
                }}
            }});
        ]]>
        </script>
        """
    
    def _format_prompt(self, request: SVGGeneratorRequest, template: DiagramTemplate) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞"""
        components_text = "\n".join([
            f"- {comp.get('name', 'Component')}: {comp.get('description', 'No description')}"
            for comp in request.components
        ])
        
        relationships_text = "\n".join([
            f"- {rel.get('from', 'A')} -> {rel.get('to', 'B')}: {rel.get('type', 'connection')}"
            for rel in request.relationships
        ])
        
        style_text = f"theme={request.style.theme if request.style else 'modern'}"
        
        return template.prompt_template.format(
            diagram_type=request.diagram_type,
            title=request.title,
            description=request.description,
            components=components_text,
            relationships=relationships_text,
            style=style_text,
            width=request.width,
            height=request.height
        )
    
    def _generate_cache_key(self, request: SVGGeneratorRequest) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞"""
        import hashlib
        
        key_data = {
            "diagram_type": request.diagram_type,
            "title": request.title,
            "description": request.description,
            "components": request.components,
            "relationships": request.relationships,
            "style": request.style.dict() if request.style else None,
            "width": request.width,
            "height": request.height
        }
        
        key_string = json.dumps(key_data, sort_keys=True)
        return hashlib.md5(key_string.encode()).hexdigest()
    
    async def get_available_templates(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
        return [
            {
                "name": template.name,
                "description": template.description,
                "type": diagram_type,
                "components": template.components,
                "relationships": template.relationships,
                "default_style": template.default_style.dict()
            }
            for diagram_type, template in self.templates.items()
        ]
    
    async def validate_svg(self, svg_content: str) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ SVG"""
        validation_result = {
            "is_valid": False,
            "errors": [],
            "warnings": [],
            "quality_score": 0.0,
            "optimization_suggestions": [],
            "accessibility_score": 0.0,
            "performance_score": 0.0
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É SVG
            if not svg_content.strip().startswith('<svg'):
                validation_result["errors"].append("SVG –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Ç–µ–≥–∞ <svg>")
                return validation_result
            
            # –ü–∞—Ä—Å–∏–º SVG
            try:
                root = ET.fromstring(svg_content)
            except ET.ParseError as e:
                validation_result["errors"].append(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ SVG: {e}")
                return validation_result
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
            if not root.get('xmlns'):
                validation_result["warnings"].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç xmlns –∞—Ç—Ä–∏–±—É—Ç")
            
            if not root.get('viewBox'):
                validation_result["warnings"].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç viewBox –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            required_sections = ['components', 'relationships', 'legend']
            for section in required_sections:
                if not root.find(f".//g[@id='{section}']"):
                    validation_result["warnings"].append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è {section}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º accessibility
            accessibility_score = self._check_accessibility(root)
            validation_result["accessibility_score"] = accessibility_score
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            performance_score = self._check_performance(root)
            validation_result["performance_score"] = performance_score
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π
            animations = root.findall(".//animate") + root.findall(".//animateTransform") + root.findall(".//animateMotion")
            if not animations:
                validation_result["warnings"].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∞–Ω–∏–º–∞—Ü–∏–∏")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if not root.find(".//style") and not root.find(".//script"):
                validation_result["warnings"].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–∏–ª–∏ –∏–ª–∏ —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            if not root.find(".//title") and not root.find(".//desc"):
                validation_result["warnings"].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (title/desc)")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π score
            total_score = 0.0
            max_score = 100.0
            
            # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (30 –±–∞–ª–ª–æ–≤)
            if not validation_result["errors"]:
                total_score += 30
            
            # Accessibility (25 –±–∞–ª–ª–æ–≤)
            total_score += accessibility_score * 25
            
            # Performance (25 –±–∞–ª–ª–æ–≤)
            total_score += performance_score * 25
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (20 –±–∞–ª–ª–æ–≤)
            feature_score = 0.0
            if animations:
                feature_score += 0.5
            if root.find(".//style") or root.find(".//script"):
                feature_score += 0.3
            if root.find(".//title") or root.find(".//desc"):
                feature_score += 0.2
            total_score += feature_score * 20
            
            validation_result["quality_score"] = min(total_score, max_score) / max_score
            validation_result["is_valid"] = len(validation_result["errors"]) == 0
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            validation_result["optimization_suggestions"] = self._generate_optimization_suggestions(
                validation_result, root
            )
            
        except Exception as e:
            validation_result["errors"].append(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        
        return validation_result
    
    def _check_accessibility(self, root: ET.Element) -> float:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ accessibility"""
        score = 0.0
        checks = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ title
        if root.find(".//title") is not None:
            score += 1.0
        checks += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ desc
        if root.find(".//desc") is not None:
            score += 1.0
        checks += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º aria-label
        aria_labels = root.findall(".//*[@aria-label]")
        if aria_labels:
            score += 1.0
        checks += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º role –∞—Ç—Ä–∏–±—É—Ç—ã
        roles = root.findall(".//*[@role]")
        if roles:
            score += 1.0
        checks += 1
        
        return score / checks if checks > 0 else 0.0
    
    def _check_performance(self, root: ET.Element) -> float:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        score = 0.0
        checks = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        total_elements = len(root.findall(".//*"))
        if total_elements < 100:
            score += 1.0
        elif total_elements < 200:
            score += 0.5
        checks += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ defs
        if root.find(".//defs") is not None:
            score += 1.0
        checks += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é path
        paths = root.findall(".//path")
        if paths:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å path
            complex_paths = 0
            for path in paths:
                d_attr = path.get('d', '')
                if len(d_attr) > 100:  # –°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–π path
                    complex_paths += 1
            
            if complex_paths == 0:
                score += 1.0
            elif complex_paths < len(paths) * 0.3:
                score += 0.5
        checks += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø
        groups = root.findall(".//g")
        if groups:
            score += 1.0
        checks += 1
        
        return score / checks if checks > 0 else 0.0
    
    def _generate_optimization_suggestions(self, validation_result: Dict[str, Any], root: ET.Element) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        suggestions = []
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—à–∏–±–æ–∫
        for error in validation_result["errors"]:
            if "xmlns" in error:
                suggestions.append("–î–æ–±–∞–≤—å—Ç–µ xmlns='http://www.w3.org/2000/svg' –≤ —Ç–µ–≥ svg")
            elif "viewBox" in error:
                suggestions.append("–î–æ–±–∞–≤—å—Ç–µ viewBox –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏")
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        for warning in validation_result["warnings"]:
            if "–∞–Ω–∏–º–∞—Ü–∏–∏" in warning:
                suggestions.append("–î–æ–±–∞–≤—å—Ç–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞")
            elif "–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏" in warning:
                suggestions.append("–î–æ–±–∞–≤—å—Ç–µ CSS —Å—Ç–∏–ª–∏ –∏ JavaScript –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
            elif "–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ" in warning:
                suggestions.append("–î–æ–±–∞–≤—å—Ç–µ title –∏ desc –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è accessibility")
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if validation_result["performance_score"] < 0.7:
            suggestions.append("–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
            suggestions.append("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ defs –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ accessibility
        if validation_result["accessibility_score"] < 0.7:
            suggestions.append("–î–æ–±–∞–≤—å—Ç–µ aria-label –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è accessibility")
            suggestions.append("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ role –∞—Ç—Ä–∏–±—É—Ç—ã")
        
        return suggestions[:5]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        await self.client.aclose()

    def _get_example_svg_templates(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ SVG —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞"""
        return {
            "system_architecture": """
<svg xmlns="http://www.w3.org/2000/svg" width="800" height="600" viewBox="0 0 800 600">
  <defs>
    <linearGradient id="componentGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#4CAF50;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#45a049;stop-opacity:1" />
    </linearGradient>
    <filter id="shadow" x="-50%" y="-50%" width="200%" height="200%">
      <feDropShadow dx="2" dy="2" stdDeviation="3" flood-color="#000000" flood-opacity="0.3"/>
    </filter>
  </defs>
  
  <title>System Architecture Example</title>
  <desc>Professional system architecture diagram with modern design</desc>
  
  <g id="components">
    <rect x="50" y="50" width="120" height="80" rx="10" fill="url(#componentGradient)" 
          filter="url(#shadow)" class="component" data-type="frontend" aria-label="Frontend Application"/>
    <text x="110" y="95" text-anchor="middle" fill="white" font-size="12">Frontend</text>
    
    <rect x="250" y="50" width="120" height="80" rx="10" fill="url(#componentGradient)" 
          filter="url(#shadow)" class="component" data-type="api" aria-label="API Gateway"/>
    <text x="310" y="95" text-anchor="middle" fill="white" font-size="12">API Gateway</text>
    
    <rect x="450" y="50" width="120" height="80" rx="10" fill="url(#componentGradient)" 
          filter="url(#shadow)" class="component" data-type="backend" aria-label="Backend Service"/>
    <text x="510" y="95" text-anchor="middle" fill="white" font-size="12">Backend</text>
    
    <rect x="650" y="50" width="120" height="80" rx="10" fill="url(#componentGradient)" 
          filter="url(#shadow)" class="component" data-type="database" aria-label="Database"/>
    <text x="710" y="95" text-anchor="middle" fill="white" font-size="12">Database</text>
  </g>
  
  <g id="relationships">
    <line x1="170" y1="90" x2="250" y2="90" stroke="#666" stroke-width="3" marker-end="url(#arrowhead)"/>
    <line x1="370" y1="90" x2="450" y2="90" stroke="#666" stroke-width="3" marker-end="url(#arrowhead)"/>
    <line x1="570" y1="90" x2="650" y2="90" stroke="#666" stroke-width="3" marker-end="url(#arrowhead)"/>
  </g>
  
  <g id="legend">
    <rect x="50" y="200" width="200" height="100" fill="#f5f5f5" stroke="#ddd"/>
    <text x="150" y="220" text-anchor="middle" font-weight="bold">Legend</text>
    <rect x="70" y="240" width="20" height="15" fill="url(#componentGradient)"/>
    <text x="100" y="252" font-size="12">Component</text>
    <line x1="70" y1="270" x2="90" y2="270" stroke="#666" stroke-width="3" marker-end="url(#arrowhead)"/>
    <text x="100" y="275" font-size="12">Connection</text>
  </g>
  
  <style>
    .component { cursor: pointer; transition: all 0.3s; }
    .component:hover { filter: brightness(1.2) drop-shadow(0 0 10px rgba(0,0,0,0.3)); }
  </style>
  
  <script>
    document.querySelectorAll('.component').forEach(el => {
      el.addEventListener('click', () => {
        const type = el.getAttribute('data-type');
        alert(`Clicked on ${type} component`);
      });
    });
  </script>
</svg>
""",
            "data_flow": """
<svg xmlns="http://www.w3.org/2000/svg" width="800" height="600" viewBox="0 0 800 600">
  <defs>
    <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" fill="#666"/>
    </marker>
    <linearGradient id="dataGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#4CAF50;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#45a049;stop-opacity:1" />
    </linearGradient>
  </defs>
  
  <title>Data Flow Example</title>
  <desc>Interactive data flow diagram with animations</desc>
  
  <g id="nodes">
    <circle cx="150" cy="150" r="40" fill="url(#dataGradient)" class="node" data-type="input">
      <animate attributeName="r" values="40;45;40" dur="2s" repeatCount="indefinite"/>
    </circle>
    <text x="150" y="155" text-anchor="middle" fill="white" font-size="12">Input</text>
    
    <circle cx="350" cy="150" r="40" fill="url(#dataGradient)" class="node" data-type="process">
      <animate attributeName="r" values="40;45;40" dur="2s" repeatCount="indefinite" begin="0.5s"/>
    </circle>
    <text x="350" y="155" text-anchor="middle" fill="white" font-size="12">Process</text>
    
    <circle cx="550" cy="150" r="40" fill="url(#dataGradient)" class="node" data-type="output">
      <animate attributeName="r" values="40;45;40" dur="2s" repeatCount="indefinite" begin="1s"/>
    </circle>
    <text x="550" y="155" text-anchor="middle" fill="white" font-size="12">Output</text>
  </g>
  
  <g id="connections">
    <line x1="190" y1="150" x2="310" y2="150" stroke="#666" stroke-width="3" 
          stroke-dasharray="5,5" marker-end="url(#arrowhead)" class="connection">
      <animate attributeName="stroke-dashoffset" values="0;-10" dur="1s" repeatCount="indefinite"/>
    </line>
    <line x1="390" y1="150" x2="510" y2="150" stroke="#666" stroke-width="3" 
          stroke-dasharray="5,5" marker-end="url(#arrowhead)" class="connection">
      <animate attributeName="stroke-dashoffset" values="0;-10" dur="1s" repeatCount="indefinite" begin="0.5s"/>
    </line>
  </g>
  
  <g id="legend">
    <rect x="50" y="250" width="200" height="120" fill="#f5f5f5" stroke="#ddd"/>
    <text x="150" y="270" text-anchor="middle" font-weight="bold">Data Types</text>
    <circle cx="70" cy="290" r="15" fill="#4CAF50"/>
    <text x="95" y="295" font-size="12">JSON Data</text>
    <circle cx="70" cy="315" r="15" fill="#2196F3"/>
    <text x="95" y="320" font-size="12">XML Data</text>
    <circle cx="70" cy="340" r="15" fill="#FF9800"/>
    <text x="95" y="345" font-size="12">Binary Data</text>
  </g>
  
  <style>
    .node { cursor: pointer; }
    .node:hover { filter: brightness(1.2); }
    .connection { animation: flow 2s linear infinite; }
  </style>
  
  <script>
    document.querySelectorAll('.node').forEach(el => {
      el.addEventListener('click', () => {
        const type = el.getAttribute('data-type');
        alert(`Data flow: ${type} node`);
      });
    });
  </script>
</svg>
""",
            "microservices": """
<svg xmlns="http://www.w3.org/2000/svg" width="800" height="600" viewBox="0 0 800 600">
  <defs>
    <linearGradient id="gatewayGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#FF6B6B;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#D63031;stop-opacity:1" />
    </linearGradient>
    <linearGradient id="serviceGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#4ECDC4;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#44A08D;stop-opacity:1" />
    </linearGradient>
    <filter id="glow" x="-50%" y="-50%" width="200%" height="200%">
      <feGaussianBlur stdDeviation="3" result="coloredBlur"/>
      <feMerge> 
        <feMergeNode in="coloredBlur"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>
  </defs>
  
  <title>Microservices Architecture Example</title>
  <desc>Professional microservices architecture with API Gateway</desc>
  
  <g id="gateway">
    <polygon points="400,50 450,80 450,120 400,150 350,120 350,80" 
             fill="url(#gatewayGradient)" filter="url(#glow)" class="gateway" aria-label="API Gateway">
      <animate attributeName="opacity" values="1;0.8;1" dur="3s" repeatCount="indefinite"/>
    </polygon>
    <text x="400" y="105" text-anchor="middle" fill="white" font-size="12">API Gateway</text>
  </g>
  
  <g id="services">
    <rect x="100" y="200" width="120" height="80" rx="10" fill="url(#serviceGradient)" 
          class="service" data-service="user" aria-label="User Service"/>
    <text x="160" y="245" text-anchor="middle" fill="white" font-size="12">User Service</text>
    
    <rect x="300" y="200" width="120" height="80" rx="10" fill="url(#serviceGradient)" 
          class="service" data-service="order" aria-label="Order Service"/>
    <text x="360" y="245" text-anchor="middle" fill="white" font-size="12">Order Service</text>
    
    <rect x="500" y="200" width="120" height="80" rx="10" fill="url(#serviceGradient)" 
          class="service" data-service="payment" aria-label="Payment Service"/>
    <text x="560" y="245" text-anchor="middle" fill="white" font-size="12">Payment Service</text>
  </g>
  
  <g id="databases">
    <ellipse cx="160" cy="350" rx="40" ry="20" fill="#45B7D1" class="database" aria-label="User Database"/>
    <text x="160" y="355" text-anchor="middle" fill="white" font-size="10">User DB</text>
    
    <ellipse cx="360" cy="350" rx="40" ry="20" fill="#45B7D1" class="database" aria-label="Order Database"/>
    <text x="360" y="355" text-anchor="middle" fill="white" font-size="10">Order DB</text>
    
    <ellipse cx="560" cy="350" rx="40" ry="20" fill="#45B7D1" class="database" aria-label="Payment Database"/>
    <text x="560" y="355" text-anchor="middle" fill="white" font-size="10">Payment DB</text>
  </g>
  
  <g id="connections">
    <line x1="400" y1="150" x2="160" y2="200" stroke="#666" stroke-width="2" 
          stroke-dasharray="5,5" class="connection"/>
    <line x1="400" y1="150" x2="360" y2="200" stroke="#666" stroke-width="2" 
          stroke-dasharray="5,5" class="connection"/>
    <line x1="400" y1="150" x2="560" y2="200" stroke="#666" stroke-width="2" 
          stroke-dasharray="5,5" class="connection"/>
    
    <line x1="160" y1="280" x2="160" y2="330" stroke="#666" stroke-width="2" class="connection"/>
    <line x1="360" y1="280" x2="360" y2="330" stroke="#666" stroke-width="2" class="connection"/>
    <line x1="560" y1="280" x2="560" y2="330" stroke="#666" stroke-width="2" class="connection"/>
  </g>
  
  <g id="legend">
    <rect x="50" y="400" width="250" height="150" fill="#f5f5f5" stroke="#ddd"/>
    <text x="175" y="420" text-anchor="middle" font-weight="bold">Microservices Legend</text>
    <polygon points="70,440 80,450 80,470 70,480 60,470 60,450" fill="url(#gatewayGradient)"/>
    <text x="90" y="465" font-size="12">API Gateway</text>
    <rect x="70" y="480" width="20" height="15" fill="url(#serviceGradient)"/>
    <text x="100" y="492" font-size="12">Microservice</text>
    <ellipse cx="80" cy="510" rx="10" ry="5" fill="#45B7D1"/>
    <text x="100" y="515" font-size="12">Database</text>
  </g>
  
  <style>
    .service { cursor: pointer; transition: all 0.3s; }
    .service:hover { filter: brightness(1.2) drop-shadow(0 0 10px rgba(0,0,0,0.3)); }
    .connection { animation: flow 2s linear infinite; }
    @keyframes flow { to { stroke-dashoffset: -10; } }
  </style>
  
  <script>
    document.querySelectorAll('.service').forEach(el => {
      el.addEventListener('click', () => {
        const service = el.getAttribute('data-service');
        alert(`Microservice: ${service}`);
      });
    });
  </script>
</svg>
"""
        }
    
    def _enhance_prompt_with_examples(self, prompt: str, diagram_type: str) -> str:
        """–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
        examples = self._get_example_svg_templates()
        example = examples.get(diagram_type, "")
        
        if example:
            enhanced_prompt = f"""
{prompt}

## –ü–†–ò–ú–ï–† –ö–ê–ß–ï–°–¢–í–ï–ù–ù–û–ì–û SVG –î–õ–Ø –î–ê–ù–ù–û–ì–û –¢–ò–ü–ê –î–ò–ê–ì–†–ê–ú–ú–´:

```svg
{example}
```

## –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ö–ê–ß–ï–°–¢–í–£:
1. –°–ª–µ–¥—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–∏–º–µ—Ä–∞ –≤—ã—à–µ
2. –ò—Å–ø–æ–ª—å–∑—É–π –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã
3. –î–æ–±–∞–≤—å –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
4. –û–±–µ—Å–ø–µ—á—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
5. –í–∫–ª—é—á–∏ accessibility –∞—Ç—Ä–∏–±—É—Ç—ã
6. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

–°–æ–∑–¥–∞–π –¥–∏–∞–≥—Ä–∞–º–º—É —Ç–æ–≥–æ –∂–µ –∫–∞—á–µ—Å—Ç–≤–∞, —á—Ç–æ –∏ –≤ –ø—Ä–∏–º–µ—Ä–µ, –Ω–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ —Å–≤—è–∑–µ–π.
"""
            return enhanced_prompt
        
        return prompt


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
svg_generator = None


async def initialize_svg_generator():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SVG –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    global svg_generator
    svg_generator = SVGGeneratorService()
    logger.info("SVG Generator Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")


async def get_svg_generator() -> SVGGeneratorService:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ SVG –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    if svg_generator is None:
        await initialize_svg_generator()
    return svg_generator