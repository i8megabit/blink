version: '3.8'

services:
  # LLM Tuning микросервис
  llm-tuning:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: llm-tuning-service
    ports:
      - "8005:8000"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://llm_tuning_user:llm_tuning_pass@llm-tuning-db:5432/llm_tuning_db
      - OLLAMA_BASE_URL=http://ollama:11435
      - API_KEY=dev-api-key-12345
      - DEBUG=true
      - LOG_LEVEL=INFO
      - RATE_LIMIT_PER_MINUTE=100
      - MAX_REQUEST_SIZE=10485760
      - ALLOWED_ORIGINS=["http://localhost:3000", "http://localhost:8080"]
      - DB_POOL_SIZE=10
      - DB_MAX_OVERFLOW=20
      - OLLAMA_TIMEOUT=300
      - OLLAMA_CONTEXT_LENGTH=4096
      - OLLAMA_BATCH_SIZE=512
      - OLLAMA_NUM_PARALLEL=2
      - OLLAMA_MEM_FRACTION=0.9
      - OLLAMA_METAL=1
      - OLLAMA_FLASH_ATTENTION=1
      - OLLAMA_KV_CACHE_TYPE=q8_0
    deploy:
      resources:
        limits:
          cpus: '2.086'
          memory: 3469M
        reservations:
          cpus: '1.043'
          memory: 1734M
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - llm-tuning-db
      - ollama
    networks:
      - llm-tuning-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # База данных PostgreSQL
  llm-tuning-db:
    image: postgres:15-alpine
    container_name: llm-tuning-database
    environment:
      - POSTGRES_DB=llm_tuning_db
      - POSTGRES_USER=llm_tuning_user
      - POSTGRES_PASSWORD=llm_tuning_pass
    deploy:
      resources:
        limits:
          cpus: '0.695'
          memory: 867M
        reservations:
          cpus: '0.347'
          memory: 433M
    ports:
      - "5433:5432"
    volumes:
      - llm-tuning-db-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - llm-tuning-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U llm_tuning_user -d llm_tuning_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Ollama для локального тестирования
  ollama:
    image: ollama/ollama:latest
    container_name: llm-tuning-ollama
    ports:
      - "11435:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
      - OLLAMA_MODELS=/app/models
    deploy:
      resources:
        limits:
          memory: 16G
          cpus: '8.0'
        reservations:
          memory: 8G
          cpus: '4.0'
    volumes:
      - ollama-models:/app/models
      - ollama-data:/root/.ollama
    networks:
      - llm-tuning-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis для кэширования (опционально)
  redis:
    image: redis:7-alpine
    container_name: llm-tuning-redis
    ports:
      - "6380:6379"
    deploy:
      resources:
        limits:
          cpus: '0.347'
          memory: 433M
        reservations:
          cpus: '0.173'
          memory: 216M
    volumes:
      - redis-data:/data
    networks:
      - llm-tuning-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx для обратного прокси (опционально)
  nginx:
    image: nginx:alpine
    container_name: llm-tuning-nginx
    ports:
      - "80:80"
      - "443:443"
    deploy:
      resources:
        limits:
          cpus: '0.347'
          memory: 433M
        reservations:
          cpus: '0.173'
          memory: 216M
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - llm-tuning
    networks:
      - llm-tuning-network
    restart: unless-stopped
    profiles:
      - production

  # Prometheus для мониторинга (опционально)
  prometheus:
    image: prom/prometheus:latest
    container_name: llm-tuning-prometheus
    ports:
      - "9090:9090"
    deploy:
      resources:
        limits:
          cpus: '0.347'
          memory: 433M
        reservations:
          cpus: '0.173'
          memory: 216M
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - llm-tuning-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana для визуализации метрик (опционально)
  grafana:
    image: grafana/grafana:latest
    container_name: llm-tuning-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    deploy:
      resources:
        limits:
          cpus: '0.347'
          memory: 433M
        reservations:
          cpus: '0.173'
          memory: 216M
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - llm-tuning-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Jaeger для трейсинга (опционально)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: llm-tuning-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    deploy:
      resources:
        limits:
          cpus: '0.347'
          memory: 433M
        reservations:
          cpus: '0.173'
          memory: 216M
    networks:
      - llm-tuning-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  llm-tuning-db-data:
    driver: local
  ollama-models:
    driver: local
  ollama-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  llm-tuning-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 