"""
üîó –ö–ª–∏–µ–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ LLM Tuning —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º reLink
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç seamless –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
"""

import asyncio
import aiohttp
import logging
from typing import Dict, Any, List, Optional, Union
from dataclasses import dataclass
from datetime import datetime
import json
from functools import wraps

logger = logging.getLogger(__name__)


@dataclass
class LLMTuningConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LLM Tuning –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—É"""
    base_url: str = "http://localhost:8001"
    api_key: str = "apple-silicon-api-key-2024"
    timeout: int = 30
    max_retries: int = 3
    retry_delay: float = 1.0


class LLMTuningClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM Tuning –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–º"""
    
    def __init__(self, config: LLMTuningConfig):
        self.config = config
        self.session: Optional[aiohttp.ClientSession] = None
        self._headers = {
            "Authorization": f"Bearer {config.api_key}",
            "Content-Type": "application/json",
            "User-Agent": "reLink-LLM-Tuning-Client/1.0"
        }
    
    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥"""
        timeout = aiohttp.ClientTimeout(total=self.config.timeout)
        self.session = aiohttp.ClientSession(
            base_url=self.config.base_url,
            timeout=timeout,
            headers=self._headers
        )
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥"""
        if self.session:
            await self.session.close()
    
    async def _make_request(self, method: str, endpoint: str, data: Dict = None) -> Dict:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(self.config.max_retries):
            try:
                async with self.session.request(method, endpoint, json=data) as response:
                    if response.status == 200:
                        return await response.json()
                    elif response.status == 404:
                        raise ValueError(f"Endpoint not found: {endpoint}")
                    elif response.status == 401:
                        raise ValueError("Unauthorized - check API key")
                    elif response.status == 503:
                        raise ValueError("Service unavailable - LLM Tuning service is down")
                    else:
                        error_text = await response.text()
                        raise Exception(f"HTTP {response.status}: {error_text}")
            except Exception as e:
                if attempt == self.config.max_retries - 1:
                    raise
                logger.warning(f"Attempt {attempt + 1} failed: {e}")
                await asyncio.sleep(self.config.retry_delay * (2 ** attempt))
    
    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è LLM Tuning —Å–µ—Ä–≤–∏—Å–∞"""
        return await self._make_request("GET", "/health")
    
    async def get_models(self, provider: str = None, status: str = None) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        params = {}
        if provider:
            params["provider"] = provider
        if status:
            params["status"] = status
        
        endpoint = "/api/v1/models"
        if params:
            query_string = "&".join([f"{k}={v}" for k, v in params.items()])
            endpoint += f"?{query_string}"
        
        return await self._make_request("GET", endpoint)
    
    async def route_request(self, prompt: str, context: str = None, 
                          model: str = None, **kwargs) -> Dict[str, Any]:
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        data = {
            "prompt": prompt,
            "context": context,
            "model": model,
            **kwargs
        }
        
        return await self._make_request("POST", "/api/v1/route", data)
    
    async def rag_query(self, query: str, model: str = None, 
                       top_k: int = 5, include_sources: bool = True) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ RAG –∑–∞–ø—Ä–æ—Å–∞"""
        data = {
            "query": query,
            "model": model,
            "top_k": top_k,
            "include_sources": include_sources
        }
        
        return await self._make_request("POST", "/api/v1/rag/query", data)
    
    async def add_document(self, title: str, content: str, source: str = None,
                          document_type: str = None, tags: List[str] = None) -> Dict[str, Any]:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ RAG —Å–∏—Å—Ç–µ–º—É"""
        data = {
            "title": title,
            "content": content,
            "source": source,
            "document_type": document_type,
            "tags": tags or []
        }
        
        return await self._make_request("POST", "/api/v1/rag/documents", data)
    
    async def create_tuning_session(self, model_id: int, training_data: List[Dict],
                                  strategy: str = "adaptive") -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Ç—é–Ω–∏–Ω–≥–∞ –º–æ–¥–µ–ª–∏"""
        data = {
            "model_id": model_id,
            "training_data": training_data,
            "strategy": strategy
        }
        
        return await self._make_request("POST", "/api/v1/tuning/sessions", data)
    
    async def get_tuning_sessions(self, model_id: int = None, status: str = None) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π —Ç—é–Ω–∏–Ω–≥–∞"""
        params = {}
        if model_id:
            params["model_id"] = model_id
        if status:
            params["status"] = status
        
        endpoint = "/api/v1/tuning/sessions"
        if params:
            query_string = "&".join([f"{k}={v}" for k, v in params.items()])
            endpoint += f"?{query_string}"
        
        return await self._make_request("GET", endpoint)
    
    async def optimize_model(self, model_id: int) -> Dict[str, Any]:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏"""
        return await self._make_request("POST", f"/api/v1/tuning/optimize?model_id={model_id}")
    
    async def get_metrics(self, model_id: int = None, time_range: str = "24h") -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        params = {"time_range": time_range}
        if model_id:
            params["model_id"] = model_id
        
        endpoint = "/api/v1/metrics/summary"
        if params:
            query_string = "&".join([f"{k}={v}" for k, v in params.items()])
            endpoint += f"?{query_string}"
        
        return await self._make_request("GET", endpoint)
    
    async def record_metrics(self, model_id: int, response_time: float, 
                           token_count: int, quality_score: float = None) -> Dict[str, Any]:
        """–ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        data = {
            "model_id": model_id,
            "response_time": response_time,
            "token_count": token_count,
            "quality_score": quality_score,
            "timestamp": datetime.utcnow().isoformat()
        }
        
        return await self._make_request("POST", "/api/v1/metrics", data)


class ReLinkIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è LLM Tuning —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º reLink"""
    
    def __init__(self, llm_client: LLMTuningClient):
        self.llm_client = llm_client
        self._cache: Dict[str, Any] = {}
    
    async def analyze_seo_content(self, content: str, domain: str = None) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ SEO –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é LLM Tuning"""
        try:
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è SEO –∞–Ω–∞–ª–∏–∑–∞
            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è SEO:
            
            –ö–æ–Ω—Ç–µ–Ω—Ç: {content}
            –î–æ–º–µ–Ω: {domain or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
            
            –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∞–Ω–∞–ª–∏–∑ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—É–Ω–∫—Ç–∞–º:
            1. –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –∏—Ö –ø–ª–æ—Ç–Ω–æ—Å—Ç—å
            2. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (H1, H2, H3)
            3. –ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏—è –∏ title
            4. –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏ –≤–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏
            5. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            6. –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
            7. –ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è
            8. –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
            """
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ RAG –∑–∞–ø—Ä–æ—Å–∞
            result = await self.llm_client.rag_query(
                query=prompt,
                model="qwen2.5:7b-turbo",
                top_k=5,
                include_sources=True
            )
            
            return {
                "analysis": result.get("answer", ""),
                "sources": result.get("sources", []),
                "processing_time": result.get("processing_time", 0),
                "domain": domain,
                "content_length": len(content)
            }
            
        except Exception as e:
            logger.error(f"Error analyzing SEO content: {e}")
            return {
                "error": str(e),
                "analysis": "–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                "sources": [],
                "processing_time": 0
            }
    
    async def generate_seo_recommendations(self, website_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SEO —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞"""
        try:
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞
            context = f"""
            –î–∞–Ω–Ω—ã–µ —Å–∞–π—Ç–∞:
            - URL: {website_data.get('url', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
            - –¢–∏–ø —Å–∞–π—Ç–∞: {website_data.get('type', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
            - –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {website_data.get('audience', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}
            - –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {website_data.get('keywords', [])}
            - –¢–µ–∫—É—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {website_data.get('issues', [])}
            """
            
            prompt = f"""
            –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ SEO —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
            
            {context}
            
            –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ:
            1. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            2. –ö–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            3. –ö–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            4. –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–µ
            5. –í–Ω–µ—à–Ω–∏–º —Å—Å—ã–ª–∫–∞–º
            6. –õ–æ–∫–∞–ª—å–Ω–æ–º—É SEO (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
            7. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º –≤–Ω–µ–¥—Ä–µ–Ω–∏—è
            """
            
            # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
            result = await self.llm_client.route_request(
                prompt=prompt,
                context=context,
                model="qwen2.5:7b-turbo"
            )
            
            return {
                "recommendations": result.get("response", ""),
                "model_used": result.get("model", ""),
                "confidence": result.get("confidence", 0),
                "processing_time": result.get("processing_time", 0)
            }
            
        except Exception as e:
            logger.error(f"Error generating SEO recommendations: {e}")
            return {
                "error": str(e),
                "recommendations": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                "model_used": "",
                "confidence": 0,
                "processing_time": 0
            }
    
    async def optimize_content(self, content: str, target_keywords: List[str]) -> Dict[str, Any]:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–¥ —Ü–µ–ª–µ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"""
        try:
            prompt = f"""
            –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–¥ —Ü–µ–ª–µ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:
            
            –ö–æ–Ω—Ç–µ–Ω—Ç: {content}
            –¶–µ–ª–µ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(target_keywords)}
            
            –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å:
            1. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            2. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
            3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            4. –ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏—è
            5. –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
            """
            
            result = await self.llm_client.rag_query(
                query=prompt,
                model="qwen2.5:7b-turbo",
                top_k=3,
                include_sources=True
            )
            
            return {
                "optimized_content": result.get("answer", ""),
                "sources": result.get("sources", []),
                "processing_time": result.get("processing_time", 0),
                "original_length": len(content),
                "target_keywords": target_keywords
            }
            
        except Exception as e:
            logger.error(f"Error optimizing content: {e}")
            return {
                "error": str(e),
                "optimized_content": content,
                "sources": [],
                "processing_time": 0
            }
    
    async def add_seo_knowledge_base(self, documents: List[Dict[str, str]]) -> Dict[str, Any]:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ SEO –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –≤ RAG —Å–∏—Å—Ç–µ–º—É"""
        try:
            results = []
            for doc in documents:
                result = await self.llm_client.add_document(
                    title=doc.get("title", "SEO Document"),
                    content=doc.get("content", ""),
                    source=doc.get("source", "reLink"),
                    document_type="seo_knowledge",
                    tags=doc.get("tags", ["seo", "optimization"])
                )
                results.append(result)
            
            return {
                "documents_added": len(results),
                "results": results,
                "status": "success"
            }
            
        except Exception as e:
            logger.error(f"Error adding SEO knowledge base: {e}")
            return {
                "error": str(e),
                "documents_added": 0,
                "results": [],
                "status": "error"
            }
    
    async def get_performance_metrics(self, time_range: str = "7d") -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ LLM Tuning"""
        try:
            metrics = await self.llm_client.get_metrics(time_range=time_range)
            
            return {
                "metrics": metrics,
                "time_range": time_range,
                "timestamp": datetime.utcnow().isoformat()
            }
            
        except Exception as e:
            logger.error(f"Error getting performance metrics: {e}")
            return {
                "error": str(e),
                "metrics": {},
                "time_range": time_range,
                "timestamp": datetime.utcnow().isoformat()
            }


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
def with_llm_tuning(config: LLMTuningConfig):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å LLM Tuning"""
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            async with LLMTuningClient(config) as client:
                integration = ReLinkIntegration(client)
                kwargs['llm_integration'] = integration
                return await func(*args, **kwargs)
        return wrapper
    return decorator


def cache_llm_results(ttl: int = 3600):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ LLM"""
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ - –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis
            cache_key = f"{func.__name__}:{hash(str(args) + str(kwargs))}"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
            if hasattr(wrapper, '_cache') and cache_key in wrapper._cache:
                cache_entry = wrapper._cache[cache_key]
                if datetime.utcnow().timestamp() - cache_entry['timestamp'] < ttl:
                    return cache_entry['result']
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            result = await func(*args, **kwargs)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
            if not hasattr(wrapper, '_cache'):
                wrapper._cache = {}
            
            wrapper._cache[cache_key] = {
                'result': result,
                'timestamp': datetime.utcnow().timestamp()
            }
            
            return result
        return wrapper
    return decorator


# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def example_usage():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    config = LLMTuningConfig(
        base_url="http://localhost:8001",
        api_key="your-api-key"
    )
    
    async with LLMTuningClient(config) as client:
        integration = ReLinkIntegration(client)
        
        # –ê–Ω–∞–ª–∏–∑ SEO –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content = "–í–∞—à SEO –∫–æ–Ω—Ç–µ–Ω—Ç –∑–¥–µ—Å—å..."
        analysis = await integration.analyze_seo_content(content, "example.com")
        print("SEO Analysis:", analysis)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        website_data = {
            "url": "https://example.com",
            "type": "e-commerce",
            "audience": "B2C",
            "keywords": ["seo", "optimization"],
            "issues": ["slow loading", "poor mobile"]
        }
        recommendations = await integration.generate_seo_recommendations(website_data)
        print("Recommendations:", recommendations)


if __name__ == "__main__":
    asyncio.run(example_usage()) 