#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç UX-–±–æ—Ç–∞ reLink –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import asyncio
import logging
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.core import UXBotCore
from app.config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('ux_bot_fast_test.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)


async def test_ux_bot_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UX-–±–æ—Ç–∞"""
    logger.info("=== –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UX-–±–æ—Ç–∞ ===")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UX-–±–æ—Ç–∞
        ux_bot = UXBotCore()
        await ux_bot.initialize(user_profile_id="seo_expert")
        
        logger.info("‚úÖ UX-–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {ux_bot.current_user_profile.name if ux_bot.current_user_profile else '–ù–µ –∑–∞–¥–∞–Ω'}")
        logger.info(f"–°–µ—Å—Å–∏—è ID: {ux_bot.session_id}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UX-–±–æ—Ç–∞: {e}")
        return False


async def test_user_profiles():
    """–¢–µ—Å—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    logger.info("=== –¢–µ—Å—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—è–º
        from app.services.scenario_service import ScenarioService
        scenario_service = ScenarioService()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
        profiles = scenario_service.get_all_user_profiles()
        
        logger.info(f"–î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {len(profiles)}")
        
        for profile in profiles:
            logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å: {profile.name}")
            logger.info(f"  –û–ø–∏—Å–∞–Ω–∏–µ: {profile.description}")
            logger.info(f"  –ü–æ–≤–µ–¥–µ–Ω–∏–µ: {profile.behavior}")
            logger.info(f"  –°–∫–æ—Ä–æ—Å—Ç—å: {profile.speed}")
            logger.info(f"  –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {profile.preferences}")
            logger.info(f"  –¢–∏–ø–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: {profile.typical_actions}")
            logger.info("---")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return False


async def test_scenarios():
    """–¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    logger.info("=== –¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ ===")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        from app.services.scenario_service import ScenarioService
        scenario_service = ScenarioService()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        scenarios = scenario_service.list_scenarios()
        
        logger.info(f"–î–æ—Å—Ç—É–ø–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(scenarios)}")
        
        for scenario in scenarios:
            logger.info(f"–°—Ü–µ–Ω–∞—Ä–∏–π: {scenario.name}")
            logger.info(f"  ID: {scenario.scenario_id}")
            logger.info(f"  –û–ø–∏—Å–∞–Ω–∏–µ: {scenario.description}")
            logger.info(f"  –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {scenario.priority}")
            logger.info(f"  –®–∞–≥–æ–≤: {len(scenario.steps)}")
            logger.info(f"  –¢–∞–π–º–∞—É—Ç: {scenario.timeout}—Å")
            
            # –î–µ—Ç–∞–ª–∏ —à–∞–≥–æ–≤
            for i, step in enumerate(scenario.steps[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —à–∞–≥–∞
                logger.info(f"    –®–∞–≥ {i+1}: {step.description}")
                logger.info(f"      –î–µ–π—Å—Ç–≤–∏–µ: {step.action}")
                logger.info(f"      –¶–µ–ª—å: {step.target}")
            
            if len(scenario.steps) > 3:
                logger.info(f"    ... –∏ –µ—â–µ {len(scenario.steps) - 3} —à–∞–≥–æ–≤")
            
            logger.info("---")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        stats = scenario_service.get_scenario_statistics()
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {stats}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {e}")
        return False


async def test_mock_page_analysis():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –º–æ–∫–∞–º–∏"""
    logger.info("=== –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–º–æ–∫) ===")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UX-–±–æ—Ç–∞
        ux_bot = UXBotCore()
        await ux_bot.initialize(user_profile_id="seo_expert")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        from app.models import PageAnalysis
        mock_analysis = PageAnalysis(
            url="https://example.com",
            title="Example Page",
            elements=[
                {"type": "button", "text": "Submit", "selector": "button[type='submit']"},
                {"type": "input", "text": "", "selector": "input[name='email']"},
                {"type": "link", "text": "Home", "selector": "a[href='/']"}
            ],
            accessibility_issues=[
                {"type": "contrast", "severity": "medium", "description": "Low contrast text"}
            ],
            responsiveness_issues=[
                {"type": "overflow", "severity": "low", "description": "Content overflow on mobile"}
            ],
            performance_metrics={
                "load_time": 1.2,
                "first_paint": 0.8,
                "first_contentful_paint": 1.0
            }
        )
        
        logger.info(f"‚úÖ –ú–æ–∫ –∞–Ω–∞–ª–∏–∑ —Å–æ–∑–¥–∞–Ω")
        logger.info(f"URL: {mock_analysis.url}")
        logger.info(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {mock_analysis.title}")
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(mock_analysis.elements)}")
        logger.info(f"–ü—Ä–æ–±–ª–µ–º—ã –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {len(mock_analysis.accessibility_issues)}")
        logger.info(f"–ü—Ä–æ–±–ª–µ–º—ã –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏: {len(mock_analysis.responsiveness_issues)}")
        logger.info(f"–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {len(mock_analysis.performance_metrics)}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return False


async def test_api_client():
    """–¢–µ—Å—Ç API –∫–ª–∏–µ–Ω—Ç–∞"""
    logger.info("=== –¢–µ—Å—Ç API –∫–ª–∏–µ–Ω—Ç–∞ ===")
    
    try:
        from app.api_client import APIClient
        from app.models import APIConfig
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API
        config = APIConfig(
            base_url="http://localhost:8000",
            timeout=5
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ API –∫–ª–∏–µ–Ω—Ç–∞
        api_client = APIClient(config)
        
        logger.info("‚úÖ API –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
        logger.info(f"Base URL: {config.base_url}")
        logger.info(f"Timeout: {config.timeout}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ API –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è UX-–±–æ—Ç–∞ reLink")
    logger.info(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now()}")
    
    # –°–ø–∏—Å–æ–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UX-–±–æ—Ç–∞", test_ux_bot_initialization),
        ("–ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", test_user_profiles),
        ("–°—Ü–µ–Ω–∞—Ä–∏–∏", test_scenarios),
        ("–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–º–æ–∫)", test_mock_page_analysis),
        ("API –∫–ª–∏–µ–Ω—Ç", test_api_client),
    ]
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    results = {}
    
    for test_name, test_func in tests:
        logger.info(f"\n{'='*50}")
        logger.info(f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
        logger.info(f"{'='*50}")
        
        try:
            result = await test_func()
            results[test_name] = result
            
            if result:
                logger.info(f"‚úÖ –¢–µ—Å—Ç '{test_name}' –ü–†–û–ô–î–ï–ù")
            else:
                logger.error(f"‚ùå –¢–µ—Å—Ç '{test_name}' –ü–†–û–í–ê–õ–ï–ù")
                
        except Exception as e:
            logger.error(f"‚ùå –¢–µ—Å—Ç '{test_name}' –í–´–ó–í–ê–õ –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info(f"\n{'='*50}")
    logger.info("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    logger.info(f"{'='*50}")
    
    passed_tests = sum(1 for result in results.values() if result)
    total_tests = len(results)
    
    logger.info(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    logger.info(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    logger.info(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}")
    logger.info(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed_tests / total_tests) * 100:.1f}%")
    
    logger.info("\n–î–µ—Ç–∞–ª–∏:")
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        logger.info(f"  {test_name}: {status}")
    
    logger.info(f"\n–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now()}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã
    return passed_tests == total_tests


if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤
        success = asyncio.run(main())
        
        if success:
            logger.info("üéâ –í—Å–µ –±—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!")
            sys.exit(0)
        else:
            logger.error("üí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å!")
            sys.exit(1)
            
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 