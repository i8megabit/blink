"""
üß† Pydantic —Å—Ö–µ–º—ã –¥–ª—è LLM Tuning –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å—Ö–µ–º—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π –¥–ª—è –≤—Å–µ—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
"""

from typing import List, Optional, Dict, Any, Union
from datetime import datetime, timedelta
from enum import Enum
from pydantic import BaseModel, Field, validator, root_validator, computed_field
import re


# Enums –¥–ª—è —Å—Ö–µ–º
class ModelStatusEnum(str, Enum):
    ACTIVE = "active"
    INACTIVE = "inactive"
    TRAINING = "training"
    ERROR = "error"
    OPTIMIZING = "optimizing"


class RouteStrategyEnum(str, Enum):
    SMART = "smart"
    ROUND_ROBIN = "round_robin"
    LOAD_BASED = "load_based"
    QUALITY_BASED = "quality_based"
    AB_TESTING = "ab_testing"


class TuningStrategyEnum(str, Enum):
    ADAPTIVE = "adaptive"
    AGGREGATE = "aggregate"
    HYBRID = "hybrid"
    MANUAL = "manual"
    CONTINUOUS = "continuous"


class ABTestStatusEnum(str, Enum):
    ACTIVE = "active"
    PAUSED = "paused"
    COMPLETED = "completed"
    FAILED = "failed"


class OptimizationTypeEnum(str, Enum):
    PERFORMANCE = "performance"
    QUALITY = "quality"
    MEMORY = "memory"
    LATENCY = "latency"
    HYBRID = "hybrid"


class QualityMetricEnum(str, Enum):
    RELEVANCE = "relevance"
    ACCURACY = "accuracy"
    COHERENCE = "coherence"
    FLUENCY = "fluency"
    COMPLETENESS = "completeness"
    RESPONSE_TIME = "response_time"


# –ë–∞–∑–æ–≤—ã–µ —Å—Ö–µ–º—ã
class BaseModelSchema(BaseModel):
    """–ë–∞–∑–æ–≤–∞—è —Å—Ö–µ–º–∞ —Å –æ–±—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    
    class Config:
        from_attributes = True
        json_encoders = {
            datetime: lambda v: v.isoformat()
        }


# –°—Ö–µ–º—ã –¥–ª—è –º–æ–¥–µ–ª–µ–π LLM
class LLMModelCreate(BaseModelSchema):
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ LLM"""
    name: str = Field(..., min_length=1, max_length=255, description="–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    provider: str = Field(default="ollama", description="–ü—Ä–æ–≤–∞–π–¥–µ—Ä –º–æ–¥–µ–ª–∏")
    version: str = Field(default="latest", description="–í–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏")
    description: Optional[str] = Field(None, max_length=1000, description="–û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
    parameters: Dict[str, Any] = Field(default_factory=dict, description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    context_length: int = Field(default=4096, ge=512, le=32768, description="–î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
    max_tokens: int = Field(default=2048, ge=1, le=8192, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤")
    temperature: float = Field(default=0.7, ge=0.0, le=2.0, description="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    top_p: float = Field(default=0.9, ge=0.0, le=1.0, description="Top-p –ø–∞—Ä–∞–º–µ—Ç—Ä")
    
    @validator('name')
    def validate_name(cls, v):
        if not re.match(r'^[a-zA-Z0-9._-]+$', v):
            raise ValueError('–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫–∏, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ –¥–µ—Ñ–∏—Å—ã')
        return v


class LLMModelUpdate(BaseModelSchema):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ LLM"""
    description: Optional[str] = Field(None, max_length=1000)
    parameters: Optional[Dict[str, Any]] = None
    context_length: Optional[int] = Field(None, ge=512, le=32768)
    max_tokens: Optional[int] = Field(None, ge=1, le=8192)
    temperature: Optional[float] = Field(None, ge=0.0, le=2.0)
    top_p: Optional[float] = Field(None, ge=0.0, le=1.0)
    status: Optional[ModelStatusEnum] = None
    is_available: Optional[bool] = None
    is_default: Optional[bool] = None


class LLMModelResponse(BaseModelSchema):
    """–û—Ç–≤–µ—Ç —Å –º–æ–¥–µ–ª—å—é LLM"""
    id: int
    name: str
    provider: str
    version: str
    description: Optional[str]
    parameters: Dict[str, Any]
    context_length: int
    max_tokens: int
    temperature: float
    top_p: float
    status: ModelStatusEnum
    is_available: bool
    is_default: bool
    avg_response_time: float
    success_rate: float
    quality_score: float
    created_at: datetime
    updated_at: Optional[datetime]


# –°—Ö–µ–º—ã –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
class RouteCreate(BaseModelSchema):
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞"""
    name: str = Field(..., min_length=1, max_length=255, description="–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞")
    model_id: int = Field(..., gt=0, description="ID –º–æ–¥–µ–ª–∏")
    strategy: RouteStrategyEnum = Field(default=RouteStrategyEnum.SMART, description="–°—Ç—Ä–∞—Ç–µ–≥–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏")
    priority: int = Field(default=1, ge=1, le=100, description="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞")
    weight: float = Field(default=1.0, ge=0.0, le=10.0, description="–í–µ—Å –º–∞—Ä—à—Ä—É—Ç–∞")
    
    # –£—Å–ª–æ–≤–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
    request_types: List[str] = Field(default_factory=list, description="–¢–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤")
    keywords: List[str] = Field(default_factory=list, description="–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
    complexity_threshold: float = Field(default=0.0, ge=0.0, le=1.0, description="–ü–æ—Ä–æ–≥ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")
    user_tiers: List[str] = Field(default_factory=list, description="–£—Ä–æ–≤–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    is_active: bool = Field(default=True, description="–ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –º–∞—Ä—à—Ä—É—Ç")
    is_default: bool = Field(default=False, description="–ú–∞—Ä—à—Ä—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")


class RouteUpdate(BaseModelSchema):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞"""
    strategy: Optional[RouteStrategyEnum] = None
    priority: Optional[int] = Field(None, ge=1, le=100)
    weight: Optional[float] = Field(None, ge=0.0, le=10.0)
    request_types: Optional[List[str]] = None
    keywords: Optional[List[str]] = None
    complexity_threshold: Optional[float] = Field(None, ge=0.0, le=1.0)
    user_tiers: Optional[List[str]] = None
    is_active: Optional[bool] = None
    is_default: Optional[bool] = None


class RouteResponse(BaseModelSchema):
    """–û—Ç–≤–µ—Ç —Å –º–∞—Ä—à—Ä—É—Ç–æ–º"""
    id: int
    name: str
    model_id: int
    strategy: RouteStrategyEnum
    priority: int
    weight: float
    request_types: List[str]
    keywords: List[str]
    complexity_threshold: float
    user_tiers: List[str]
    is_active: bool
    is_default: bool
    created_at: datetime
    updated_at: Optional[datetime]


# –°—Ö–µ–º—ã –¥–ª—è —Ç—é–Ω–∏–Ω–≥–∞
class TuningSessionCreate(BaseModelSchema):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Ç—é–Ω–∏–Ω–≥–∞"""
    name: str = Field(..., min_length=1, max_length=255, description="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏")
    model_id: int = Field(..., gt=0, description="ID –º–æ–¥–µ–ª–∏")
    strategy: TuningStrategyEnum = Field(default=TuningStrategyEnum.ADAPTIVE, description="–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç—é–Ω–∏–Ω–≥–∞")
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    training_data: List[Dict[str, str]] = Field(..., min_items=1, description="–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
    validation_data: List[Dict[str, str]] = Field(default_factory=list, description="–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    
    # –ì–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    learning_rate: float = Field(default=0.001, ge=0.0001, le=0.1, description="–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è")
    batch_size: int = Field(default=32, ge=1, le=128, description="–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞")
    epochs: int = Field(default=3, ge=1, le=50, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö")
    
    @validator('training_data')
    def validate_training_data(cls, v):
        for item in v:
            if not isinstance(item, dict) or 'prompt' not in item or 'response' not in item:
                raise ValueError('–ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç training_data –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è "prompt" –∏ "response"')
        return v


class TuningSessionUpdate(BaseModelSchema):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Ç—é–Ω–∏–Ω–≥–∞"""
    name: Optional[str] = Field(None, min_length=1, max_length=255)
    strategy: Optional[TuningStrategyEnum] = None
    training_data: Optional[List[Dict[str, str]]] = None
    validation_data: Optional[List[Dict[str, str]]] = None
    learning_rate: Optional[float] = Field(None, ge=0.0001, le=0.1)
    batch_size: Optional[int] = Field(None, ge=1, le=128)
    epochs: Optional[int] = Field(None, ge=1, le=50)


class TuningSessionResponse(BaseModelSchema):
    """–û—Ç–≤–µ—Ç —Å —Å–µ—Å—Å–∏–µ–π —Ç—é–Ω–∏–Ω–≥–∞"""
    id: int
    name: str
    model_id: int
    strategy: TuningStrategyEnum
    training_data: List[Dict[str, str]]
    validation_data: List[Dict[str, str]]
    learning_rate: float
    batch_size: int
    epochs: int
    status: str
    progress: float
    current_epoch: int
    final_quality_score: float
    improvement_metrics: Dict[str, Any]
    error_log: Optional[str]
    started_at: Optional[datetime]
    completed_at: Optional[datetime]
    created_at: datetime
    updated_at: Optional[datetime]


# –°—Ö–µ–º—ã –¥–ª—è RAG
class RAGQuery(BaseModelSchema):
    """RAG –∑–∞–ø—Ä–æ—Å"""
    query: str = Field(..., min_length=1, max_length=5000, description="–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    context_type: Optional[str] = Field(None, description="–¢–∏–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
    top_k: int = Field(default=5, ge=1, le=20, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    similarity_threshold: float = Field(default=0.7, ge=0.0, le=1.0, description="–ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏")
    use_hybrid_search: bool = Field(default=True, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫")
    max_context_length: Optional[int] = Field(None, ge=100, le=8000, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")


class RAGDocumentCreate(BaseModelSchema):
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ RAG"""
    title: str = Field(..., min_length=1, max_length=500, description="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    content: str = Field(..., min_length=1, max_length=50000, description="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    source: Optional[str] = Field(None, max_length=500, description="–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    document_type: str = Field(default="general", max_length=100, description="–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    tags: List[str] = Field(default_factory=list, description="–¢–µ–≥–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    doc_metadata: Dict[str, Any] = Field(default_factory=dict, description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")


class RAGDocumentUpdate(BaseModelSchema):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ RAG"""
    title: Optional[str] = Field(None, min_length=1, max_length=500)
    content: Optional[str] = Field(None, min_length=1, max_length=50000)
    source: Optional[str] = Field(None, max_length=500)
    document_type: Optional[str] = Field(None, max_length=100)
    tags: Optional[List[str]] = None
    doc_metadata: Optional[Dict[str, Any]] = None


class RAGDocumentResponse(BaseModelSchema):
    """–û—Ç–≤–µ—Ç —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º RAG"""
    id: int
    title: str
    content: str
    source: Optional[str]
    document_type: str
    tags: List[str]
    doc_metadata: Dict[str, Any]
    usage_count: int
    last_used: Optional[datetime]
    created_at: datetime
    updated_at: Optional[datetime]


class RAGResponse(BaseModelSchema):
    """RAG –æ—Ç–≤–µ—Ç"""
    answer: str = Field(..., description="–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å")
    sources: List[Dict[str, Any]] = Field(default_factory=list, description="–ò—Å—Ç–æ—á–Ω–∏–∫–∏")
    confidence: float = Field(..., ge=0.0, le=1.0, description="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ")
    response_time: float = Field(..., ge=0.0, description="–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    tokens_used: int = Field(..., ge=0, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤")
    context_documents: List[RAGDocumentResponse] = Field(default_factory=list, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")


# –°—Ö–µ–º—ã –¥–ª—è A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class ABTestCreate(BaseModelSchema):
    """–°–æ–∑–¥–∞–Ω–∏–µ A/B —Ç–µ—Å—Ç–∞"""
    name: str = Field(..., min_length=1, max_length=255, description="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞")
    model_id: int = Field(..., gt=0, description="ID –º–æ–¥–µ–ª–∏")
    control_model: str = Field(..., min_length=1, max_length=255, description="–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å")
    variant_model: str = Field(..., min_length=1, max_length=255, description="–¢–µ—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å")
    traffic_split: float = Field(default=0.5, ge=0.1, le=0.9, description="–î–æ–ª—è —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞")
    
    # –£—Å–ª–æ–≤–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    request_types: List[str] = Field(default_factory=list, description="–¢–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    user_segments: List[str] = Field(default_factory=list, description="–°–µ–≥–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    start_date: datetime = Field(..., description="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞")
    end_date: Optional[datetime] = Field(None, description="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ—Å—Ç–∞")
    
    @validator('end_date')
    def validate_end_date(cls, v, values):
        if v and 'start_date' in values and v <= values['start_date']:
            raise ValueError('–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞')
        return v


class ABTestUpdate(BaseModelSchema):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ A/B —Ç–µ—Å—Ç–∞"""
    name: Optional[str] = Field(None, min_length=1, max_length=255)
    control_model: Optional[str] = Field(None, min_length=1, max_length=255)
    variant_model: Optional[str] = Field(None, min_length=1, max_length=255)
    traffic_split: Optional[float] = Field(None, ge=0.1, le=0.9)
    request_types: Optional[List[str]] = None
    user_segments: Optional[List[str]] = None
    start_date: Optional[datetime] = None
    end_date: Optional[datetime] = None
    status: Optional[ABTestStatusEnum] = None
    is_active: Optional[bool] = None


class ABTestResponse(BaseModelSchema):
    """–û—Ç–≤–µ—Ç —Å A/B —Ç–µ—Å—Ç–æ–º"""
    id: int
    name: str
    model_id: int
    control_model: str
    variant_model: str
    traffic_split: float
    request_types: List[str]
    user_segments: List[str]
    start_date: datetime
    end_date: Optional[datetime]
    status: ABTestStatusEnum
    is_active: bool
    control_metrics: Dict[str, Any]
    variant_metrics: Dict[str, Any]
    statistical_significance: float
    winner: Optional[str]
    created_at: datetime
    updated_at: Optional[datetime]


# –°—Ö–µ–º—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
class ModelOptimizationCreate(BaseModelSchema):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏"""
    model_id: int = Field(..., gt=0, description="ID –º–æ–¥–µ–ª–∏")
    optimization_type: OptimizationTypeEnum = Field(..., description="–¢–∏–ø –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    parameters: Dict[str, Any] = Field(default_factory=dict, description="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    target_metrics: Dict[str, Any] = Field(default_factory=dict, description="–¶–µ–ª–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")


class ModelOptimizationResponse(BaseModelSchema):
    """–û—Ç–≤–µ—Ç —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –º–æ–¥–µ–ª–∏"""
    id: int
    model_id: int
    optimization_type: OptimizationTypeEnum
    parameters: Dict[str, Any]
    target_metrics: Dict[str, Any]
    before_metrics: Dict[str, Any]
    after_metrics: Dict[str, Any]
    improvement: Dict[str, Any]
    status: str
    error_message: Optional[str]
    started_at: datetime
    completed_at: Optional[datetime]
    created_at: datetime


# –°—Ö–µ–º—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
class QualityAssessmentCreate(BaseModelSchema):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
    model_id: int = Field(..., gt=0, description="ID –º–æ–¥–µ–ª–∏")
    request_text: str = Field(..., min_length=1, max_length=10000, description="–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞")
    response_text: str = Field(..., min_length=1, max_length=50000, description="–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞")
    context_documents: List[Dict[str, Any]] = Field(default_factory=list, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
    
    # –û—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    relevance_score: float = Field(..., ge=0.0, le=1.0, description="–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞")
    accuracy_score: float = Field(..., ge=0.0, le=1.0, description="–¢–æ—á–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    coherence_score: float = Field(..., ge=0.0, le=1.0, description="–°–≤—è–∑–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞")
    fluency_score: float = Field(..., ge=0.0, le=1.0, description="–ë–µ–≥–ª–æ—Å—Ç—å —è–∑—ã–∫–∞")
    completeness_score: float = Field(..., ge=0.0, le=1.0, description="–ü–æ–ª–Ω–æ—Ç–∞ –æ—Ç–≤–µ—Ç–∞")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    assessment_details: Dict[str, Any] = Field(default_factory=dict, description="–î–µ—Ç–∞–ª–∏ –æ—Ü–µ–Ω–∫–∏")
    feedback_notes: Optional[str] = Field(None, max_length=2000, description="–ó–∞–º–µ—Ç–∫–∏ –ø–æ –æ—Ü–µ–Ω–∫–µ")
    assessed_by: str = Field(default="system", max_length=255, description="–ö—Ç–æ –æ—Ü–µ–Ω–∏–≤–∞–ª")
    assessment_method: str = Field(default="automatic", max_length=100, description="–ú–µ—Ç–æ–¥ –æ—Ü–µ–Ω–∫–∏")
    
    @computed_field
    @property
    def overall_score(self) -> float:
        """–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞"""
        scores = [
            self.relevance_score,
            self.accuracy_score,
            self.coherence_score,
            self.fluency_score,
            self.completeness_score
        ]
        return sum(scores) / len(scores)


class QualityAssessmentResponse(BaseModelSchema):
    """–û—Ç–≤–µ—Ç —Å –æ—Ü–µ–Ω–∫–æ–π –∫–∞—á–µ—Å—Ç–≤–∞"""
    id: int
    model_id: int
    request_text: str
    response_text: str
    context_documents: List[Dict[str, Any]]
    relevance_score: float
    accuracy_score: float
    coherence_score: float
    fluency_score: float
    completeness_score: float
    overall_score: float
    assessment_details: Dict[str, Any]
    feedback_notes: Optional[str]
    assessed_by: str
    assessment_method: str
    created_at: datetime


# –°—Ö–µ–º—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
class PerformanceMetricsCreate(BaseModelSchema):
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    model_id: int = Field(..., gt=0, description="ID –º–æ–¥–µ–ª–∏")
    response_time: float = Field(..., ge=0.0, description="–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    tokens_generated: Optional[int] = Field(None, ge=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤")
    tokens_processed: Optional[int] = Field(None, ge=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤")
    
    # –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    quality_metrics: Dict[str, float] = Field(default_factory=dict, description="–î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞")
    user_feedback: Optional[float] = Field(None, ge=1.0, le=5.0, description="–û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    memory_usage: Optional[float] = Field(None, ge=0.0, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ MB")
    cpu_usage: Optional[float] = Field(None, ge=0.0, le=100.0, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU –≤ %")
    gpu_usage: Optional[float] = Field(None, ge=0.0, le=100.0, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU –≤ %")
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    request_type: Optional[str] = Field(None, max_length=100, description="–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞")
    request_size: Optional[int] = Field(None, ge=0, description="–†–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ç–æ–∫–µ–Ω–∞—Ö")
    route_used: Optional[str] = Field(None, max_length=255, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç")
    
    # –°—Ç–∞—Ç—É—Å
    success: bool = Field(default=True, description="–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞")
    error_message: Optional[str] = Field(None, description="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")


class PerformanceMetricsResponse(BaseModelSchema):
    """–û—Ç–≤–µ—Ç —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    id: int
    model_id: int
    timestamp: datetime
    response_time: float
    tokens_generated: Optional[int]
    tokens_processed: Optional[int]
    quality_metrics: Dict[str, float]
    user_feedback: Optional[float]
    memory_usage: Optional[float]
    cpu_usage: Optional[float]
    gpu_usage: Optional[float]
    request_type: Optional[str]
    request_size: Optional[int]
    route_used: Optional[str]
    success: bool
    error_message: Optional[str]


class SystemHealthResponse(BaseModelSchema):
    """–û—Ç–≤–µ—Ç —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã"""
    id: int
    timestamp: datetime
    cpu_usage: Optional[float]
    memory_usage: Optional[float]
    disk_usage: Optional[float]
    network_io: Dict[str, Any]
    ollama_status: Optional[str]
    active_models: int
    total_requests: int
    error_rate: float
    rag_status: Optional[str]
    documents_count: int
    vector_db_status: Optional[str]
    response_time_avg: float
    requests_per_minute: float
    active_connections: int
    alerts: List[Dict[str, Any]]


# –°—Ö–µ–º—ã –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
class RouteRequest(BaseModelSchema):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é"""
    query: str = Field(..., min_length=1, max_length=10000, description="–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    context: Optional[Dict[str, Any]] = Field(None, description="–ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞")
    user_id: Optional[str] = Field(None, max_length=255, description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    priority: Optional[str] = Field(None, regex="^(high|normal|low)$", description="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–ø—Ä–æ—Å–∞")
    model_preference: Optional[str] = Field(None, max_length=255, description="–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å")
    use_rag: bool = Field(default=True, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RAG")
    optimization_level: str = Field(default="balanced", regex="^(speed|balanced|quality)$", description="–£—Ä–æ–≤–µ–Ω—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")


class RouteResponse(BaseModelSchema):
    """–û—Ç–≤–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞"""
    model_id: int = Field(..., description="ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏")
    model_name: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    route_id: int = Field(..., description="ID –º–∞—Ä—à—Ä—É—Ç–∞")
    strategy: str = Field(..., description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è")
    confidence: float = Field(..., ge=0.0, le=1.0, description="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –≤—ã–±–æ—Ä–µ")
    reasoning: str = Field(..., description="–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞")
    estimated_response_time: float = Field(..., ge=0.0, description="–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞")
    use_rag: bool = Field(..., description="–ë—É–¥–µ—Ç –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è RAG")


# –°—Ö–µ–º—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
class ModelStatsResponse(BaseModelSchema):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏"""
    model_id: int
    model_name: str
    total_requests: int
    successful_requests: int
    failed_requests: int
    avg_response_time: float
    avg_quality_score: float
    total_tokens_generated: int
    total_tokens_processed: int
    error_rate: float
    last_used: Optional[datetime]
    performance_trend: List[Dict[str, Any]] = Field(default_factory=list, description="–¢—Ä–µ–Ω–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")


class SystemStatsResponse(BaseModelSchema):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    total_models: int
    active_models: int
    total_routes: int
    active_routes: int
    total_documents: int
    total_requests_today: int
    avg_response_time: float
    error_rate: float
    system_health: SystemHealthResponse
    top_models: List[ModelStatsResponse] = Field(default_factory=list, description="–¢–æ–ø –º–æ–¥–µ–ª–µ–π –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")


# –°—Ö–µ–º—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
class PaginationParams(BaseModelSchema):
    """–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    skip: int = Field(default=0, ge=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞")
    limit: int = Field(default=100, ge=1, le=1000, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É")


class PaginatedResponse(BaseModelSchema):
    """–û—Ç–≤–µ—Ç —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    items: List[Any] = Field(..., description="–°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    total: int = Field(..., ge=0, description="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    skip: int = Field(..., ge=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    limit: int = Field(..., ge=1, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É")
    has_more: bool = Field(..., description="–ï—Å—Ç—å –ª–∏ –µ—â–µ —ç–ª–µ–º–µ–Ω—Ç—ã")


# –°—Ö–µ–º—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
class ModelFilterParams(BaseModelSchema):
    """–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π"""
    provider: Optional[str] = Field(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É")
    status: Optional[ModelStatusEnum] = Field(None, description="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É")
    is_available: Optional[bool] = Field(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏")
    min_quality_score: Optional[float] = Field(None, ge=0.0, le=1.0, description="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞")
    max_response_time: Optional[float] = Field(None, ge=0.0, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞")


class RouteFilterParams(BaseModelSchema):
    """–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    strategy: Optional[RouteStrategyEnum] = Field(None, description="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    is_active: Optional[bool] = Field(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    model_id: Optional[int] = Field(None, gt=0, description="–§–∏–ª—å—Ç—Ä –ø–æ –º–æ–¥–µ–ª–∏")


class TuningSessionFilterParams(BaseModelSchema):
    """–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–π —Ç—é–Ω–∏–Ω–≥–∞"""
    status: Optional[str] = Field(None, description="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É")
    model_id: Optional[int] = Field(None, gt=0, description="–§–∏–ª—å—Ç—Ä –ø–æ –º–æ–¥–µ–ª–∏")
    strategy: Optional[TuningStrategyEnum] = Field(None, description="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    created_after: Optional[datetime] = Field(None, description="–°–æ–∑–¥–∞–Ω–æ –ø–æ—Å–ª–µ")
    created_before: Optional[datetime] = Field(None, description="–°–æ–∑–¥–∞–Ω–æ –¥–æ")


# –°—Ö–µ–º—ã –¥–ª—è –æ—à–∏–±–æ–∫
class ErrorResponse(BaseModelSchema):
    """–û—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π"""
    error: str = Field(..., description="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
    code: str = Field(..., description="–ö–æ–¥ –æ—à–∏–±–∫–∏")
    details: Optional[Dict[str, Any]] = Field(None, description="–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏")
    timestamp: datetime = Field(default_factory=datetime.utcnow, description="–í—Ä–µ–º—è –æ—à–∏–±–∫–∏")


class ValidationErrorResponse(BaseModelSchema):
    """–û—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    error: str = Field(default="Validation error", description="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
    field_errors: List[Dict[str, Any]] = Field(..., description="–û—à–∏–±–∫–∏ –ø–æ–ª–µ–π")
    timestamp: datetime = Field(default_factory=datetime.utcnow, description="–í—Ä–µ–º—è –æ—à–∏–±–∫–∏") 