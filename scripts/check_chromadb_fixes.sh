#!/bin/bash

# üîß –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π ChromaDB
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞

set -e

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π ChromaDB..."

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ChromaDB
check_container_status() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ChromaDB..."
    
    if docker-compose ps chromadb | grep -q "Up"; then
        log_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ChromaDB –∑–∞–ø—É—â–µ–Ω"
    else
        log_error "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ChromaDB –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: Health Check
check_health_check() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Health Check..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ curl
    if curl -f http://localhost:8006/api/v1/heartbeat > /dev/null 2>&1; then
        log_success "Health Check —ç–Ω–¥–ø–æ–∏–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç"
    else
        log_error "Health Check —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ health check
    if docker-compose logs chromadb 2>&1 | grep -q "health check"; then
        log_success "Health Check –ª–æ–≥–∏ –Ω–∞–π–¥–µ–Ω—ã"
    else
        log_warning "Health Check –ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –µ—â–µ –Ω–µ –±—ã–ª–æ –ø—Ä–æ–≤–µ—Ä–æ–∫)"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_environment_variables() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    local env_vars=(
        "CHROMA_SERVER_HOST=0.0.0.0"
        "CHROMA_SERVER_HTTP_PORT=8000"
        "ANONYMIZED_TELEMETRY=False"
        "CHROMA_SERVER_OTEL_ENABLED=True"
    )
    
    for var in "${env_vars[@]}"; do
        local key="${var%=*}"
        local expected_value="${var#*=}"
        local actual_value=$(docker-compose exec -T chromadb env | grep "^$key=" | cut -d'=' -f2-)
        
        if [ "$actual_value" = "$expected_value" ]; then
            log_success "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è $key —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: $actual_value"
        else
            log_error "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è $key –Ω–µ–≤–µ—Ä–Ω–∞—è: –æ–∂–∏–¥–∞–ª–æ—Å—å '$expected_value', –ø–æ–ª—É—á–µ–Ω–æ '$actual_value'"
        fi
    done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: OpenTelemetry
check_opentelemetry() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ OpenTelemetry..."
    
    local otel_enabled=$(docker-compose exec -T chromadb env | grep "CHROMA_SERVER_OTEL_ENABLED" | cut -d'=' -f2)
    local otel_endpoint=$(docker-compose exec -T chromadb env | grep "CHROMA_SERVER_OTEL_ENDPOINT" | cut -d'=' -f2)
    local otel_service=$(docker-compose exec -T chromadb env | grep "CHROMA_SERVER_OTEL_SERVICE_NAME" | cut -d'=' -f2)
    
    if [ "$otel_enabled" = "True" ]; then
        log_success "OpenTelemetry –≤–∫–ª—é—á–µ–Ω"
    else
        log_error "OpenTelemetry –Ω–µ –≤–∫–ª—é—á–µ–Ω"
    fi
    
    if [ -n "$otel_endpoint" ]; then
        log_success "OpenTelemetry endpoint: $otel_endpoint"
    else
        log_error "OpenTelemetry endpoint –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    if [ -n "$otel_service" ]; then
        log_success "OpenTelemetry service name: $otel_service"
    else
        log_error "OpenTelemetry service name –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Python
check_python_connection() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ Python..."
    
    python3 -c "
import chromadb
try:
    client = chromadb.HttpClient(host='localhost', port=8006)
    heartbeat = client.heartbeat()
    print('‚úÖ ChromaDB –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ')
    print(f'   Heartbeat: {heartbeat}')
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ChromaDB: {e}')
    exit(1)
" 2>/dev/null || {
    log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ChromaDB —á–µ—Ä–µ–∑ Python"
    return 1
}
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 6: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è docker-compose
check_docker_compose_config() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ docker-compose.yml..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ health check –∫–æ–º–∞–Ω–¥—ã
    if grep -q 'curl.*api/v1/heartbeat' docker-compose.yml; then
        log_success "Health check –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π curl —ç–Ω–¥–ø–æ–∏–Ω—Ç"
    else
        log_error "Health check –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π curl —ç–Ω–¥–ø–æ–∏–Ω—Ç"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è nc –∫–æ–º–∞–Ω–¥—ã
    if ! grep -q 'nc -z localhost' docker-compose.yml; then
        log_success "–ö–æ–º–∞–Ω–¥–∞ nc –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ health check"
    else
        log_warning "–ö–æ–º–∞–Ω–¥–∞ nc –≤—Å–µ –µ—â–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–¥–µ-—Ç–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ OpenTelemetry
    if grep -q 'CHROMA_SERVER_OTEL_ENABLED=True' docker-compose.yml; then
        log_success "OpenTelemetry –≤–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    else
        log_error "OpenTelemetry –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 7: –õ–æ–≥–∏ –æ—à–∏–±–æ–∫
check_error_logs() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫..."
    
    local error_count=$(docker-compose logs chromadb 2>&1 | grep -i "error\|failed\|exception" | wc -l)
    
    if [ "$error_count" -eq 0 ]; then
        log_success "–û—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    else
        log_warning "–ù–∞–π–¥–µ–Ω–æ $error_count –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö"
        docker-compose logs chromadb 2>&1 | grep -i "error\|failed\|exception" | tail -5
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π ChromaDB..."
    echo "=================================="
    
    local failed_checks=0
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    check_container_status || ((failed_checks++))
    check_health_check || ((failed_checks++))
    check_environment_variables || ((failed_checks++))
    check_opentelemetry || ((failed_checks++))
    check_python_connection || ((failed_checks++))
    check_docker_compose_config || ((failed_checks++))
    check_error_logs || ((failed_checks++))
    
    echo "=================================="
    
    if [ $failed_checks -eq 0 ]; then
        log_success "–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! ChromaDB —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
        echo ""
        echo "üìä –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞:"
        echo "   ‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω"
        echo "   ‚úÖ Health check —Ä–∞–±–æ—Ç–∞–µ—Ç"
        echo "   ‚úÖ OpenTelemetry –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        echo "   ‚úÖ Python –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ"
        echo "   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
    else
        log_error "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: $failed_checks"
        echo ""
        echo "üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
        echo "   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs chromadb"
        echo "   2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å: docker-compose restart chromadb"
        echo "   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: cat docker-compose.yml | grep -A 20 chromadb"
        exit 1
    fi
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-}" in
    --help|-h)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
        echo ""
        echo "–û–ø—Ü–∏–∏:"
        echo "  --help, -h     –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        echo "  --verbose, -v  –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
        echo ""
        echo "–ü—Ä–∏–º–µ—Ä—ã:"
        echo "  $0              –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"
        echo "  $0 --verbose    –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –≤—ã–≤–æ–¥–æ–º –ª–æ–≥–æ–≤"
        exit 0
        ;;
    --verbose|-v)
        set -x
        ;;
esac

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@" 